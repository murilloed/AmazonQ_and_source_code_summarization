================================================================================
DOCUMENTO ORIGINAL - 200 PACOTES JAVA SELECIONADOS
Projeto: SARSB Backend
Data: 20/10/2025 21:21
================================================================================

TEMPLATE FEW-SHOT PROMPTING:

System:
You are a technical assistant specializing in Java, Javadoc, and software engineering best practices.
Your task is to generate formal, concise, and complete documentation for Java methods.
Instructions:
1. Insert a Javadoc block immediately above the given method.
2. List all exceptions thrown by the method (both declared in throws and thrown internally with throw).
3. Generate the same documentation in Markdown, formatted for use in a README or documentation website.
4. Do not change the logic of the original method.
5. Use only information visible in the code (do not invent elements).
6. Javadoc must follow the official standard, with @param, @return, @throws.
7. In Markdown, include: Description, Parameters, Return, Exceptions.

Example 1
input:
public int divide(int a, int b) throws ArithmeticException { 
if (b == 0) { 
throw new ArithmeticException("Division by zero is not allowed"); 
} 
return a/b;
}

Output:
Javadoc:
/** 
* Divides one integer by another. 
* 
* @param a the dividend 
* @param b the divisor 
* @return the result of dividing {@code a} by {@code b} 
* @throws ArithmeticException if {@code b} is zero 
*/
public int divide(int a, int b) throws ArithmeticException { 
if (b == 0) { 
throw new ArithmeticException("Division by zero is not allowed"); 
} 
return a/b;
}

Markdown:
### Method: divide

**Description:**
Divide one integer by another.

**Parameters:**
-  – the dividend
-  – the divisor

**Return:**
- The result of dividing  by .

**Exceptions:**
- ArithmeticException – if  is zero.

Example 2
input:
public String getElement(String[] array, int index) throws IndexOutOfBoundsException { 
if (index < 0 || index >= array.length) { 
throw new IndexOutOfBoundsException("Index out of range"); 
} 
return array[index];
}

Output:
Javadoc:
/** 
* Retrieves an element from the given array at the specified index. 
* 
* @param array the array to retrieve the element from 
* @param index the position of the element 
* @return the element at the given index 
* @throws IndexOutOfBoundsException if the index is negative or greater than or equal to the array length 
*/
public String getElement(String[] array, int index) throws IndexOutOfBoundsException { 
if (index < 0 || index >= array.length) { 
throw new IndexOutOfBoundsException("Index out of range"); 
} 
return array[index];
}

Markdown:
### Method: getElement

**Description:**
Retrieves an element from the given array at the specified index.

**Parameters:**
- rray – the array to retrieve the element from
- index – the position of the element

**Return:**
- The element at the given index.

**Exceptions:**
- IndexOutOfBoundsException – if the index is negative or greater than or equal to the array length.

User Prompt Template:
Documentation Task
Generate complete documentation for the following method:


================================================================================

PACOTE 1 - [Config] br.gov.ana.sarsb.config
------------------------------------------------------------
Arquivos: 6 | Métodos: 22

// Arquivo: Ambiente.java
// Caminho: \br\gov\ana\sarsb\config\Ambiente.java

package br.gov.ana.sarsb.config;


public class Ambiente {

    private static Ambiente instance;

    private enum Env {
        DESENVOLVIMENTO, HOMOLOGACAO, PRODUCAO, QA, LOCAL, MIGRACAO
    }

    private Env ambiente = Env.PRODUCAO;

    private Ambiente() {}

    public static Ambiente getInstance() {
        if(instance == null) {
            instance = new Ambiente();
        }
        return instance;
    }

    public boolean isProducao() {
        return ambiente == Env.PRODUCAO;
    }

    public void setProducao() {
        ambiente = Env.PRODUCAO;
    }

    public boolean isHomologacao() {
        return ambiente == Env.HOMOLOGACAO;
    }

    public void setHomologacao() {
        ambiente = Env.HOMOLOGACAO;
    }

    public boolean isDesenvolvimento() {
        return ambiente == Env.DESENVOLVIMENTO;
    }

    public void setDesenvolvimento() {
        ambiente = Env.DESENVOLVIMENTO;
    }

    public boolean isQA() {
        return ambiente == Env.QA;
    }

    public void setQA() {
        ambiente = Env.QA;
    }

    public boolean isLocal() {
        return ambiente == Env.LOCAL;
    }

    public void setLocal() {
        ambiente = Env.LOCAL;
    }

    public boolean isMigracao() {
        return ambiente == Env.MIGRACAO;
    }

    public void setMigracao() {
        ambiente = Env.MIGRACAO;
    }
}


// Fim do arquivo: Ambiente.java

// Arquivo: AWSConfig.java
// Caminho: \br\gov\ana\sarsb\config\AWSConfig.java

package br.gov.ana.sarsb.config;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AWSConfig {

    public AWSCredentials credentials() {
        AWSCredentials credentials = new BasicAWSCredentials(
           "private",
            "private"
        );
        return credentials;
    }

    @Bean
    public AmazonS3 amazonS3() {
        AmazonS3 s3client = AmazonS3ClientBuilder
                .standard()
                .withCredentials(new AWSStaticCredentialsProvider(credentials()))
                .withRegion(Regions.SA_EAST_1)
                .build();
        return s3client;
    }
}


// Fim do arquivo: AWSConfig.java

// Arquivo: Configuracoes.java
// Caminho: \br\gov\ana\sarsb\config\Configuracoes.java

package br.gov.ana.sarsb.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.context.event.EventListener;

import br.gov.ana.sarsb.repository.ParametroConfiguracaoRepository;
import br.gov.ana.sarsb.util.StartupUtil;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Configuration
public class Configuracoes {

	public static final String AMBIENTE = "sistema.ambiente";

	@Autowired
	private ParametroConfiguracaoRepository configuracaoRepository;

	@EventListener(ContextRefreshedEvent.class)
	public void inicializar() {
		try {
			StartupUtil.inicializaConfiguracoes(configuracaoRepository);
			log.info("[STARTUP SERVICE] VERIFICAÇÃO DE AMBIENTE");
			StartupUtil.inicializarAmbiente(AMBIENTE);
			log.info("[STARTUP SERVICE] JAVA VERSION: " + System.getProperty("java.version"));
			log.info("[STARTUP SERVICE] JAVA VENDOR: " + System.getProperty("java.vendor"));
			log.info("[STARTUP SERVICE] JAVA HOME: " + System.getProperty("java.home"));
			log.info("[STARTUP SERVICE] INICIALIZAÇÃO CONCLUÍDA");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

}


// Fim do arquivo: Configuracoes.java

// Arquivo: CorsConfiguration.java
// Caminho: \br\gov\ana\sarsb\config\CorsConfiguration.java

package br.gov.ana.sarsb.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfiguration {

	@Bean
	public WebMvcConfigurer corsConfigurer() {
		return new WebMvcConfigurer() {
			@Override
			public void addCorsMappings(CorsRegistry registry) {
				registry.addMapping("/**")
						.allowedOrigins(
								"https://www.ana.gov.br",
								"https://www.snirh.gov.br",
								"https://dev.snirh.gov.br",
								"https://hmg.snirh.gov.br",
								"http://desenvolvimento.snirh.gov.br",
								"http://localhost:4200",
								"http://localhost:8080",
								"http://desenv.snirh.gov.br",
								"http://desenv.snirh.gov.br/sasb/api/",
								"https://desenv.snirh.gov.br",
								"https://desenv.snirh.gov.br/sasb/api/"
						)
						.allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
						.allowedHeaders("Authorization", "Content-Type", "Accept")
						.allowCredentials(true)
						.maxAge(3600);
			}
		};
	}

}


// Fim do arquivo: CorsConfiguration.java

// Arquivo: SwaggerConfiguration.java
// Caminho: \br\gov\ana\sarsb\config\SwaggerConfiguration.java

package br.gov.ana.sarsb.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfiguration {

	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).select()
				.apis(RequestHandlerSelectors.basePackage("br.gov.ana.sarsb.resource"))
				.paths(PathSelectors.any()).build();
	}

}


// Fim do arquivo: SwaggerConfiguration.java

// Arquivo: WebConfiguration.java
// Caminho: \br\gov\ana\sarsb\config\WebConfiguration.java

package br.gov.ana.sarsb.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.util.UrlPathHelper;
import springfox.documentation.swagger2.mappers.ModelMapper;

@Configuration
public class WebConfiguration implements WebMvcConfigurer {

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("swagger-ui.html").addResourceLocations("classpath:/META-INF/resources/");
		registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
		registry.addResourceHandler("/**").addResourceLocations("classpath:/static/");
	}

	@Bean
	public RestTemplate restTemplateApplicationServer() {
		return new RestTemplate();
	}

	@Bean
	public HttpHeaders httpHeaders() {
		var headers = new HttpHeaders();
		headers.set("X-COM-PERSIST", "true");
		return headers;
	}

	@Override
	public void configurePathMatch(PathMatchConfigurer configurer) {
		var urlPathHelper = new UrlPathHelper();
		urlPathHelper.setUrlDecode(false);
		configurer.setUrlPathHelper(urlPathHelper);
	}


}


// Fim do arquivo: WebConfiguration.java

============================================================

PACOTE 2 - [Config] br.gov.ana.sarsb.config.cache
------------------------------------------------------------
Arquivos: 2 | Métodos: 3

// Arquivo: ConfigCache.java
// Caminho: \br\gov\ana\sarsb\config\cache\ConfigCache.java

package br.gov.ana.sarsb.config.cache;

import java.io.Serializable;
import java.util.HashMap;

public class ConfigCache implements Serializable {

    private static final long serialVersionUID = -4806648601087890853L;

    private static ConfigCache instance;
    private HashMap<String, String> configs = new HashMap<>();
    private transient ConfigSource source;

    private ConfigCache() {
    }

    public static ConfigCache getInstance() {
        if(instance == null) {
            instance = new ConfigCache();
        }
        return instance;
    }

    public String get(String chave) {
        String valor = configs.get(chave);
        if(valor == null && source != null) {
            valor = source.pesquisar(chave);
            configs.put("chave", valor);
        }
        return valor;
    }

    public void setSource(ConfigSource source) {
        this.source = source;
    }

    public void clear() {
        configs.clear();
    }

}


// Fim do arquivo: ConfigCache.java

// Arquivo: ConfigSource.java
// Caminho: \br\gov\ana\sarsb\config\cache\ConfigSource.java

package br.gov.ana.sarsb.config.cache;

public interface ConfigSource {

    String pesquisar(String chave);

}


// Fim do arquivo: ConfigSource.java

============================================================

PACOTE 3 - [Config] br.gov.ana.sarsb.config.db
------------------------------------------------------------
Arquivos: 1 | Métodos: 3

// Arquivo: SarsbDbConfig.java
// Caminho: \br\gov\ana\sarsb\config\db\SarsbDbConfig.java

package br.gov.ana.sarsb.config.db;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
		entityManagerFactoryRef = "sarsbEntityManager",
		transactionManagerRef = "sarsbTransactionManager",
		basePackages = { "br.gov.ana.sarsb.repository" })
public class SarsbDbConfig {
	
	@Primary
	@ConfigurationProperties(prefix = "spring.datasource.hikari")
	@Bean
	public DataSource sarsbDataSource() {
		return DataSourceBuilder.create().build();
	}

	@Primary
	@Bean(name = "sarsbEntityManager")
	public LocalContainerEntityManagerFactoryBean sarsbEntityManager(
			EntityManagerFactoryBuilder builder) {

		return builder.dataSource(sarsbDataSource())
				.packages("br.gov.ana.sarsb.model.entity")
				.persistenceUnit("sarsbPU")
				.build();
	}

	@Primary
	@Bean(name = "sarsbTransactionManager")
	public PlatformTransactionManager sarsbTransactionManager(
			@Qualifier("sarsbEntityManager") EntityManagerFactory entityManagerFactory) {
		return new JpaTransactionManager(entityManagerFactory);
	}
	
}


// Fim do arquivo: SarsbDbConfig.java

============================================================

PACOTE 4 - [Config] br.gov.ana.sarsb.config.security
------------------------------------------------------------
Arquivos: 2 | Métodos: 14

// Arquivo: OAuth2ServerConfiguration.java
// Caminho: \br\gov\ana\sarsb\config\security\OAuth2ServerConfiguration.java

package br.gov.ana.sarsb.config.security;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;

import br.gov.ana.sarsb.config.security.handler.AjaxLogoutSuccessHandler;
import br.gov.ana.sarsb.config.security.handler.Http401UnauthorizedEntryPoint;
import br.gov.ana.sarsb.config.security.provider.SSOAuthenticationProvider;

@Configuration
public class OAuth2ServerConfiguration {
	
    private static String applicationName;

    /**
     * Sets the application name from the Spring configuration property.
     * 
     * @param name the application name from {@code spring.application.name} property
     */
    @Value("${spring.application.name}")
    public void setApplicationName(String name) {
        applicationName = name;
    }

    public static String getApplicationName() {
        return applicationName;
    }

    @Bean
    public TokenStore memoryTokenStore() {
    	return new InMemoryTokenStore();
    }

    @Configuration
    @EnableAuthorizationServer
    public static class AuthorizationServerConfig implements AuthorizationServerConfigurer {

        @Value("${authorization.timeout.refreshToken}")
        private int refreshTokenTimeout;

        @Value("${authorization.timeout.token}")
        private int tokenTimeout;

        @Autowired
        private TokenStore tokenStore;

        @Autowired
        private PasswordEncoder encoder;

        @Autowired
        public AuthorizationServerConfig(TokenStore tokenStore) {
            this.tokenStore = tokenStore;
        }

        @Override
        public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
            clients.inMemory().withClient(applicationName).secret(encoder.encode(applicationName))
                .authorizedGrantTypes("password", "refresh_token", "implicit").scopes("read,write")
                .resourceIds(applicationName).accessTokenValiditySeconds(tokenTimeout)
                .refreshTokenValiditySeconds(refreshTokenTimeout);
        }

        @Override
        public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
            endpoints.authenticationManager(authenticationManager())
            	.reuseRefreshTokens(false).tokenStore(tokenStore);
        }

        @Override
        public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {
            oauthServer.tokenKeyAccess("permitAll()").checkTokenAccess("isAuthenticated()").passwordEncoder(encoder());
        }

        protected AuthenticationManager authenticationManager() {
            return new ProviderManager(Arrays.asList(authenticationProvider()));
        }
        
        @Bean
        public AuthenticationProvider authenticationProvider() {
        	return new SSOAuthenticationProvider();
        }
        
        @Bean
        public PasswordEncoder encoder() {
            return new BCryptPasswordEncoder();
        }

    }

    @Configuration
    @EnableResourceServer
    public static class ResourceServerConfiguration implements ResourceServerConfigurer {

        @Autowired
        private TokenStore tokenStore;

        @Override
        public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
            resources.tokenStore(tokenStore).resourceId(applicationName);
        }

        @Override
        public void configure(HttpSecurity http) throws Exception {
            // @formatter:off
            http.exceptionHandling()
        		.authenticationEntryPoint(authenticationEntryPoint())
                .and().logout()
                .logoutUrl("/logout")
                .logoutSuccessHandler(ajaxLogoutSuccessHandler())
                .and().csrf().disable().headers().frameOptions().disable()
                .and().sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and().authorizeRequests()
                .regexMatchers(HttpMethod.GET, "")
                .authenticated();
            // @formatter:on
        }
        
        @Bean
        public AuthenticationEntryPoint authenticationEntryPoint() {
        	return new Http401UnauthorizedEntryPoint();
        }
        
        @Bean
        public LogoutSuccessHandler ajaxLogoutSuccessHandler() {
        	return new AjaxLogoutSuccessHandler();
        }
    }
}


// Fim do arquivo: OAuth2ServerConfiguration.java

// Arquivo: SecurityConfiguration.java
// Caminho: \br\gov\ana\sarsb\config\security\SecurityConfiguration.java

package br.gov.ana.sarsb.config.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.firewall.HttpFirewall;
import org.springframework.security.web.firewall.StrictHttpFirewall;

@Configuration
@Order(-1)
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

    private static final String ENDPOINT_OAUTH_AUTHORIZE = "/oauth/authorize";

    @Override
    public void configure(HttpSecurity http) throws Exception {
        // @formatter:off
        http
	        .httpBasic()
	        .realmName(OAuth2ServerConfiguration.getApplicationName())
	        .and()
	        .sessionManagement()
	        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
	        .and()
	        .requestMatchers().antMatchers(ENDPOINT_OAUTH_AUTHORIZE)
	        .and()
	        .authorizeRequests()
	        .antMatchers(ENDPOINT_OAUTH_AUTHORIZE).authenticated()
	        .antMatchers(HttpMethod.OPTIONS, "**").permitAll();
        // @formatter:on

    }
    
    @Bean
    public HttpFirewall allowUrlEncodedPercentHttpFirewall() {
        var firewall = new StrictHttpFirewall();
        firewall.setAllowUrlEncodedSlash(true);
        firewall.setAllowUrlEncodedPercent(true);
        return firewall;
    }

}


// Fim do arquivo: SecurityConfiguration.java

============================================================

PACOTE 5 - [Config] br.gov.ana.sarsb.config.security.boundary
------------------------------------------------------------
Arquivos: 2 | Métodos: 1

// Arquivo: SecurityResource.java
// Caminho: \br\gov\ana\sarsb\config\security\boundary\SecurityResource.java

package br.gov.ana.sarsb.config.security.boundary;

import java.util.Collection;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = "/security")
@PreAuthorize("isAuthenticated()")
public class SecurityResource {
	
	/**
	 * Retrieves the collection of granted authorities (profiles/roles) for the currently authenticated user.
	 * This endpoint returns the security authorities associated with the authenticated user's session.
	 * 
	 * @param authentication the authentication object containing user credentials and authorities
	 * @return a collection of granted authorities representing the user's profiles/roles
	 */
	@GetMapping(value = "/currentuser/profiles")
	@ResponseBody
	public Collection<? extends GrantedAuthority> profiles (Authentication authentication) {
		return authentication.getAuthorities();
	}

}


// Fim do arquivo: SecurityResource.java

// Arquivo: UserResource.java
// Caminho: \br\gov\ana\sarsb\config\security\boundary\UserResource.java

package br.gov.ana.sarsb.config.security.boundary;

import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ana.sarsb.config.security.dto.CustomUserDTO;
import br.gov.ana.sarsb.config.security.dto.UserInfoDTO;

@RestController
@RequestMapping(path = "/userinfo")
@PreAuthorize("isAuthenticated()")
public class UserResource {
	
	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	public UserInfoDTO getUserInfo(Authentication authentication) {
		var userDetails = (UserDetails) authentication.getPrincipal();
		if(userDetails instanceof CustomUserDTO) {
			CustomUserDTO customUser = (CustomUserDTO) userDetails;
			return UserInfoDTO.builder()
					.name(customUser.getFullName())
					.email(customUser.getMail())
					.preferredUsername(customUser.getUsername())
					.build();
		}
		
		return null;
	}

}


// Fim do arquivo: UserResource.java

============================================================

PACOTE 6 - [Config] br.gov.ana.sarsb.config.security.handler
------------------------------------------------------------
Arquivos: 2 | Métodos: 2

// Arquivo: AjaxLogoutSuccessHandler.java
// Caminho: \br\gov\ana\sarsb\config\security\handler\AjaxLogoutSuccessHandler.java

package br.gov.ana.sarsb.config.security.handler;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
import org.springframework.stereotype.Component;

@Component
public class AjaxLogoutSuccessHandler extends AbstractAuthenticationTargetUrlRequestHandler
        implements LogoutSuccessHandler {

    public static final String BEARER_AUTHENTICATION = "Bearer ";

    private static final String HEADER_AUTHORIZATION = "authorization";

    @Autowired
    private TokenStore tokenStore;

    /**
     * Handles successful logout by invalidating OAuth2 tokens and setting appropriate HTTP response status.
     * 
     * This method extracts the Bearer token from the Authorization header, removes both the access token
     * and its associated refresh token from the token store, and returns an HTTP 200 OK status.
     * 
     * @param request the HTTP servlet request containing the authorization header with Bearer token
     * @param response the HTTP servlet response that will be set to status 200 OK
     * @param authentication the authentication object representing the user being logged out
     * @throws IOException if an input or output exception occurs during request/response processing
     * @throws ServletException if a servlet-specific exception occurs during processing
     */
    @Override
    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)
            throws IOException, ServletException {
        String token = request.getHeader(HEADER_AUTHORIZATION);
        if (token != null && token.startsWith(BEARER_AUTHENTICATION)) {
            final var oAuth2AccessToken = tokenStore
                    .readAccessToken(StringUtils.substringAfter(token, BEARER_AUTHENTICATION));
            if (oAuth2AccessToken != null) {
                tokenStore.removeAccessToken(oAuth2AccessToken);
                if (oAuth2AccessToken.getRefreshToken() != null) {
                	tokenStore.removeRefreshToken(oAuth2AccessToken.getRefreshToken());
                }
            }
        }
        response.setStatus(HttpServletResponse.SC_OK);

    }

}



// Fim do arquivo: AjaxLogoutSuccessHandler.java

// Arquivo: Http401UnauthorizedEntryPoint.java
// Caminho: \br\gov\ana\sarsb\config\security\handler\Http401UnauthorizedEntryPoint.java

package br.gov.ana.sarsb.config.security.handler;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

@Component
public class Http401UnauthorizedEntryPoint implements AuthenticationEntryPoint {

    private static final String ACESSO_NEGADO = "Acesso Negado.";

    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
            AuthenticationException authenticationException) throws IOException, ServletException {

        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, ACESSO_NEGADO);

    }

}

// Fim do arquivo: Http401UnauthorizedEntryPoint.java

============================================================

PACOTE 7 - [Config] br.gov.ana.sarsb.config.security.provider
------------------------------------------------------------
Arquivos: 1 | Métodos: 8

// Arquivo: SSOAuthenticationProvider.java
// Caminho: \br\gov\ana\sarsb\config\security\provider\SSOAuthenticationProvider.java

package br.gov.ana.sarsb.config.security.provider;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;
import org.springframework.security.core.authority.mapping.NullAuthoritiesMapper;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import br.gov.ana.sarsb.config.security.dto.CustomUserDTO;
import br.gov.ana.sarsb.config.security.dto.ProfileDTO;
import br.gov.ana.sarsb.config.security.dto.TokenDTO;
import br.gov.ana.sarsb.model.dto.municipio.PrefeituraDTO;
import br.gov.ana.sarsb.service.PrefeituraService;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;
import br.gov.ana.sarsb.service.integration.sso.SegurancaIntegrationService;

@Component
public class SSOAuthenticationProvider implements AuthenticationProvider {
	
	private boolean useAuthenticationRequestCredentials = true;
	private GrantedAuthoritiesMapper authoritiesMapper = new NullAuthoritiesMapper();
	
	@Autowired
	private SegurancaIntegrationService segurancaIntegrationService;
	
	@Autowired
	private PrefeituraService prefeituraService;

	@Autowired
	private MunicipioService municipioService;

	/**
	 * Authenticates a user using SSO integration services.
	 * 
	 * @param authentication the authentication request object containing username and password
	 * @return a fully authenticated object including credentials and authorities
	 * @throws AuthenticationException if authentication fails due to invalid credentials or system errors
	 * @throws BadCredentialsException if username is empty, password is empty, username not found, or authentication fails
	 */
	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		final UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;

		String username = userToken.getName();
        String password = (String) authentication.getCredentials();

        validateUsernameExists(userToken);
        validateUsername(userToken);
        validatePassword(password);
        
        try {
        	
        	TokenDTO tokenDTO = segurancaIntegrationService.tokenpassword("password", 
        			username, password, "PROFILE%20PERMISSOES%20RESTRICOES");
        	ProfileDTO profileDTO = segurancaIntegrationService.recuperarProfile(tokenDTO.getAccess_token());
        	PrefeituraDTO prefeitura = prefeituraService.pesquisarPorCnpj(username);
        	if(prefeitura != null) {
        		if(StringUtils.isNotBlank(prefeitura.getCodigoIbge())) {
        			Municipio mun = municipioService.pesquisarMunicipioPorIBGE(prefeitura.getCodigoIbge());
        			if(Objects.nonNull(mun)) {
        				profileDTO.setNome(mun.getNome() + "/" + mun.getSiglaUF());
        			}
        		}        		
        	}        	
        	
            CustomUserDTO user = new CustomUserDTO(username, "password", profileDTO.getNome(),
            		profileDTO.getEmail(), loadUserAuthorities(profileDTO.getPermissoes()));
            return createSuccessfulAuthentication(userToken, user);
        } catch (Exception e) {
        	throw badCredentials(e);
		}
	}
	
	/**
	 * Converts a list of permission strings into Spring Security GrantedAuthority objects.
	 * 
	 * @param permissions the list of permission strings to convert
	 * @return a collection of GrantedAuthority objects, or empty collection if permissions list is empty
	 */
	private Collection<? extends GrantedAuthority> loadUserAuthorities(List<String> permissions) {
		if(!permissions.isEmpty()) {
			return permissions.stream()
		            .map(SimpleGrantedAuthority::new)
		            .collect(Collectors.toList());
		}
		return Collections.emptyList();
	}
    
    /**
     * Indicates whether this provider supports the specified authentication type.
     * 
     * @param authentication the authentication class to check for support
     * @return true if the authentication class is assignable from UsernamePasswordAuthenticationToken
     */
    @Override
    public boolean supports(Class<? extends Object> authentication) {
    	return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication));
    }

	/**
	 * Creates a successful authentication token with user details and authorities.
	 * 
	 * @param authentication the original authentication request
	 * @param user the authenticated user details
	 * @return a new UsernamePasswordAuthenticationToken with mapped authorities
	 */
	protected Authentication createSuccessfulAuthentication(
			UsernamePasswordAuthenticationToken authentication, UserDetails user) {
		Object password = this.useAuthenticationRequestCredentials
				? authentication.getCredentials() : user.getPassword();

		UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(
				user, password,
				this.authoritiesMapper.mapAuthorities(user.getAuthorities()));
		result.setDetails(authentication.getDetails());

		return result;
	}
	
	/**
	 * Validates that the username exists in the security integration service.
	 * 
	 * @param userToken the authentication token containing the username to validate
	 * @throws BadCredentialsException if the username is not found in the system
	 */
	private void validateUsernameExists(final UsernamePasswordAuthenticationToken userToken) {
		if (StringUtils.isNotBlank(userToken.getName())) {
			if(segurancaIntegrationService.consultarUsuarioSemToken(userToken.getName()) == null) {				
				throw new BadCredentialsException("usernameNotFound");
			}
        }
	}
	
	/**
	 * Validates that the password is not blank.
	 * 
	 * @param password the password to validate
	 * @throws BadCredentialsException if the password is blank or empty
	 */
	private void validatePassword(String password) {
        if (StringUtils.isBlank(password)) {
            throw new BadCredentialsException("Password is empty!");
        }
    }

    /**
     * Validates that the username is not blank.
     * 
     * @param userToken the authentication token containing the username to validate
     * @throws BadCredentialsException if the username is blank or empty
     */
    private void validateUsername(final UsernamePasswordAuthenticationToken userToken) {
        if (StringUtils.isBlank(userToken.getName())) {
        	throw new BadCredentialsException("Username is empty!");
        }
    }
    
    /**
     * Creates a BadCredentialsException with the specified cause.
     * 
     * @param cause the underlying cause of the authentication failure
     * @return a BadCredentialsException with the cause attached
     */
    private BadCredentialsException badCredentials(Throwable cause) {
        return (BadCredentialsException) badCredentials().initCause(cause);
    }
    
    /**
     * Creates a BadCredentialsException with a generic message.
     * 
     * @return a BadCredentialsException with "badCredentials" message
     */
    private BadCredentialsException badCredentials() {
        return new BadCredentialsException("badCredentials");
    }

}


// Fim do arquivo: SSOAuthenticationProvider.java

============================================================

PACOTE 8 - [Controller] br.gov.ana.sarsb.model.dto.prestador
------------------------------------------------------------
Arquivos: 11 | Métodos: 2

// Arquivo: ContratoMunicipioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\ContratoMunicipioDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoMunicipioDTO {
	
	private Long id;
	private String codigoIbge;
	private String municipioUf;
	private Boolean servicoAgua;
	private Boolean servicoEsgoto;
	private Boolean municipioRestricao;
	
}


// Fim do arquivo: ContratoMunicipioDTO.java

// Arquivo: ContratoPrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\ContratoPrestadorDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoPrestadorDTO {
	
	private Long id;
	private String arquivoMinutaContrato;
	private Boolean existeArquivoMinutaContrato;
	private String arquivoDeclaracaoAnuencia;
	private Boolean existeArquivoDeclaracaoAnuencia;
	private String arquivoContrato;
	private String municipioUf;
	private Boolean servicoAgua;
	private Boolean servicoEsgoto;
	
}


// Fim do arquivo: ContratoPrestadorDTO.java

// Arquivo: DocumentoPrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\DocumentoPrestadorDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import br.gov.ana.sarsb.model.entity.TipoDocumentoPrestador;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class DocumentoPrestadorDTO {
	
	private Long id;
	private String arquivo;
//	private FormularioPrestadorDTO formularioCefPrestador;
	private TipoDocumentoPrestador tipoDocumentoPrestador;	

}


// Fim do arquivo: DocumentoPrestadorDTO.java

// Arquivo: FormularioPrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\FormularioPrestadorDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class FormularioPrestadorDTO {
	
	private Long id;
	private Long numeroRecibo;

}


// Fim do arquivo: FormularioPrestadorDTO.java

// Arquivo: MunicipioPrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\MunicipioPrestadorDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import lombok.*;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class MunicipioPrestadorDTO {
    private Long codIBGE;
    private String nomeMunicipio;
    private String ufMunicipio;
}


// Fim do arquivo: MunicipioPrestadorDTO.java

// Arquivo: MunicipioServicoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\MunicipioServicoDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class MunicipioServicoDTO {
	
	private Long id;
	private String codigoIbge;
	private String municipioUf;
	private Boolean servicoAgua;
	private Boolean servicoEsgoto;
	
}


// Fim do arquivo: MunicipioServicoDTO.java

// Arquivo: PrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\PrestadorDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import java.util.Date;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class PrestadorDTO {

	private Long id;
	private String cnpj;
	private String nomeRazaoSocial;
	private String codigoIbge;
	private String telefone;
	private String email;
	private String cpfResponsavel;
	private String nomeResponsavel;
	private String cargoResponsavel;
	private String telefoneResponsavel;
	private String emailResponsavel;
	private String comprovanteEnvio;
	private Date dataEnvio;
	
}

// Fim do arquivo: PrestadorDTO.java

// Arquivo: ProtocoloAdicionalDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\ProtocoloAdicionalDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ProtocoloAdicionalDTO {
	
	private Long id;
	private String protocolo;
	private String arquivo;
	private String cnpjAgenciaReguladora;
	private String cnpj;
	private String nome;
	private List<ContratoMunicipioDTO> listaServico;

}


// Fim do arquivo: ProtocoloAdicionalDTO.java

// Arquivo: ProtocoloPrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\ProtocoloPrestadorDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ProtocoloPrestadorDTO {
	
	private PrestadorDTO prestador;
	private List<ContratoPrestadorDTO> listaContratos;
	private List<DocumentoPrestadorDTO> listaDemonstracoesContabeis;
	private List<DocumentoPrestadorDTO> listaDemonstrativoCalculo;
	private List<DocumentoPrestadorDTO> listaLaudoDemonstrativo;
	private List<DocumentoPrestadorDTO> listaEstudoViabilidade;
	private List<DocumentoPrestadorDTO> listaPlanoCaptacao;
	private List<DocumentoPrestadorDTO> listaLaudoAdequacao;
	private List<DocumentoPrestadorDTO> listaDocumentoComplementar;

}


// Fim do arquivo: ProtocoloPrestadorDTO.java

// Arquivo: ProtocoloSimplesDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\ProtocoloSimplesDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import br.gov.ana.sarsb.model.entity.Prestador;
import br.gov.ana.sarsb.model.entity.ProtocoloAdicional;
import br.gov.ana.sarsb.model.entity.ProtocoloCefPrestador;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@EqualsAndHashCode
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ProtocoloSimplesDTO {

	private String protocolo;
	private String cnpjPrestador;
	private String nomePrestador;
	private boolean protocoloAdicional;
	
	public ProtocoloSimplesDTO criarProtocoloSimplesDTO(ProtocoloCefPrestador p) {
		Prestador prestador = p.getFormularioCefPrestador().getPrestador();
		return ProtocoloSimplesDTO.builder()
				.protocolo(p.getNumeroProtocolo())
				.cnpjPrestador(ConverterUtil.aplicaMascaraCNPJ(prestador.getCnpj()))
				.nomePrestador(prestador.getNomeRazaoSocial())
				.protocoloAdicional(Boolean.FALSE)
				.build();
	}
	
	public ProtocoloSimplesDTO criarProtocoloSimplesDTO(ProtocoloAdicional p) {
		return ProtocoloSimplesDTO.builder()
				.protocolo(p.getProtocolo())
				.cnpjPrestador(ConverterUtil.aplicaMascaraCNPJ(p.getPrestador().getCnpj()))
				.nomePrestador(p.getPrestador().getNomeRazaoSocial())
				.protocoloAdicional(Boolean.TRUE)
				.build();
	}
	
}


// Fim do arquivo: ProtocoloSimplesDTO.java

// Arquivo: ServicosReguladosDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\prestador\ServicosReguladosDTO.java

package br.gov.ana.sarsb.model.dto.prestador;

import lombok.*;

@Builder
@Getter
@AllArgsConstructor
@NoArgsConstructor
@Setter
public class ServicosReguladosDTO {
    private String servicoPrestado;
}


// Fim do arquivo: ServicosReguladosDTO.java

============================================================

PACOTE 9 - [Exception] br.gov.ana.sarsb.exception
------------------------------------------------------------
Arquivos: 3 | Métodos: 0

// Arquivo: NegocioException.java
// Caminho: \br\gov\ana\sarsb\exception\NegocioException.java

package br.gov.ana.sarsb.exception;

public class NegocioException extends RuntimeException {

    private static final long serialVersionUID = -7198488978214118659L;

    public NegocioException() {
        super();
    }

    public NegocioException(String msg) {
        super(msg);
    }

    public NegocioException(Throwable cause) {
        super(cause);
    }

    public NegocioException(String msg, Throwable cause) {
        super(msg, cause);
    }

}


// Fim do arquivo: NegocioException.java

// Arquivo: ServicoRemotoException.java
// Caminho: \br\gov\ana\sarsb\exception\ServicoRemotoException.java

package br.gov.ana.sarsb.exception;

public class ServicoRemotoException extends SistemaException {

    private static final long serialVersionUID = 5267898127782217041L;

    public ServicoRemotoException() {
        super();
    }

    public ServicoRemotoException(String msg) {
        super(msg);
    }

    public ServicoRemotoException(Throwable cause) {
        super(cause);
    }

    public ServicoRemotoException(String msg, Throwable cause) {
        super(msg, cause);
    }

}


// Fim do arquivo: ServicoRemotoException.java

// Arquivo: SistemaException.java
// Caminho: \br\gov\ana\sarsb\exception\SistemaException.java

package br.gov.ana.sarsb.exception;

public class SistemaException extends RuntimeException  {

    private static final long serialVersionUID = 7932906037871518427L;

    public SistemaException() {
        super();
    }

    public SistemaException(String msg) {
        super(msg);
    }

    public SistemaException(Throwable cause) {
        super(cause);
    }

    public SistemaException(String msg, Throwable cause) {
        super(msg, cause);
    }

}


// Fim do arquivo: SistemaException.java

============================================================

PACOTE 10 - [Model] br.gov.ana.sarsb.config.security.dto
------------------------------------------------------------
Arquivos: 6 | Métodos: 6

// Arquivo: CustomUserDTO.java
// Caminho: \br\gov\ana\sarsb\config\security\dto\CustomUserDTO.java

package br.gov.ana.sarsb.config.security.dto;

import java.util.Collection;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

@EqualsAndHashCode(callSuper = false)
@Getter
@Setter
public class CustomUserDTO extends User {
    private static final long serialVersionUID = 1L;

    private String fullName;
    private String givenName;
    private String lastName;
    private String title;
    private String department;
    private String mail;

    /**
     * Constructs a CustomUserDTO with basic authentication information.
     * 
     * @param username the username identifying the user whose data is represented by this UserDetails instance
     * @param password the password used to authenticate the user
     * @param authorities the authorities granted to the user
     */
    public CustomUserDTO(String username, String password, Collection<? extends GrantedAuthority> authorities) {
        super(username, password, authorities);
    }
    
    
    /**
     * Constructs a CustomUserDTO with authentication information and additional user details.
     * 
     * @param username the username identifying the user whose data is represented by this UserDetails instance
     * @param password the password used to authenticate the user
     * @param fullName the full name of the user
     * @param mail the email address of the user
     * @param authorities the authorities granted to the user
     */
    public CustomUserDTO(String username, String password, String fullName, String mail, Collection<? extends GrantedAuthority> authorities) {
        super(username, password, authorities);
        this.fullName = fullName;
        this.mail = mail;
    }
    
}

// Fim do arquivo: CustomUserDTO.java

// Arquivo: ProfileDTO.java
// Caminho: \br\gov\ana\sarsb\config\security\dto\ProfileDTO.java

package br.gov.ana.sarsb.config.security.dto;

import java.util.List;
import java.util.Map;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter 
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ProfileDTO {

	private Long id;
	private String identificador;
	private String nome;
	private String nomeExibicao;
	private String email;
	private Boolean ldap;
	private List<String> permissoes;
	private List<String> restricoes;
	private Map<String, List<String>> permissoesPorModulo;
	private String error;
	private String error_description;
	private Boolean ativo;
}

// Fim do arquivo: ProfileDTO.java

// Arquivo: TokenDTO.java
// Caminho: \br\gov\ana\sarsb\config\security\dto\TokenDTO.java

package br.gov.ana.sarsb.config.security.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter 
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class TokenDTO {

    private String access_token;
    private Long expires_in;

}


// Fim do arquivo: TokenDTO.java

// Arquivo: UserDetailsCustomDTO.java
// Caminho: \br\gov\ana\sarsb\config\security\dto\UserDetailsCustomDTO.java

package br.gov.ana.sarsb.config.security.dto;

import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

@EqualsAndHashCode(callSuper = false)
@Getter
@Setter
public class UserDetailsCustomDTO extends CustomUserDTO {

	private static final long serialVersionUID = -6285157776242420565L;

	private String username;

    @JsonIgnore
    private String password;
    private Collection<GrantedAuthority> authorities;
    private List<String> permissoes;

    @SuppressWarnings("unchecked")
	public UserDetailsCustomDTO(UserDetails userDetails) {
        super(userDetails.getUsername(), "-", userDetails.getAuthorities());
        this.username = userDetails.getUsername();
        this.password = userDetails.getPassword();
        this.authorities = (Collection<GrantedAuthority>) userDetails.getAuthorities();
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public Collection<GrantedAuthority> getAuthorities() {
        return authorities;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}


// Fim do arquivo: UserDetailsCustomDTO.java

// Arquivo: UserInfoDTO.java
// Caminho: \br\gov\ana\sarsb\config\security\dto\UserInfoDTO.java

package br.gov.ana.sarsb.config.security.dto;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Builder
public class UserInfoDTO {
	
	private String name;
	private String givenName;
	private String familyName;
	private String preferredUsername;
	private String email;
	private String department;
	private String title;

}


// Fim do arquivo: UserInfoDTO.java

// Arquivo: UsuarioDTO.java
// Caminho: \br\gov\ana\sarsb\config\security\dto\UsuarioDTO.java

package br.gov.ana.sarsb.config.security.dto;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Builder
public class UsuarioDTO {
	
	private Long id;
    private String nome;
    private String nomeExibicao;
    private String email;
    private String identificador;
    private String login;
    private Boolean ativo;
    private String perfis;

}


// Fim do arquivo: UsuarioDTO.java

============================================================

PACOTE 11 - [Model] br.gov.ana.sarsb.model.converter
------------------------------------------------------------
Arquivos: 1 | Métodos: 2

// Arquivo: AcoesDocContratoMatrizEnumConverter.java
// Caminho: \br\gov\ana\sarsb\model\converter\AcoesDocContratoMatrizEnumConverter.java

package br.gov.ana.sarsb.model.converter;

import br.gov.ana.sarsb.model.enums.AcoesDocContratoMatrizEnum;

import javax.persistence.AttributeConverter;
import javax.persistence.Converter;

@Converter(autoApply = true)
public class AcoesDocContratoMatrizEnumConverter implements AttributeConverter<AcoesDocContratoMatrizEnum, Long> {

    @Override
    public Long convertToDatabaseColumn(AcoesDocContratoMatrizEnum attribute) {
        if (attribute == null) {
            return null;
        }
        return attribute.getCodigo();
    }

    @Override
    public AcoesDocContratoMatrizEnum convertToEntityAttribute(Long dbData) {
        if (dbData == null) {
            return null;
        }
        return AcoesDocContratoMatrizEnum.get(dbData);
    }
}


// Fim do arquivo: AcoesDocContratoMatrizEnumConverter.java

============================================================

PACOTE 12 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora
------------------------------------------------------------
Arquivos: 18 | Métodos: 8

// Arquivo: AgenciaReguladoraDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\AgenciaReguladoraDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import br.gov.ana.sarsb.model.entity.TipoAgenciaReguladora;
import br.gov.ana.sarsb.model.entity.TipoDocumentoCriacao;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDocumento;
import br.gov.ana.sarsb.model.entity.TipoResponsavelMandatario;
import lombok.*;

import javax.persistence.CascadeType;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import java.util.Date;
import java.util.List;

// suposição de que você tem uma postagem armazenada em algum lugar
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AgenciaReguladoraDTO {
	private Long id;
	private String cnpj;
	private String nome;
	private String nomefantasia;
	private String sigla;
	private String urlSite;
	private String leiCriacao;
	private Date dataInicioOperacao;
	private String telefone;
	private String email;
	private String cpfResponsavel;
	private String nomeResponsavel;
	private String NomeSocialResponsavel;
	private String telefoneResponsavel;
	private String emailResponsavel;
	private String cargoFuncao;
	private String nomePontoFocal;
	private String telefonePontoFocal;
	private String emailPontoFocal;
	private String nomePontoFocal1;
	private String telefonePontoFocal1;
	private String emailPontoFocal1;
	private String nomePontoFocal2;
	private String telefonePontoFocal2;
	private String emailPontoFocal2;
	private Boolean agenciaAtiva;
	private String numeroDocumentoCriacao;
	private String anoDocumentoCriacao;
	private String urlDocumentoCriacao;
	private Date DataCriacao;
	private String decretoRegulamentacao;
	private String urlInstrumento;
	private String arquivoDocumentoRegulamentacao;
	private String arquivoDocumentoCriacao;
	private Boolean AceiteLgpd;
	private Date DataAceite;

	@OneToOne
	private TipoAgenciaReguladora tipoAgenciaReguladora;
	@OneToOne
	private TipoDocumentoCriacao TipoDocumentoCriacao;
	private String logradouro;
	private String bairro;
	private String uf;
	private String cidade;
	private String codigoIbge;
	private String  cep;
	private String numero;
	private Boolean semNumero;
	private String complemento;
	private String id_mandatario;
	private Long SetorRegulado;
	//responsavel mandatario

	private Boolean MultissetorialOutros;
	private String Multissetorialdsoutro;
	private Boolean MultissetorialTrasnporte;
	private Boolean MultissetorialEletricidade;
	private Boolean MultissetorialComunicacao;


	private Boolean MultissetorialGas;
	@OneToOne
	private TipoResponsavelMandatario TipoResponsavelMandatario;
	@OneToMany
	private List<TipoServicoReguladoDocumento> TipoServicoReguladoDocumento;



}

// Fim do arquivo: AgenciaReguladoraDTO.java

// Arquivo: AgenciaReguladoralistaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\AgenciaReguladoralistaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.*;

// suposição de que você tem uma postagem armazenada em algum lugar
@Builder
@Getter
@Setter
public class AgenciaReguladoralistaDTO {

		private Long id;
		private String cnpj;
		private String nome;
		private String sigla;

		// Construtores, getters e setters

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public AgenciaReguladoralistaDTO() {
		}

		public AgenciaReguladoralistaDTO(Long id,String cnpj, String nome, String sigla) {
			this.id = id;
			this.cnpj = cnpj;
			this.nome = nome;
			this.sigla = sigla;
		}

		public String getCnpj() {
			return cnpj;
		}

		public void setCnpj(String cnpj) {
			this.cnpj = cnpj;
		}

		public String getNome() {
			return nome;
		}

		public void setNome(String nome) {
			this.nome = nome;
		}

		public String getSigla() {
			return sigla;
		}

		public void setSigla(String sigla) {
			this.sigla = sigla;
		}
	}


// Fim do arquivo: AgenciaReguladoralistaDTO.java

// Arquivo: AgenciaTemProtocoloPrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\AgenciaTemProtocoloPrestadorDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AgenciaTemProtocoloPrestadorDTO {
	
	private Long id;
	private String protocolo;
	private String cnpjPrestador;
	private String nomePrestador;
	// private List<RespostaProtocoloDTO> listaRespostas;
	private boolean finalizado;
	private boolean excluido;
	private boolean protocoloAdicional;

}


// Fim do arquivo: AgenciaTemProtocoloPrestadorDTO.java

// Arquivo: AtoNormativoEriDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\AtoNormativoEriDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.*;

import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AtoNormativoEriDTO {

    private Long id;
    private Long anoReferencia;
    private Boolean atoAceite;
    private Boolean possuiAtoNormativo;
    private Boolean atoRevisado;
    private Boolean atoAlterouMatriz;
    private Boolean acrescentouRiscos;
    private Boolean observouProcedimentos;
    private Boolean atoConforme;
    private Long agenciaReguladora;
    private List<DocumentoNormativoEriDTO> documentosNormativosEri;
    private Boolean itemFinalizado;
    private Boolean primeiroAnoDeColeta;
    private Boolean normaVencida;

    public AtoNormativoEriDTO(Long id, Long anoReferencia, Boolean atoAceite,
                              Boolean possuiAtoNormativo, Boolean atoRevisado,
                              Boolean atoAlterouMatriz, Boolean acrescentouRiscos,
                              Boolean observouProcedimentos, Boolean atoConforme, Long agenciaReguladora,
                              Boolean itemFinalizado, Boolean primeiroAnoDeColeta) {
        this.id = id;
        this.anoReferencia = anoReferencia;
        this.atoAceite = atoAceite;
        this.possuiAtoNormativo = possuiAtoNormativo;
        this.atoRevisado = atoRevisado;
        this.atoAlterouMatriz = atoAlterouMatriz;
        this.acrescentouRiscos = acrescentouRiscos;
        this.observouProcedimentos = observouProcedimentos;
        this.atoConforme = atoConforme;
        this.agenciaReguladora = agenciaReguladora;
        this.itemFinalizado = itemFinalizado;
        this.primeiroAnoDeColeta = primeiroAnoDeColeta;
    }
}



// Fim do arquivo: AtoNormativoEriDTO.java

// Arquivo: ConformidadeEntidadeDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\ConformidadeEntidadeDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.DocumentoCondicoesGerais;
import lombok.*;

import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ConformidadeEntidadeDTO {

	private Long id;
	private Long anoColeta;
	private Boolean indicativoAceite;
	private String descricaoMotivo;
	private Boolean indicativoDeclaro;
	private AgenciaReguladora entidadeReguladora;
	private List<DocumentoCondicoesGerais> documentosCondicoesGerais;
	private String cnpj;
	private Boolean anoFinalizado;
	private String linkOficial;

}


// Fim do arquivo: ConformidadeEntidadeDTO.java

// Arquivo: DocumentoIndicadorMetaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\DocumentoIndicadorMetaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class DocumentoIndicadorMetaDTO {

    private Long id;
    private Long idAgencia;
    private String descricaoArquivo;
    private String linkOficial;
    private String tipoEnvio;
    private LocalDateTime dataInclusao;
    private Boolean acaoNovaLista = false;
    private Boolean acaoRetificacaoLista = false;
    private Boolean acaoNovoAto = false;
    private Boolean acaoRetificacaoAto = false;
    private Boolean acaoNovoRelatorio = false;
    private Boolean acaoRetificacaoRelatorio = false;
    private Boolean aceite = false;
    private Boolean realizaDownload = false;
    private Long numeroPergunta;

    private MultipartFile arquivo;
}


// Fim do arquivo: DocumentoIndicadorMetaDTO.java

// Arquivo: DocumentoNormativoEriDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\DocumentoNormativoEriDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import br.gov.ana.sarsb.model.entity.AtoNormativoEri;
import lombok.*;

import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class DocumentoNormativoEriDTO {

    private Long id;
    private String arquivo;
    private String dataInclusaoStr;
    private Date dataInclusao;
    private String linkOficial;
    private Long acao;
    private Boolean aceite;
    private AtoNormativoEri atoNormativoEri;
}


// Fim do arquivo: DocumentoNormativoEriDTO.java

// Arquivo: FormularioCefAgenciaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\FormularioCefAgenciaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import java.util.Date;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class FormularioCefAgenciaDTO {

	private Long id;
	private Long numeroRecibo;
	private String cnpjAgenciaReguladora;
	private Date dataEnvio;
	
}


// Fim do arquivo: FormularioCefAgenciaDTO.java

// Arquivo: ManifestacaoTecnicaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\ManifestacaoTecnicaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ManifestacaoTecnicaDTO {
	
	private Long id;
	private String arquivo;
	private boolean excluido;

}


// Fim do arquivo: ManifestacaoTecnicaDTO.java

// Arquivo: MunicipioIbgeDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\MunicipioIbgeDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class MunicipioIbgeDTO {
	private Long codigoIbge;
	private String nomeMunicipio;
	private String nomeUf;
	private Long latitude;
	private Long longitude;
	private String Uf;
}


// Fim do arquivo: MunicipioIbgeDTO.java

// Arquivo: ProcessoCefAgenciaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\ProcessoCefAgenciaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ProcessoCefAgenciaDTO {

	private Long id;
	private String arquivoProcessoDigitalCompleto;
	private String arquivoDecisaoTecnica;
	private Boolean analiseEconomicaFinanceira;
	private String arquivoDocumentoComplementar;
	private String descricaoDocumentoComplementar;
	private String comentariosAdicionais;	
	private boolean finalizado;
	private FormularioCefAgenciaDTO formularioCefAgencia;
	
	private List<AgenciaTemProtocoloPrestadorDTO> listaProtocoloPrestador;
	private List<ManifestacaoTecnicaDTO> listaManifestacaoTecnica;
	
}


// Fim do arquivo: ProcessoCefAgenciaDTO.java

// Arquivo: RequisitoComplementarDocDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\RequisitoComplementarDocDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RequisitoComplementarDocDTO {

    private Long id;
    private Long idRequisitoComplementar;
    private Long idDocumentoIndicadorMeta;
    private String descricaoArquivo;
    private String linkOficial;
    private String tipoEnvio;
    private String dataInclusao;
    private Boolean acaoNovaLista = false;
    private Boolean acaoRetificacaoLista = false;
    private Boolean acaoNovoAto = false;
    private Boolean acaoRetificacaoAto = false;
    private Boolean acaoNovoRelatorio = false;
    private Boolean acaoRetificacaoRelatorio = false;
    private Boolean realizaDownload = false;
    private Long numeroPergunta;
}


// Fim do arquivo: RequisitoComplementarDocDTO.java

// Arquivo: RequisitoComplementarDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\RequisitoComplementarDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import br.gov.ana.sarsb.model.entity.RequisitoComplementar;
import br.gov.ana.sarsb.model.entity.RequisitoComplementarDoc;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class RequisitoComplementarDTO {

    private Long id;
    private Long idAgencia;
    private Long anoReferencia;
    private Boolean pergunta1 = false;
    private Boolean pergunta2 = false;
    private Boolean pergunta3 = false;
    private Boolean pergunta4 = false;
    private Boolean pergunta5 = false;
    private Boolean pergunta6 = false;
    private Boolean pergunta7 = false;
    private Boolean aceite = false;
    private Boolean conforme = false;
    private List<RequisitoComplementarDocDTO> documentos;
    private List<DocumentoIndicadorMetaDTO> documentosParaSalvar;
    private List<MultipartFile> arquivos;
    private List<Long> idsDocumentosRemovidos;
    private Boolean finalizado = false;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Map<Long, List<RequisitoComplementarDocDTO>> documentosPorPergunta;

    // Construtor que recebe a entidade e preenche o DTO
    public RequisitoComplementarDTO(RequisitoComplementar entidade) {
        this.id = entidade.getId();
        this.idAgencia = entidade.getAgenciaReguladora() != null ? entidade.getAgenciaReguladora().getId() : null;
        this.anoReferencia = entidade.getAnoReferencia();
        this.pergunta1 = entidade.getPergunta1();
        this.pergunta2 = entidade.getPergunta2();
        this.pergunta3 = entidade.getPergunta3();
        this.pergunta4 = entidade.getPergunta4();
        this.pergunta5 = entidade.getPergunta5();
        this.pergunta6 = entidade.getPergunta6();
        this.pergunta7 = entidade.getPergunta7();
        this.conforme = entidade.getConforme();
        this.finalizado = entidade.getFinalizacao() != null;

        if (entidade.getDocumentos() != null) {
            this.documentos = entidade.getDocumentos().stream()
                    .map(doc -> RequisitoComplementarDocDTO.builder()
                            .id(doc.getId())
                            .idRequisitoComplementar(doc.getRequisitoComplementar() != null ? doc.getRequisitoComplementar().getId() : null)
                            .idDocumentoIndicadorMeta(doc.getDocumentoIndicadorMeta() != null ? doc.getDocumentoIndicadorMeta().getId() : null)
                            .descricaoArquivo(doc.getDocumentoIndicadorMeta().getDescricaoArquivo())
                            .linkOficial(doc.getDocumentoIndicadorMeta().getLinkOficial())
                            .tipoEnvio(doc.getDocumentoIndicadorMeta().getTipoEnvio().LINK.toString())
                            .dataInclusao(doc.getDocumentoIndicadorMeta().getDataInclusao() != null ? doc.getDocumentoIndicadorMeta().getDataInclusao().toString() : null)
                            .acaoNovaLista(doc.getDocumentoIndicadorMeta().getAcaoNovaLista())
                            .acaoRetificacaoLista(doc.getDocumentoIndicadorMeta().getAcaoRetificacaoLista())
                            .acaoNovoAto(doc.getDocumentoIndicadorMeta().getAcaoNovoAto())
                            .acaoRetificacaoAto(doc.getDocumentoIndicadorMeta().getAcaoRetificacaoAto())
                            .acaoNovoRelatorio(doc.getDocumentoIndicadorMeta().getAcaoNovoRelatorio())
                            .acaoRetificacaoRelatorio(doc.getDocumentoIndicadorMeta().getAcaoRetificacaoRelatorio())
                            .numeroPergunta(doc.getDocumentoIndicadorMeta().getNumeroPergunta())
                            .build())
                    .collect(Collectors.toList());
        }
    }
}


// Fim do arquivo: RequisitoComplementarDTO.java

// Arquivo: RespostaProtocoloDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\RespostaProtocoloDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class RespostaProtocoloDTO {
	
	private Long id;
	private Long idProtocoloPrestador;
	private Long idPerguntaDecreto;
	private Boolean resposta;
	private String comentario;

}


// Fim do arquivo: RespostaProtocoloDTO.java

// Arquivo: TipoResponsavelMandatarioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\TipoResponsavelMandatarioDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.Getter;
import lombok.Setter;


import java.util.Date;

@Getter
@Setter
public

class TipoResponsavelMandatarioDTO {
	private String nomeResponsavelLegal;
	private String telefoneResponsavelLegal;
	private String emailResponsavelLegal;
	private Long id_agr;
	private Long id;
	private Date dataInicioResponsavel;
	private Date dataFimResponsavel;


}


// Fim do arquivo: TipoResponsavelMandatarioDTO.java

// Arquivo: TipoServicoReguladoDescricaoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\TipoServicoReguladoDescricaoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.Getter;
import lombok.Setter;

import java.util.Date;

@Getter
@Setter
public

class TipoServicoReguladoDescricaoDTO {

	private Long id;
	private Long CodigoEri;
	private Boolean Servico_ic_agua_potavel;
	private Boolean Servico_ic_distribuicao_agua_potavel;
	private Boolean Servico_ic_coleta_esgoto;
	private Boolean Servico_ic_tratamento_esgoto;
	private Boolean Servico_ic_disposicao_residuos;
	private Boolean Servico_ic_varricao;
	private Boolean Servico_ic_capina;
	private Boolean Servico_ic_rocada;
	private Boolean Servico_ic_poda;
	private Boolean Servico_ic_limpeza_bueiros;
	private Boolean Servico_ic_limpeza_logradouros;
	private Boolean Servico_ic_remocao_logradouros;
	private Boolean Servico_ic_outras;
	private String Servico_ds_outras;
	private Boolean Servico_ic_coleta_manejo;
	private Boolean Servico_ic_transbordo_manejo;
	private Boolean Servico_ic_transporte_manejo;
	private Boolean Servico_ic_tratamento_manejo;
	private Boolean Servico_ic_destinacao_manejo;
	private Boolean Servico_ic_planejamento_publico;
	private Boolean Servico_ic_administracao;
	private Boolean Servico_ic_operacao_manutencao;

}

// Fim do arquivo: TipoServicoReguladoDescricaoDTO.java

// Arquivo: TipoServicoReguladoDocumentoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\TipoServicoReguladoDocumentoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import br.gov.ana.sarsb.model.dto.prestador.PrestadorDTO;
import br.gov.ana.sarsb.model.entity.Prestador;
import br.gov.ana.sarsb.model.entity.TipoServicoRegulado;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDocumento;
import lombok.Getter;
import lombok.Setter;

import java.util.Date;
import java.util.List;

@Getter
@Setter
public

class TipoServicoReguladoDocumentoDTO {
	private Long CodigoEntidade;
	private Long CodigoServico;
	private Date DatainicioServico;
	private Date DataFimServico;
	private String DocumentoDelegacao;
	private Long CodigoPrestadornovo;
	private String CodigoMunicipio;
	private String NomeMunicipio;
	private String UfMunicipio;
	private String DescricaoAtividade;
	private Long CodigoAtribuicao;
	private String OutrasDescricao;
	private Date DataInicioPrestador;
	private Date DataFimPrestador;
	private Boolean ServicoExcluido;
	private List<TipoServicoReguladoDocumentoDTO> vencidos;
	private Prestador prestador;
	private TipoServicoRegulado tipoServicoRegulado;
	private Long id;
	private Boolean itemDoEditar;

}


// Fim do arquivo: TipoServicoReguladoDocumentoDTO.java

// Arquivo: TipoServicoReguladoDocumentoFiltroDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\TipoServicoReguladoDocumentoFiltroDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora;

import lombok.Data;

import java.util.List;

@Data
public class TipoServicoReguladoDocumentoFiltroDTO {
    private List<String> uf;
    private String cpf;
    private Long idEri;
    private List<String> Municipio;
}


// Fim do arquivo: TipoServicoReguladoDocumentoFiltroDTO.java

============================================================

PACOTE 13 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo
------------------------------------------------------------
Arquivos: 7 | Métodos: 2

// Arquivo: AditivoAgenciaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\aditivo\AditivoAgenciaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo;

import java.util.Date;
import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AditivoAgenciaDTO {
	
	private Long id;
	private Date dataAssinatura;
	private Date dataEncerramento;
	private Date dataVencimentoContratoAnterior;
	private String arquivoAditivo;
	private AditivoProtocoloDTO aditivoProtocolo;
	private List<AditivoMunicipioDTO> listaMunicipio;
	
}


// Fim do arquivo: AditivoAgenciaDTO.java

// Arquivo: AditivoMunicipioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\aditivo\AditivoMunicipioDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AditivoMunicipioDTO {
	
	private Long id;
	private Long codigoIbge;
	private String municipioUf; 
	private Boolean agua;
	private Boolean esgoto;
	private Long idAditivoAgencia;
	private Boolean excluido;

}


// Fim do arquivo: AditivoMunicipioDTO.java

// Arquivo: AditivoProtocoloDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\aditivo\AditivoProtocoloDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo;

import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AditivoProtocoloDTO {
	
	private Long id;
	private Long idFormularioAditivoAgencia;
	private String protocolo;
	private String cnpj;
	private String nomePrestador;
	private List<RespostaAditivoDTO> listaResposta;

}


// Fim do arquivo: AditivoProtocoloDTO.java

// Arquivo: FormularioAditivoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\aditivo\FormularioAditivoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo;

import java.util.Date;

import br.gov.ana.sarsb.model.entity.FormularioAditivoAgencia;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class FormularioAditivoDTO {

	private Long id;
	private Long numeroRecibo;
	private String cnpjAgenciaReguladora;
	private Date dataEnvio;
	
	public FormularioAditivoDTO toFormularioAditivoDTO(FormularioAditivoAgencia entity) {
		return FormularioAditivoDTO.builder()
				.id(entity.getId())
				.numeroRecibo(entity.getNumeroRecibo())
				.cnpjAgenciaReguladora(entity.getAgenciaReguladora().getCnpj())
				.dataEnvio(entity.getDataEnvio())
				.build();
	}
	
}


// Fim do arquivo: FormularioAditivoDTO.java

// Arquivo: FormularioSmsruDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\aditivo\FormularioSmsruDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo;

import br.gov.ana.sarsb.model.entity.FormularioAditivoAgencia;
import br.gov.ana.sarsb.model.entity.FormularioAditivoSmsru;
import lombok.*;

import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class FormularioSmsruDTO {

	private Long id;
	private String numeroRecibo;
	private Long idprefeitura;
	private Date dataEnvio;

	public FormularioSmsruDTO toFormularioAditivoDTO(FormularioAditivoSmsru entity) {
		return FormularioSmsruDTO.builder()
				.id(entity.getId())
				.numeroRecibo(String.valueOf(entity.getNumeroRecibo()))
				.idprefeitura(entity.getPrefeitura().getId()) // Use o ID da prefeitura corretamente
				.dataEnvio(new Date()) // Define a data atual como data de envio
				.build();
	}



}


// Fim do arquivo: FormularioSmsruDTO.java

// Arquivo: RespostaAditivoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\aditivo\RespostaAditivoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo;

import java.util.List;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class RespostaAditivoDTO {
			
	private Long id;
	private Long idAditivoProtocolo;
	private Long idPerguntaDecreto;
	private Boolean resposta;
	private List<RespostaMunicipioDTO> listaMunicipio;

}


// Fim do arquivo: RespostaAditivoDTO.java

// Arquivo: RespostaMunicipioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\aditivo\RespostaMunicipioDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class RespostaMunicipioDTO {
			
	private Long id;
	private Long idRespostaAditivo;
	private Long codigoIbge;
	private String municipioUf; 
	private String clausula;
	private Boolean agua;
	private Boolean esgoto;
	private Boolean excluido;

}


// Fim do arquivo: RespostaMunicipioDTO.java

============================================================

PACOTE 14 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais
------------------------------------------------------------
Arquivos: 5 | Métodos: 0

// Arquivo: ConformidadeEntidadeServicosDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\condicoesgerais\ConformidadeEntidadeServicosDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais;

import lombok.*;

import java.util.Date;
import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ConformidadeEntidadeServicosDTO {
	private String municipioIbge;
	private String uf;
	private Long agenciaReguladora;
	private Long id;
	private Long anoColeta;
	private String descricaoInconformidadesLu;
	private String descricaoInconformidadesMrsu;
	private Date dataRegistro;
	private List<ConformidadeServicosReguladosDTO> atividades;
	private String tipoServico;
	private Long codigoIBge;
}


// Fim do arquivo: ConformidadeEntidadeServicosDTO.java

// Arquivo: ConformidadeServicoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\condicoesgerais\ConformidadeServicoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais;

import br.gov.ana.sarsb.model.dto.agenciareguladora.MunicipioIbgeDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.PrestadorDTO;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ConformidadeServicoDTO {
	MunicipioIbgeDTO municipioIbge;
	PrestadorDTO prestador;
	AgenciaReguladoraDTO agenciaReguladora;
	private Long id;
	private Long anoColeta;
	private String descricaoInconformidadesLu;
	private String descricaoInconformidadesMrsu;
	private Date dataRegistro;
	private String tipoServico;
	private Date dataFinalizacao;
	private String procoloContrato;
	private Boolean itemFinalizado;
}


// Fim do arquivo: ConformidadeServicoDTO.java

// Arquivo: ConformidadeServicosReguladosDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\condicoesgerais\ConformidadeServicosReguladosDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais;

import lombok.*;

import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ConformidadeServicosReguladosDTO {
	private Long id;
	private Long CodigoEntidade;
	private Long CodigoServico;
	private Date DatainicioServico;
	private Date DataFimServico;
	private String DocumentoDelegacao;
	private Long CodigoPrestadornovo;
	private String CodigoMunicipio;
	private String NomeMunicipio;
	private String UfMunicipio;
	private String DescricaoAtividade;
	private Long CodigoAtribuicao;
	private String OutrasDescricao;
	private Date DataInicioPrestador;
	private Date DataFimPrestador;
	private Boolean ServicoExcluido;
	private Boolean conformidade;
	private String nomePrestador;
	private Long servicoReguladoId;
}


// Fim do arquivo: ConformidadeServicosReguladosDTO.java

// Arquivo: FiltroConformidadeServicoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\condicoesgerais\FiltroConformidadeServicoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais;

import br.gov.ana.sarsb.model.entity.MunicipioIBGE;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class FiltroConformidadeServicoDTO {
	private Long idAgencia;
	private MunicipioIBGE uf;
	private Long cidade;
	private Long anoColetaFiltro;
	private String ufSigla;
	private String servicoPrestado;
	private Long tipoServicoSlu;
	private Long tipoServicoSmru;
}


// Fim do arquivo: FiltroConformidadeServicoDTO.java

// Arquivo: ProtocoloConformidadeDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\condicoesgerais\ProtocoloConformidadeDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais;

import lombok.Data;

import java.time.LocalDateTime;

@Data
public class ProtocoloConformidadeDTO {
	private Long idProtocoloContrato;
	private Long idProtocoloConformidade;
	private Long anoReferencia;
	private String protocoloConformidade;
	private LocalDateTime dataRegistroConformidade;
	private String procoloContrato;
	private LocalDateTime dataRegistroContrato;
	private Boolean preenchimentoHabilitado;
	private Long id;
	private Long idAgr;
	private Boolean dataFinalizacao;
}


// Fim do arquivo: ProtocoloConformidadeDTO.java

============================================================

PACOTE 15 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora.contrato
------------------------------------------------------------
Arquivos: 10 | Métodos: 0

// Arquivo: AtoNormativoDetalhadoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\AtoNormativoDetalhadoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import lombok.*;

import java.time.LocalDateTime;

@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AtoNormativoDetalhadoDTO {

        private Long id;
        private Long idAgr;
        private Boolean exclusao;
        private Integer anoColetaReferencia;
        private Boolean definicaoBensReserviveis;
        private Boolean definicaoMetodologia;
        private Boolean possuiExemplos;
        private LocalDateTime dataInclusao;
        private String metodologia;
        private String documentoUpload;
        private String definicaoBensReserviveisExemplo;
        private String linkDiarioOficial;
        private String exemplos;



}


// Fim do arquivo: AtoNormativoDetalhadoDTO.java

// Arquivo: ContratoAditivoVinculadoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\ContratoAditivoVinculadoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoAditivoVinculadoDTO {
    private Long id;
    private String nome;
    private String normaList;
    private String linkAditivo;
    private LocalDateTime dataAssinatura;
}


// Fim do arquivo: ContratoAditivoVinculadoDTO.java

// Arquivo: ContratoDetalhadoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\ContratoDetalhadoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import lombok.*;

import java.time.LocalDateTime;

@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
public class ContratoDetalhadoDTO {

        private Long id;
        private Long conDetIdAgr;
        private Integer conDetConCd;
        private Boolean conDetDefinicaoBensReserviveis;
        private Boolean conDetDefinicaoMetodologia;
        private String conDetDefinicaoBensReserviveisExemplo;
        private Boolean conDetPossuiExemplos;
        private String conDetExemplos;
        private String conDetMetodologia;
        private Boolean conDetDefinicaoBensReserviveisJusto;
        private Boolean conDetMetodologiaValorJusto;
        private String conDetArtigoContratualBensReversiveis;
        private String conDetExemplosContratualBensReversiveis;
        private Boolean conExcluido;
        private LocalDateTime conDetDataInclusao;
        private Long anoColetaReferencia;

}


// Fim do arquivo: ContratoDetalhadoDTO.java

// Arquivo: ContratoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\ContratoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.PrestadorDTO;
import br.gov.ana.sarsb.model.entity.ContratoServicoAtividadeSelecionada;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;
import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoDTO {

    List<MunicipioContratoDTO> municipios;
    private Long id;
    private Long tipoPrestacao;
    private String identificacao;
    private String codigoInterno;
    private Boolean isAbastecimento;
    private Boolean isAEsgotamento;
    private Boolean isLimpezaUrbana;
    private Boolean isManejoResiduos;
    private Boolean isDrenagemEManejoAguasPluviais;
    private LocalDateTime dataAssinatura;
    private Long prazoVigencia;
    private String linkInternet;
    private Boolean declaro;
    private AgenciaReguladoraDTO agenciaReguladora;
    private PrestadorDTO prestador;
    private String descricaoTipoPrestacao;
    private String descricaoTipoServicos;
    private List<Long> atividadesSelecionadasList;
    private Long idAgencia;
    private List<ContratoAditivoVinculadoDTO> aditivos;
    private LocalDateTime dataCadastro;
    private List<ContratoServicoAtividadeSelecionada> contratoServicoAtividadeSelecionadas;




}


// Fim do arquivo: ContratoDTO.java

// Arquivo: ContratoServicoAtividadeDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\ContratoServicoAtividadeDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoServicoAtividadeDTO {
    private Long id;
    private String nome;
    private Long idServico;
    private Long nomeServico;
}


// Fim do arquivo: ContratoServicoAtividadeDTO.java

// Arquivo: ContratoServicoAtividadeSelecionadaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\ContratoServicoAtividadeSelecionadaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoServicoAtividadeSelecionadaDTO {
    private Long id;
    private String nome;
    private Long idServico;
}


// Fim do arquivo: ContratoServicoAtividadeSelecionadaDTO.java

// Arquivo: ContratoServicoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\ContratoServicoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoServicoDTO {
    private Long id;
    private String nome;
    private List<ContratoServicoAtividadeDTO> atividades;
}


// Fim do arquivo: ContratoServicoDTO.java

// Arquivo: FiltroContratoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\FiltroContratoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import lombok.*;

import javax.persistence.Column;
import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class FiltroContratoDTO {
        List<Municipio> municipios;
        private String identificacaoContrato;
        private String servicoPrestador;
        private Long tipoPrestacao;
        private Long idAgencia;
        private Municipio cidade;
        private String ufSigla;
        private Boolean isAbastecimento;
        private Boolean isAEsgotamento;
        private Boolean isLimpezaUrbana;
        private Boolean isManejoResiduos;
        private Boolean isDrenagemEManejoAguasPluviais;

}


// Fim do arquivo: FiltroContratoDTO.java

// Arquivo: MunicipioContratoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\MunicipioContratoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class MunicipioContratoDTO {

    private Long municipioContratoId;
    private Long contratoId;
    private Long municipioIbgeId;
    private String uf;
    private String nomeMunicipio;

}


// Fim do arquivo: MunicipioContratoDTO.java

// Arquivo: ProtocoloIndenizacaoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contrato\ProtocoloIndenizacaoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contrato;

import br.gov.ana.sarsb.model.entity.ProtocoloIndenizacao;
import lombok.*;

import java.time.LocalDateTime;


@Builder
@Data
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ProtocoloIndenizacaoDTO {

    private Long idProtocolo;
    private String numeroProtocolo;
    private LocalDateTime dataRegistro;
    private Long contratoDetalhadoId;
    private Long atoNormativoDetalhadoId;
    private Long normaId;
    private String normaNome;
    private String normaDescricao;
    private Integer anoReferencia;

    private Long id;
    private String descricao;
    private Long eriId;

    public ProtocoloIndenizacaoDTO(Long id, String descricao, Long eriId) {
        this.id = id;
        this.descricao = descricao;
        this.eriId = eriId;
    }
}


// Fim do arquivo: ProtocoloIndenizacaoDTO.java

============================================================

PACOTE 16 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco
------------------------------------------------------------
Arquivos: 9 | Métodos: 0

// Arquivo: AgenciaReguladoraDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\AgenciaReguladoraDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class AgenciaReguladoraDTO {

    private Long id;
}


// Fim do arquivo: AgenciaReguladoraDTO.java

// Arquivo: ArquivoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\ArquivoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ArquivoDTO {
    private Long acao;
}


// Fim do arquivo: ArquivoDTO.java

// Arquivo: ContratoMatrizRiscoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\ContratoMatrizRiscoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import br.gov.ana.sarsb.model.enums.AcoesDocContratoMatrizEnum;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;
import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoMatrizRiscoDTO {

    List<DocumentoMatrizRiscoDTO> documentos;
    List<Municipio> municipios;
    PrestadorDTO prestador;
    AgenciaReguladoraDTO agenciaReguladora;
    private Long id;
    private Long idAgencia;
    private Long anoReferencia;
    private String tipoPrestacao;
    private String identificacaoContrato;
    private String codigoInterno;
    private Boolean isServicoAmbos = false;
    private Boolean isServicoEsgotamento = false;
    private Boolean isServicoAbastecimento = false;
    private Boolean isProducaoAguaPotavel = false;
    private Boolean isDistribuicaoAguaPotavel = false;
    private Boolean isColetaEsgoto = false;
    private Boolean isTratamentoEsgoto = false;
    private Boolean isDisposicaoFinalResiduos = false;
    private Date dataAssinatura;
    private Long prazoVigencia;
    private Date dataDelegacao;
    private Boolean isPossuiNovosRiscos = false;
    private Boolean isPossuiAlteracao = false;
    private Boolean isPossuiReparticao = false;
    private Boolean isPossuiObsersavoes = false;
    private String servicoPrestado;
    private String servicoPrestadoCombo;
    private String ufSigla;
    private QuestionarioDTO questionarioDTO;
    private ArquivoDTO arquivoDTO;
    private Boolean isAceite;
    private Boolean isContratoProgramaSeguindoNR = false;
    private Date anoCicloTarifario;
    private AcoesDocContratoMatrizEnum acao;

}


// Fim do arquivo: ContratoMatrizRiscoDTO.java

// Arquivo: ContratoMatrizRiscoListDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\ContratoMatrizRiscoListDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ContratoMatrizRiscoListDTO {

    PrestadorDTO prestador;
    private Long id;
    private Long anoReferencia;
    private String identificacaoContrato;
    private Boolean isServicoAmbos = false;
    private Boolean isServicoEsgotamento = false;
    private Boolean isServicoAbastecimento = false;
    private Boolean isProducaoAguaPotavel = false;
    private Boolean isDistribuicaoAguaPotavel = false;
    private Boolean isColetaEsgoto = false;
    private Boolean isTratamentoEsgoto = false;
    private Boolean isDisposicaoFinalResiduos = false;
    private String tipoPrestacao;
    private Date dataAssinatura;
    private Boolean isAceite;
    private String servicoPrestado;

}


// Fim do arquivo: ContratoMatrizRiscoListDTO.java

// Arquivo: DocumentoMatrizRiscoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\DocumentoMatrizRiscoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import br.gov.ana.sarsb.model.enums.AcoesDocContratoMatrizEnum;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class DocumentoMatrizRiscoDTO {
    private Long id;
    private String nome;
    private Date dataInclusao;
    private AcoesDocContratoMatrizEnum acao;
    private String url;
    private String acaoStr;
    private Long acaoL;
    private String cnpj;
    private Long idContrato;
}


// Fim do arquivo: DocumentoMatrizRiscoDTO.java

// Arquivo: FinalizacaoPreenchimentoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\FinalizacaoPreenchimentoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class FinalizacaoPreenchimentoDTO {
    private Long anoReferencia;
    private Long idEri;
}


// Fim do arquivo: FinalizacaoPreenchimentoDTO.java

// Arquivo: PrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\PrestadorDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class PrestadorDTO {

    private Long id;
    private String nome;
    private String cnpj;
}



// Fim do arquivo: PrestadorDTO.java

// Arquivo: ProtocolosMatrizRiscosDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\ProtocolosMatrizRiscosDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import lombok.*;

import java.time.LocalDateTime;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ProtocolosMatrizRiscosDTO {
    private Long idProtocoloContrato;
    private Long idProtocoloAtoNormativo;
    private Long anoReferencia;
    private String protocoloAtoNormativo;
    private LocalDateTime dataRegistroAtoNormativo;
    private String procoloContrato;
    private LocalDateTime dataRegistroContrato;
    private Boolean preenchimentoHabilitado;


}


// Fim do arquivo: ProtocolosMatrizRiscosDTO.java

// Arquivo: QuestionarioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\contratomatrizrisco\QuestionarioDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class QuestionarioDTO {

    private Integer anoReferencia;
    private Boolean isPossuiReparticao;
    private Boolean isPossuiAlteracao;
    private Boolean isPossuiNovosRiscos;
    private Boolean isPossuiObsersavoes;
    private Boolean isAceite;
    private Boolean isContratoProgramaSeguindoNR;
    private Date anoCicloTarifario;
    private Long acao;
}


// Fim do arquivo: QuestionarioDTO.java

============================================================

PACOTE 17 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao
------------------------------------------------------------
Arquivos: 18 | Métodos: 0

// Arquivo: DataImportacaoStatusDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\DataImportacaoStatusDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import lombok.*;

import java.time.LocalDate;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Data
public class DataImportacaoStatusDTO {
    public Boolean importado;
    private Long codAgrCd;
    public LocalDate dataImportacao;


    public DataImportacaoStatusDTO(boolean b) {

    }
}


// Fim do arquivo: DataImportacaoStatusDTO.java

// Arquivo: MonitoramentoUniversalizacaoBlocoEstrutura.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoBlocoEstrutura.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

public interface MonitoramentoUniversalizacaoBlocoEstrutura {
  String getNome();
}


// Fim do arquivo: MonitoramentoUniversalizacaoBlocoEstrutura.java

// Arquivo: MonitoramentoUniversalizacaoDados.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoDados.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import java.util.List;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class MonitoramentoUniversalizacaoDados {
  private List<MonitoramentoUniversalizacaoErros> municipio;
  private List<MonitoramentoUniversalizacaoErros> prestador;
}


// Fim do arquivo: MonitoramentoUniversalizacaoDados.java

// Arquivo: MonitoramentoUniversalizacaoErros.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoErros.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;


public interface MonitoramentoUniversalizacaoErros {
  String getNome();
  Integer getErros();
  String getUf();
}


// Fim do arquivo: MonitoramentoUniversalizacaoErros.java

// Arquivo: MonitoramentoUniversalizacaoFiltrosIndicadores.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoFiltrosIndicadores.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

public interface MonitoramentoUniversalizacaoFiltrosIndicadores {
  Integer getAnoRef();
  String getNome();
  String getUf();
}


// Fim do arquivo: MonitoramentoUniversalizacaoFiltrosIndicadores.java

// Arquivo: MonitoramentoUniversalizacaoMunAguaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoMunAguaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class MonitoramentoUniversalizacaoMunAguaDTO {

    private Integer munAguaCd;
    private Integer munAaRef;
    private Integer munIbgeCd;
    private Integer munDomredAguaUrb;
    private Integer munDomredAguaRur;
    private Integer munDomAguaUrb;
    private Integer munDomAguaRur;
    private Integer munTotalDomAgua;
    private Integer munTotalEcoredAgua;
    private Integer munTotalEcoAgua;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    private MunicipiosUniversalizacaoDTO municipioUniversalizacao;
}


// Fim do arquivo: MonitoramentoUniversalizacaoMunAguaDTO.java

// Arquivo: MonitoramentoUniversalizacaoMunEsgotoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoMunEsgotoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;
import java.time.LocalDateTime;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class MonitoramentoUniversalizacaoMunEsgotoDTO {

    private Integer munEsgCd;
    private Integer munAaRef;
    private Integer munIbgeCd;
    private Integer munDomredUrb;
    private Integer munDomredRur;
    private Integer munDomUrb;
    private Integer munDomRur;
    private Integer munTotalDom;
    private Integer munTotalEcored;
    private Integer munTotalEco;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    private MunicipiosUniversalizacaoDTO municipioUniversalizacao;
}


// Fim do arquivo: MonitoramentoUniversalizacaoMunEsgotoDTO.java

// Arquivo: MonitoramentoUniversalizacaoPrtAguaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoPrtAguaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import java.time.LocalDateTime;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class MonitoramentoUniversalizacaoPrtAguaDTO {

    private String prtCd;
    private Integer prtAaRef;
    private Integer prtMunIbgeCd;
    private Integer prtEcoredUrb;
    private Integer prtEcoredRur;
    private Integer prtEco;
    private Integer prtEcoIna;
    private Integer prtEcoredIna;
    private Integer prtEcoredFac;
    private Integer prtEcoFac;
    private Integer prtTotalEco;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    private PrestadorUniversalizacaoDTO prestadorUniversalizacao;
}


// Fim do arquivo: MonitoramentoUniversalizacaoPrtAguaDTO.java

// Arquivo: MonitoramentoUniversalizacaoPrtEsgDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MonitoramentoUniversalizacaoPrtEsgDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import java.time.LocalDateTime;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class MonitoramentoUniversalizacaoPrtEsgDTO {

    private String prtCd;
    private Integer prtAaRef;
    private Integer prtMunIbgeCd;
    private Integer prtEcoredUrb;
    private Integer prtEcoredRur;
    private Integer prtEco;
    private Integer prtEcoIna;
    private Integer prtEcoredIna;
    private Integer prtEcoredFac;
    private Integer prtEcoFac;
    private Integer prtTotalEco;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    private PrestadorUniversalizacaoDTO prestadorUniversalizacao;
}


// Fim do arquivo: MonitoramentoUniversalizacaoPrtEsgDTO.java

// Arquivo: MunicipiosUniversalizacaoArs.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MunicipiosUniversalizacaoArs.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

public interface MunicipiosUniversalizacaoArs {
  Integer getMunAr01();
  Integer getMunAr02();
}


// Fim do arquivo: MunicipiosUniversalizacaoArs.java

// Arquivo: MunicipiosUniversalizacaoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MunicipiosUniversalizacaoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class MunicipiosUniversalizacaoDTO {
    private Integer munIbgeCd;
    private Integer domResGerais;
    private Integer munPreenchimento;
    private Integer munErros;
    private String  munObjetoErros;
}


// Fim do arquivo: MunicipiosUniversalizacaoDTO.java

// Arquivo: MunicipiosUniversalizacaoErs.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MunicipiosUniversalizacaoErs.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

public interface MunicipiosUniversalizacaoErs {
  Integer getMunEr01();
  Integer getMunEr02();
}


// Fim do arquivo: MunicipiosUniversalizacaoErs.java

// Arquivo: MunicipiosUniversalizacaoTotalEco.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MunicipiosUniversalizacaoTotalEco.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

public interface MunicipiosUniversalizacaoTotalEco {
  Integer getMunTotalEco();
  Integer getMunTotalEcored();
}


// Fim do arquivo: MunicipiosUniversalizacaoTotalEco.java

// Arquivo: MunicipioUniversalizacaoRegras.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\MunicipioUniversalizacaoRegras.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import br.gov.ana.sarsb.model.entity.MunicipiosUniversalizacao;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class MunicipioUniversalizacaoRegras extends MunicipiosUniversalizacao {
  private Integer munAr01;
  private Integer munAr02;
  private Integer munEr01;
  private Integer munEr02;
}


// Fim do arquivo: MunicipioUniversalizacaoRegras.java

// Arquivo: PlanilhaUniversalizacaoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\PlanilhaUniversalizacaoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import lombok.*;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDate;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Data
public class PlanilhaUniversalizacaoDTO {

    @NotBlank(message = "Ano de referência não pode estar vazio")
    private String X00;

    @NotBlank(message = "Código IBGE do município é obrigatório")
    private String X01;

    @NotBlank(message = "Nome do município é obrigatório")
    private String X02;

    @NotBlank(message = "UF é obrigatória")
    private String X03;

    @NotNull(message = "População total do município é obrigatória")
    private Integer X04;

    @NotNull(message = "Domicílios particulares permanentes ocupados são obrigatórios")
    private Integer X05;

    @NotNull(message = "População urbana é obrigatória")
    private Integer X06;

    @NotNull(message = "Taxa média de ocupação é obrigatória")
    private Double X07;

    @NotNull(message = "População total no ano de referência é obrigatória")
    private Integer X08;

    @NotNull(message = "Domicílios residenciais ocupados totais são obrigatórios")
    private Integer X09;

    @NotNull(message = "Domicílios residenciais ocupados urbanos são obrigatórios")
    private Integer X10;

    @NotNull(message = "Domicílios residenciais ocupados rurais são obrigatórios")
    private Integer X11;

    @NotNull(message = "Estruturas de regionalização de água e esgoto são obrigatórias")
    private String X12;

    @NotNull(message = "Domicílios não residenciais ocupados são obrigatórios")
    private Integer GE01;

    @NotNull(message = "Domicílios residenciais com solução alternativa de água na área urbana são obrigatórios")
    private Integer A501;

    @NotNull(message = "Domicílios residenciais com solução alternativa de água na área rural são obrigatórios")
    private Integer A502;

    @NotNull(message = "Domicílios não residenciais com solução alternativa de água na área urbana são obrigatórios")
    private Integer A503;

    @NotNull(message = "Domicílios não residenciais com solução alternativa de água na área rural são obrigatórios")
    private Integer A504;

    @NotNull(message = "Total de domicílios com solução alternativa de água é obrigatório")
    private Integer A510;

    @NotNull(message = "Total de economias residenciais ativas com rede pública de água é obrigatório")
    private Double AR11;

    @NotNull(message = "Total de economias cobertas com rede pública de água é obrigatório")
    private Double AR12;

    @NotNull(message = "Domicílios residenciais com solução alternativa de esgoto na área urbana são obrigatórios")
    private Integer E501;

    @NotNull(message = "Domicílios residenciais com solução alternativa de esgoto na área rural são obrigatórios")
    private Integer E502;

    @NotNull(message = "Domicílios não residenciais com solução alternativa de esgoto na área urbana são obrigatórios")
    private Integer E503;

    @NotNull(message = "Domicílios não residenciais com solução alternativa de esgoto na área rural são obrigatórios")
    private Integer E504;

    @NotNull(message = "Total de domicílios com solução alternativa de esgoto é obrigatório")
    private Integer E510;

    @NotNull(message = "Total de economias residenciais ativas com rede de esgoto e tratamento no município é obrigatório")
    private Integer ER11;

    @NotNull(message = "Total de economias cobertas com rede pública de esgoto é obrigatório")
    private Integer ER12;

    // 🔵 Novos campos adicionados
    private String X20;
    private String X21;
    private String X22;
    private String X23;
    private String X24;
    private String X25;
    private String X26;

    private Integer GE02;

    private Integer AR01;
    private Integer AR02;
    private Integer AR03;
    private Integer AR04;
    private Integer AR05;
    private Integer AR06;
    private Integer AR07;
    private Integer AR10;

    private Integer ER01;
    private Integer ER02;
    private Integer ER03;
    private Integer ER04;
    private Integer ER05;
    private Integer ER06;
    private Integer ER07;
    private Integer ER10;
    private String 	aba;
    private Integer GE03;
    public Boolean importado;

    private Long codAgrCd;
    public LocalDate dataImportacao;

}


// Fim do arquivo: PlanilhaUniversalizacaoDTO.java

// Arquivo: PrestadorUniversalizacaoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\PrestadorUniversalizacaoDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class PrestadorUniversalizacaoDTO {
    private Long prtMunIbgeCd;
    private Integer prtAaRef;
    private String prtServico;
    private String prtNatJuridica;
    private String prtCtr;
    private Integer prtDomAbg;
    private Integer prtPopCensoAbg;
    private String prtAbrangencia;
    private String prtNome;

    private Integer prtPreenchimento;
    private Integer prtErros;
    private String prtObjetoErros;
    private String prtCd;
    private String prtSigla;

}


// Fim do arquivo: PrestadorUniversalizacaoDTO.java

// Arquivo: PrestadorUniversalizacaoGE02GE03.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\PrestadorUniversalizacaoGE02GE03.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

public interface PrestadorUniversalizacaoGE02GE03 {
  Integer getPrtGE02();
  Integer getPrtGE03();
}


// Fim do arquivo: PrestadorUniversalizacaoGE02GE03.java

// Arquivo: ProtocoloRequisitoComplementarDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\metasuniversalizacao\ProtocoloRequisitoComplementarDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao;

import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.entity.Protocolo;
import lombok.Data;

@Data
public class ProtocoloRequisitoComplementarDTO {
 private Long id;
 private RequisitoComplementarDTO requisitoComplementarDTO;
 private Protocolo protocolo;


    public ProtocoloRequisitoComplementarDTO(Long id, Protocolo protocolo, RequisitoComplementarDTO requisitoComplementarDTO) {
        this.id = id;
        this.protocolo = protocolo;
        this.requisitoComplementarDTO = requisitoComplementarDTO;
    }
}


// Fim do arquivo: ProtocoloRequisitoComplementarDTO.java

============================================================

PACOTE 18 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora.parametrosNrs
------------------------------------------------------------
Arquivos: 1 | Métodos: 0

// Arquivo: ParametrosNRSDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\parametrosNrs\ParametrosNRSDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.parametrosNrs;

import lombok.Data;

import java.util.Date;

@Data
public class ParametrosNRSDTO {

    private Long id;
    private Long anoReferencia;
    private Long normasDeReferencia;
    private Date dataInicioEnvio;
    private Date dataFimEnvio;

    private Date dataInicioRetificacao;
    private Date dataFimRetificacao;

    private Boolean verificarDataEnvio = false;
}


// Fim do arquivo: ParametrosNRSDTO.java

============================================================

PACOTE 19 - [Model] br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria
------------------------------------------------------------
Arquivos: 4 | Métodos: 0

// Arquivo: FinalizacaoRequest.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\regulacaotarifaria\FinalizacaoRequest.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class FinalizacaoRequest {
    private Long ano;
    private Long idAgencia;
}


// Fim do arquivo: FinalizacaoRequest.java

// Arquivo: ProtocoloRegulacaoTarifariaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\regulacaotarifaria\ProtocoloRegulacaoTarifariaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria;

import br.gov.ana.sarsb.model.entity.Protocolo;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class ProtocoloRegulacaoTarifariaDTO {
    private Long idProtocoloAtoNormativo;
    private Long anoReferencia;
    private String protocoloAtoNormativo;
    private LocalDateTime dataRegistroAtoNormativo;
    private String procoloContrato;
    private LocalDateTime dataRegistroContrato;
    private Boolean preenchimentoHabilitado;

    public ProtocoloRegulacaoTarifariaDTO(Protocolo protocolo){
        this.idProtocoloAtoNormativo = protocolo.getId();
        this.anoReferencia = protocolo.getAnoReferencia();
        this.protocoloAtoNormativo = protocolo.getNumeroProtocolo();
        this.dataRegistroAtoNormativo = protocolo.getDataEnvio();

    }
}


// Fim do arquivo: ProtocoloRegulacaoTarifariaDTO.java

// Arquivo: RegulacaoTarifariaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\regulacaotarifaria\RegulacaoTarifariaDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria;

import br.gov.ana.sarsb.model.entity.*;
import lombok.*;

import java.util.Date;
import java.util.List;

// suposição de que você tem uma postagem armazenada em algum lugar
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class RegulacaoTarifariaDTO {

    private Long id;
    private Date dataCadastro;
    private Boolean declaro;
    private AgenciaReguladora agenciaReguladora;
    private Contrato contrato;
    private List<MunicipioContrato> municipioContrato;
    private Boolean pergunta1;
    private Boolean pergunta2;
    private Boolean pergunta2_1;
    private Boolean pergunta3;
    private Boolean pergunta4;
    private Boolean pergunta5;
    private Boolean pergunta6;
    private Boolean pergunta7;
    private Boolean pergunta8;
    private Boolean pergunta9;
    private Boolean pergunta10;
    private Boolean pergunta11;
    private Long IdContrato;
    private String cnpjAgenciaReguladora;
    private Boolean finalizado;
    private Boolean isNormaVencida;
    private Long anoColeta;
    private Boolean isReplica;

    public RegulacaoTarifariaDTO(RegulacaoTarifaria regulacaoTarifaria) {
        this.id = regulacaoTarifaria.getId();
        this.dataCadastro = regulacaoTarifaria.getDataCadastro();
        this.declaro = regulacaoTarifaria.getDeclaro();
        this.agenciaReguladora = regulacaoTarifaria.getAgenciaReguladora();
        this.contrato = regulacaoTarifaria.getContrato();
        this.pergunta1 = regulacaoTarifaria.getPergunta1();
        this.pergunta2 = regulacaoTarifaria.getPergunta2();
        this.pergunta2_1 = regulacaoTarifaria.getPergunta2_1();
        this.pergunta3 = regulacaoTarifaria.getPergunta3();
        this.pergunta4 = regulacaoTarifaria.getPergunta4();
        this.pergunta5 = regulacaoTarifaria.getPergunta5();
        this.pergunta6 = regulacaoTarifaria.getPergunta6();
        this.pergunta7 = regulacaoTarifaria.getPergunta7();
        this.pergunta8 = regulacaoTarifaria.getPergunta8();
        this.pergunta9 = regulacaoTarifaria.getPergunta9();
        this.pergunta10 = regulacaoTarifaria.getPergunta10();
        this.pergunta11 = regulacaoTarifaria.getPergunta11();
        this.finalizado = regulacaoTarifaria.getFinalizacao() != null;
        this.isNormaVencida = false;
        this.anoColeta = regulacaoTarifaria.getAnoColeta();
    }
}

// Fim do arquivo: RegulacaoTarifariaDTO.java

// Arquivo: RegulacaoTarifariaFiltroDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\agenciareguladora\regulacaotarifaria\RegulacaoTarifariaFiltroDTO.java

package br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria;


import lombok.Data;

@Data
public class RegulacaoTarifariaFiltroDTO {
    private Long anoColeta;
    private Long idEntidadeReguladora;
    private String uf;
    private String municipio;
    private String codigoInternoContrato;
    private String servicoPrestador;
    private Long tipoContrato;
    private Boolean isEsgotamento;
    private Boolean isLimpezaUrbana;
    private Boolean isAbastecimento;
    private Boolean isManejoResiduos;
    private Boolean isDrenagemManejo;
}


// Fim do arquivo: RegulacaoTarifariaFiltroDTO.java

============================================================

PACOTE 20 - [Model] br.gov.ana.sarsb.model.dto.municipio
------------------------------------------------------------
Arquivos: 9 | Métodos: 6

// Arquivo: CadastranteDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\CadastranteDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import br.gov.ana.sarsb.model.entity.Prefeitura;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class CadastranteDTO {
	
	private Long   id;
	private String cpf;
	private String nome;
	private String email;
	private String telefone;
	private Boolean possuiVinculoPrefeitura;
	private String cargo;
	private String departamento;
	private PrefeituraDTO prefeitura;


}


// Fim do arquivo: CadastranteDTO.java

// Arquivo: InstrumentoCobrancaDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\InstrumentoCobrancaDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import br.gov.ana.sarsb.model.entity.TipoDocumentoArrecadacao;
import br.gov.ana.sarsb.model.entity.TipoInstrumentoLegal;
import br.gov.ana.sarsb.model.enums.SimNao;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class InstrumentoCobrancaDTO {

	private Long id;
	private Boolean implementado;
	private Boolean unicaEtapaSmrsu;
	private Boolean regimeAdotado;
	private String numeroInstrumento;
	private String arquivo;
	private Boolean arquivoModificado;
	private Long numeroRecibo;
	private Long numeroReciboRetificado;
	private Date dataCadastro;
	private Date dataAtualizacao;
	private Date dataSubmissaoInstrumentoLegal;
	private Date dataPrevisaoInicioCobranca;
	private String arquivoCronograma;
	private Boolean arquivoCronogramaModificado;
	private TipoInstrumentoLegal tipoInstrumentoLegal;
	private TipoDocumentoArrecadacao tipoDocumentoArrecadacao;
	private PrefeituraDTO prefeitura;
	private List<InstrumentoCobrancaTemEtapasDTO> instrumentoCobrancaTemEtapas;
	private Long etapaServico;
	private String outrosParamentroCobranca;
	private String outrosCategoriaUsuario;
	private String outrosValoresCobrados;
	private String outrosCobrancaSocial;
	private String paramentroCobranca;
	private String atividadeServico;


	public String gerarDetalhamento() {
		StringBuilder d = new StringBuilder();
		d.append("Etapa: ");
		instrumentoCobrancaTemEtapas.forEach(i -> {
			d.append(i.carregaDetalhamento());
		});
		d.append("\n");
//		d.append("Instrumento Implementado? " + (implementado ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao()) + " \n ")
		d.append("Regime adotado: " + (regimeAdotado ? "Tarifa" : "Taxa") + " \n")
				.append("Documento de Arrecadação: " + (tipoDocumentoArrecadacao != null ? tipoDocumentoArrecadacao.getDescricao() : "-") + "\n")
				.append("Instrumento Legal: " + (tipoInstrumentoLegal != null ? tipoInstrumentoLegal.getDescricao() : "-") + " \n")
				.append("Número do Instrumento: " + (StringUtils.isNotBlank(numeroInstrumento) ? numeroInstrumento.trim() : "-") + " \n")
				.append("Arquivo: " + (StringUtils.isNotBlank(arquivo) ? arquivo : "-"))
//				.append("Data do Cadastro: " + ConverterUtil.converterDateToString(dataCadastro, ConverterUtil.FORMATO_DATA_DD_MM_AAAA) + " \n ")
//				.append("Data Submissão: " + (dataSubmissaoInstrumentoLegal != null ? ConverterUtil.converterDateToString(dataSubmissaoInstrumentoLegal, ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "-") + " \n ")
//				.append("Data de Previsão: " + (dataPrevisaoInicioCobranca != null ? ConverterUtil.converterDateToString(dataPrevisaoInicioCobranca, ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "-") + " \n ")
//				.append("Arquivo Cronograma: " + (StringUtils.isNotBlank(arquivoCronograma) ? arquivoCronograma : "-") + " \n ")
				.append("\n\n");
		return d.toString();
	}


}


// Fim do arquivo: InstrumentoCobrancaDTO.java

// Arquivo: InstrumentoCobrancaMunicipioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\InstrumentoCobrancaMunicipioDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import br.gov.ana.sarsb.model.entity.InstrumentoCobrancaMunicipio;
import br.gov.ana.sarsb.model.entity.Sustentabilidade;
import br.gov.ana.sarsb.model.entity.TipoDocumentoArrecadacao;
import br.gov.ana.sarsb.model.entity.TipoInstrumentoLegal;
import lombok.*;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class InstrumentoCobrancaMunicipioDTO {

	private Long id;
	private Boolean implementado;
	private String arquivo;
	private Boolean arquivoModificado;
	private Long numeroRecibo;
	private Long numeroReciboRetificado;
	private Date dataCadastro;
	private Date dataAtualizacao;
	private Long prestadorMunicipio;
	private Long regimeCobranca;
	private Boolean unicoPrestador;
	private String etapaServico;
	private Long subcategoriaNaturezaPrestador;
	private Long naturezaPrestador;
	private Long cobrancaSocial;
	private Long valorCobradoBase;
	private String categoriasUsuario;
	private String parametroCobranca;
	private Long documentoArrecadacao;
	private Long instrumentoLegal;
	private Boolean arquivoCronogramaModificado;
	private TipoInstrumentoLegal tipoInstrumentoLegal;
	private TipoDocumentoArrecadacao tipoDocumentoArrecadacao;
	private PrefeituraDTO prefeitura;
	private List<InstrumentoCobrancaTemEtapasDTO> instrumentoCobrancaTemEtapas;
	private String outrosParamentroCobranca;
	private String outrosParamentroCobrancaUsuario;
	private String outrosParamentroCobrancaSocial;
	private String outrosValorCobrado;
	private Long codigoCadastrante;
	private Long codigoPrefeitura;
	private Boolean rascunho;
	private Boolean aceiteLgpd;
	private Long cdSus;
	private Integer anoExercicio;
	private BigDecimal recRequerida;
	private BigDecimal valArrecadado;
	private BigDecimal valSubsTarifario;
	private BigDecimal subValArrecadadoAlt;
	private Boolean susVerSusten;
	private String susUploadDocSus;
	private Boolean susConfVerif;
	private Boolean susAceite;
	private  List<Sustentabilidade> sustentabilidade;

	public PrefeituraDTO getPrefeitura() {
		return prefeitura;
	}

	public void setPrefeitura(PrefeituraDTO prefeitura) {
		this.prefeitura = prefeitura;
	}

	public InstrumentoCobrancaMunicipio toEntity() {
		InstrumentoCobrancaMunicipio entity = new InstrumentoCobrancaMunicipio();

		// Mapear os campos do DTO para a entidade
		entity.setImplementado(this.implementado);
		entity.setRegimeCobranca(this.regimeCobranca);
		entity.setCobrancaSocial(this.cobrancaSocial);
		entity.setValorCobradoBase(this.valorCobradoBase);
		entity.setDocumentoArrecadacao(this.documentoArrecadacao);
		entity.setInstrumentoLegal(this.instrumentoLegal);
		entity.setEtapaServico(this.etapaServico);
		entity.setParametroCobranca(this.parametroCobranca);
		entity.setCategoriasUsuario(this.categoriasUsuario);
		// Outros campos, se houver

		return entity;
	}




	// Getters e Setters dos campos do DTO
}




// Fim do arquivo: InstrumentoCobrancaMunicipioDTO.java

// Arquivo: InstrumentoCobrancaRelatorioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\InstrumentoCobrancaRelatorioDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import br.gov.ana.sarsb.model.entity.TipoDocumentoArrecadacao;
import br.gov.ana.sarsb.model.entity.TipoInstrumentoLegal;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

import java.math.BigInteger;
import java.util.Date;
import java.util.List;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class InstrumentoCobrancaRelatorioDTO {

	private BigInteger codigo;
	private String paramentoCobranca;
	private Long codigoPrefeitura;
	private String etapaDescricao;
	private String nomePrestador;
	private String categoriaDescricao;
	private String regimeCobranca;
	private String instrumentoCobranca;
	private String unicoprestador;
	private String naturezaPrestador;
	private String subcategoriaPrestador;


}


// Fim do arquivo: InstrumentoCobrancaRelatorioDTO.java

// Arquivo: InstrumentoCobrancaTemEtapasDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\InstrumentoCobrancaTemEtapasDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import br.gov.ana.sarsb.model.entity.TipoEtapaServico;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;


@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class InstrumentoCobrancaTemEtapasDTO {
	
	private TipoEtapaServico tipoEtapaServico;
	
	public String carregaDetalhamento() {
		return tipoEtapaServico.getDescricao();
	}

}


// Fim do arquivo: InstrumentoCobrancaTemEtapasDTO.java

// Arquivo: PrefeituraDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\PrefeituraDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import java.util.List;

import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.TipoAgenciaReguladora;
import br.gov.ana.sarsb.model.entity.TipoEntidadeReguladora;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class PrefeituraDTO {

	private Long id;
	private String cnpj;
	private String codigoIbge;
	private String email;
	private String telefone;
	private Boolean possuiEntidadeReguladora;
	private Long codigoPrestador;
	private String sigla;
	private String nome;
	private String descricaoOutraEntidade;
	private Boolean podeRetificar;
	private Boolean desativarCronograma;
	private String arquivoAtoDelegacao;
	private Boolean arquivoAtoDelegacaoModificado;
	private Long codigoAgencia;
	private Boolean aceiteLgpd;
	private TipoEntidadeReguladora entidadeReguladora;
	private AgenciaReguladora agenciaReguladora;
	private List<PrefeituraTemPrestadorDTO> prefeituraTemPrestadores;
	private TipoAgenciaReguladora tipoAgenciaReguladora;
}


// Fim do arquivo: PrefeituraDTO.java

// Arquivo: PrefeituraTemPrestadorDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\PrefeituraTemPrestadorDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import br.gov.ana.sarsb.model.entity.TipoEtapaServico;
import br.gov.ana.sarsb.model.entity.TipoSubCategoriaPrestador;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class PrefeituraTemPrestadorDTO {
	
	private TipoSubCategoriaPrestador tipoSubCategoriaPrestador;
	private TipoEtapaServico tipoEtapaServico;

	public String gerarDetalhamento() {
		StringBuilder d = new StringBuilder()
				.append("Etapa: " + (tipoEtapaServico != null ? tipoEtapaServico.getDescricao() : "-") + " \n")
				.append("Tipo do prestador de serviço: \n" + (tipoSubCategoriaPrestador != null ? tipoSubCategoriaPrestador.getTipoCategoriaPrestador().getDescricao() : "-") + " \n")
				.append((tipoSubCategoriaPrestador != null ? tipoSubCategoriaPrestador.getDescricao() : "-") + " \n");
		d.append("\n");
		return d.toString();
	}

}


// Fim do arquivo: PrefeituraTemPrestadorDTO.java

// Arquivo: SolicitacaoAcessoDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\SolicitacaoAcessoDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class SolicitacaoAcessoDTO {

	private Long id;
	private String codigoIbge;
	private String cpfSolicitante;
	private String nomeSolicitante;
	private String cnpj;
	private String email;

}

// Fim do arquivo: SolicitacaoAcessoDTO.java

// Arquivo: SustentabilidadeDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\SustentabilidadeDTO.java

package br.gov.ana.sarsb.model.dto.municipio;

import lombok.*;

import java.math.BigDecimal;
import java.util.Date;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class SustentabilidadeDTO {
    private Long id;
    private Integer anoExercicio;
    private BigDecimal recRequerida;
    private BigDecimal valArrecadado;
    private BigDecimal valSubsTarifario;
    private BigDecimal subValArrecadadoAlt;
    private Integer susVerSusten;
    private String susUploadDocSus;
    private Boolean susConfVerif;
    private Boolean susAceiteLgp;
    private Long prefeitura_id;
}


// Fim do arquivo: SustentabilidadeDTO.java

============================================================

PACOTE 21 - [Model] br.gov.ana.sarsb.model.dto.municipio.formulario
------------------------------------------------------------
Arquivos: 2 | Métodos: 0

// Arquivo: FormularioDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\formulario\FormularioDTO.java

package br.gov.ana.sarsb.model.dto.municipio.formulario;

import br.gov.ana.sarsb.model.entity.TipoFormulario;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter @Setter
public class FormularioDTO {
	
	private Long id;
	private FormularioSmrsuDTO formularioSmrsuDTO;
	private TipoFormulario tipoFormulario;
	private Boolean rascunho;

}


// Fim do arquivo: FormularioDTO.java

// Arquivo: FormularioSmrsuDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\formulario\FormularioSmrsuDTO.java

package br.gov.ana.sarsb.model.dto.municipio.formulario;

import java.util.List;

import br.gov.ana.sarsb.model.dto.municipio.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Getter @Setter
public class FormularioSmrsuDTO {

	private PrefeituraDTO prefeitura;
	private CadastranteDTO cadastrante;
	private List<InstrumentoCobrancaDTO> listaInstrumentoCobranca;
	private List<InstrumentoCobrancaRelatorioDTO> listaInstrumentoCobrancaNovo;
	private Boolean formularioSmrsuJaCadastrado;
	private Boolean desativarCronograma;
	private Boolean podeRetificar;
	private List<SustentabilidadeDTO> listaSustentabilidadeNovo;

}

// Fim do arquivo: FormularioSmrsuDTO.java

============================================================

PACOTE 22 - [Model] br.gov.ana.sarsb.model.dto.municipio.relatorio
------------------------------------------------------------
Arquivos: 1 | Métodos: 0

// Arquivo: ReciboDTO.java
// Caminho: \br\gov\ana\sarsb\model\dto\municipio\relatorio\ReciboDTO.java

package br.gov.ana.sarsb.model.dto.municipio.relatorio;

import java.io.File;
import java.util.List;

import br.gov.ana.sarsb.model.dto.municipio.SustentabilidadeDTO;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;
import br.gov.ana.sarsb.model.entity.Sustentabilidade;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class ReciboDTO {
	
	private String nomeTitular;
	private String cnpjFormatado;
	private String municipio;
	private String dataRegistro;
	private String numeroRecibo;
	private String dataRegistroRetificado;
	private String numeroReciboRetificado;	
	private FormularioDTO formularioDTO;	
	private boolean isDetalhado;
	private File recibo;
	private List<Sustentabilidade> sustentabilidade;

}


// Fim do arquivo: ReciboDTO.java

============================================================

PACOTE 23 - [Model] br.gov.ana.sarsb.model.entity
------------------------------------------------------------
Arquivos: 106 | Métodos: 21

// Arquivo: AditivoAgencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\AditivoAgencia.java

package br.gov.ana.sarsb.model.entity;

import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_aditivoagencia", schema = "public")
@Getter
@Setter
public class AditivoAgencia extends GenericEntity<Long> {

	private static final long serialVersionUID = 2934735328562658963L;

	public AditivoAgencia(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_aditivoagencia", sequenceName = "sq_aditivoagencia", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_aditivoagencia", strategy = GenerationType.SEQUENCE)
	@Column(name = "aag_cd")
	private Long id;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "aag_dt_assinatura", nullable = false)
	private Date dataAssinatura;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "aag_dt_encerramento", nullable = false)
	private Date dataEncerramento;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "aag_dt_vencimentocrtanterior", nullable = true)
	private Date dataVencimentoContratoAnterior;
	
	@Column(name = "aag_ds_arquivoaditivo", length = 300, nullable = false)
	private String arquivoAditivo;
	
	@ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
	@JoinColumn(name = "aag_adp_cd", referencedColumnName = "adp_cd")
	private AditivoProtocoloAgencia aditivoProtocolo;
	
    @OneToMany(mappedBy="aditivoAgencia", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private List<AditivoMunicipio> listaMunicipio;
	
}

// Fim do arquivo: AditivoAgencia.java

// Arquivo: AditivoMunicipio.java
// Caminho: \br\gov\ana\sarsb\model\entity\AditivoMunicipio.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;


@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabta_aditivomunicipio", schema = "public")
@Getter
@Setter
public class AditivoMunicipio extends GenericEntity<Long> {

	private static final long serialVersionUID = 5669172635359430861L;

	@Id
	@SequenceGenerator(name = "sq_aditivomunicipio", sequenceName = "sq_aditivomunicipio", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_aditivomunicipio", strategy = GenerationType.SEQUENCE)
	@Column(name = "amo_cd")
	private Long id;
	
	@Column(name = "amo_cd_ibgemunicipio", length = 7, nullable = false)
	private Long codigoIbge;
	
	@Column(name = "amo_ic_agua")
	private Boolean agua;
	
	@Column(name = "amo_ic_esgoto")
	private Boolean esgoto;

	@ManyToOne
	@JoinColumn(name = "amo_aag_cd", referencedColumnName = "aag_cd", nullable = false)
	private AditivoAgencia aditivoAgencia;

}

// Fim do arquivo: AditivoMunicipio.java

// Arquivo: AditivoProtocoloAgencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\AditivoProtocoloAgencia.java

package br.gov.ana.sarsb.model.entity;

import java.io.Serializable;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
@Entity
@Table(name = "sabtb_aditivoprotocolo", schema = "public")
@Getter
@Setter
public class AditivoProtocoloAgencia implements Serializable {

	private static final long serialVersionUID = 4051419223182023110L;
	
	public AditivoProtocoloAgencia(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_aditivoprotocolo", sequenceName = "sq_aditivoprotocolo", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_aditivoprotocolo", strategy = GenerationType.SEQUENCE)
	@Column(name = "adp_cd")
	private Long id;

	@ManyToOne
	@JoinColumn(name = "adp_fao_cd", referencedColumnName = "fao_cd")
	private FormularioAditivoAgencia formularioAditivoAgencia;
	
	@Column(name = "adp_ds_protocolo", length = 300, nullable = false)
	private String protocolo;
	
    @OneToMany(mappedBy="aditivoProtocolo", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private Set<RespostaAditivoAgencia> listaResposta;

}

// Fim do arquivo: AditivoProtocoloAgencia.java

// Arquivo: AgenciaReguladora.java
// Caminho: \br\gov\ana\sarsb\model\entity\AgenciaReguladora.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@SuppressWarnings("ALL")
@NoArgsConstructor
@Entity
@Table(name = "sabtb_agenciareguladora", schema = "public")
@Getter
@Setter
@NamedQueries({
		@NamedQuery(name = "AgenciaReguladora.pesquisaPorHash",
				query = "FROM AgenciaReguladora a WHERE a.agenciaAtiva = 0 and a.hashAtivacao = :hashAtivacao")
})
public class AgenciaReguladora extends GenericEntity<Long> {
	private static final long serialVersionUID = 6127199203947106931L;

	public AgenciaReguladora(Long id) {
		this.id = id;
	}
	@Id
	@SequenceGenerator(name = "sq_agenciareguladora", sequenceName = "sq_agenciareguladora", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_agenciareguladora", strategy = GenerationType.SEQUENCE)
	@Column(name = "agr_cd")
	private Long id;

	@Column(name = "agr_respm_cd", insertable = false,updatable = false)
	private String id_mandatario;



	@Column(name = "agr_nu_cnpj", length = 14, nullable = false)
	private String cnpj;

	@Column(name = "agr_nm", length = 150, nullable = false)
	private String nome;

	@Column(name = "agr_nm_fantasia", length = 150, nullable = false)
	private String nomefantasia;

	@Column(name = "agr_sg", length = 30, nullable = false)
	private String sigla;

	@Column(name = "agr_ds_urlsite", length = 500, nullable = false)
	private String urlSite;

	@Column(name = "agr_ds_leicriacao", length = 150, nullable = false)
	private String leiCriacao;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "agr_dt_iniciooperacao", nullable = false)
	private Date dataInicioOperacao;

	@Column(name = "agr_nu_telefone", length = 11, nullable = false)
	private String telefone;

	@Column(name = "agr_ds_email", length = 150, nullable = false)
	private String email;

	@Column(name = "agr_nu_cpfresponsavel", length = 11, nullable = false)
	private String cpfResponsavel;

	@Column(name = "agr_nm_responsavel", length = 150, nullable = false)
	private String nomeResponsavel;

	@Column(name = "agr_nm_social_responsavel", length = 150, nullable = false)
	private String NomeSocialResponsavel;

	@Column(name = "agr_nu_telefoneresponsavel", length = 11, nullable = false)
	private String telefoneResponsavel;

	@Column(name = "agr_ds_emailcontatoresponsavel", length = 150, nullable = false)
	private String emailResponsavel;

	@Column(name = "agr_ds_cargofuncaoresponsavel", length = 150, nullable = false)
	private String cargoFuncao;

	@Column(name = "agr_ic_agenciaativa", length = 11, nullable = false)
	private Boolean agenciaAtiva;

	///comeco do Ponto Focal Ana
	@Column(name = "agr_nm_ponto_focal", length = 150, nullable = false)
	private String nomePontoFocal;

	@Column(name = "agr_nu_telefone_ponto_focal", length = 11, nullable = false)
	private String telefonePontoFocal;

	@Column(name = "agr_ds_email_ponto_focal", length = 150, nullable = false)
	private String emailPontoFocal;

	@Column(name = "agr_nm_ponto_focal_adicional1", length = 150, nullable = false)
	private String nomePontoFocal1;

	@Column(name = "agr_nu_telefone_ponto_focal_adicional1", length = 11, nullable = false)
	private String telefonePontoFocal1;

	@Column(name = "agr_ds_email_ponto_focal_adicional1", length = 150, nullable = false)
	private String emailPontoFocal1;

	@Column(name = "agr_nm_ponto_focal_adicional2", length = 150, nullable = false)
	private String nomePontoFocal2;

	@Column(name = "agr_nu_telefone_ponto_focal_adicional2", length = 11, nullable = false)
	private String telefonePontoFocal2;

	@Column(name = "agr_ds_email_ponto_focal_adicional2", length = 150, nullable = false)
	private String emailPontoFocal2;


	@Column(name = "agr_nu_documento", length = 150, nullable = false)
	private String numeroDocumentoCriacao;

	@Column(name = "agr_nu_ano", length = 150, nullable = false)
	private String anoDocumentoCriacao;

	@Column(name = "agr_ds_url_documento", length = 500, nullable = false)
	private String urlDocumentoCriacao;

	@Column(name = "agr_dt_criacao", nullable = false)
	private Date DataCriacao;

	@Column(name = "agr_nu_decreto", length = 50, nullable = false)
	private String decretoRegulamentacao;

	@Column(name = "agr_url_instrumento", length = 500, nullable = false)
	private String urlInstrumento;


	@Column(name = "agr_nm_arquivo_lei_criacao", length = 150, nullable = false)
	private String arquivoDocumentoCriacao;

	@Column(name = "agr_nm_arquivo_lei_regulamentacao", length = 150, nullable = false)
	private String arquivoDocumentoRegulamentacao;


	///comeco do endereço
	@Column(name = "agr_ed_logradouro", length = 150, nullable = false)
	private String logradouro;

	@Column(name = "agr_ed_bairro", length = 150, nullable = false)
	private String bairro;

	@Column(name = "agr_sg_uf", length = 2, nullable = false)
	private String uf;

	@Column(name = "agr_municipio", length = 150, nullable = false)
	private String cidade;

	@Column(name = "agr_cd_codigoibge", length = 150, nullable = false)
	private String codigoIbge;

	@Column(name = "agr_nu_cep", length = 150, nullable = false)
	private String cep;

	@Column(name = "agr_nu_endereco", length = 12, nullable = false)
	private String numero;

	@Column(name = "agr_ic_semnumero", length = 11, nullable = false)
	private Boolean semNumero;

	@Column(name = "agr_ds_complemento", length = 150, nullable = false)
	private String complemento;

	@Column(name = "agr_ds_hashativacao", length = 50, nullable = false)
	private String hashAtivacao;

	@Column(name = "agr_ic_multissetorial_gas", length = 11, nullable = false)
	private Boolean MultissetorialGas;

	@Column(name = "agr_ic_multissetorial_outros", length = 11, nullable = false)
	private Boolean MultissetorialOutros;


	@Column(name = "agr_ic_multissetorial_comunicacao", length = 11, nullable = false)
	private Boolean MultissetorialComunicacao;



	@Column(name = "agr_ic_multissetorial_eletricidade", length = 11, nullable = false)
	private Boolean MultissetorialEletricidade;

	@Column(name = "agr_ic_multissetorial_tansporte", length = 11, nullable = false)
	private Boolean MultissetorialTrasnporte;


	@Column(name = "agr_ac_lgpd", length = 11, nullable = false)
	private Boolean AceiteLgpd;

	@Column(name = "agr_dt_ac_lgpd", nullable = false)
	private Date DataAceite;



	@Column(name = "agr_setr_cd")
	private Long SetorRegulado;

	@Column(name = "agr_ds_multissetorial_outros", length = 150, nullable = false)
	private String Multissetorialdsoutro;

	@ManyToOne
	@JoinColumn(name = "agr_tar_cd", referencedColumnName = "tar_cd", nullable = false)
	private TipoAgenciaReguladora tipoAgenciaReguladora;

//	@ManyToOne
//	@JoinColumn(name = "agr_tdc_cd", referencedColumnName = "tdc_cd", nullable = false)
//	private TipoDocumentoCriacao TipoDocumentoCriacao;

	@OneToOne
	@JoinColumn(name = "agr_cd", referencedColumnName = "respm_agr_cd")
	private  TipoResponsavelMandatario  TipoResponsavelMandatario;









}

// Fim do arquivo: AgenciaReguladora.java

// Arquivo: AgenciaTemProtocoloPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\AgenciaTemProtocoloPrestador.java

package br.gov.ana.sarsb.model.entity;

import java.io.Serializable;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode
@Entity
@Table(name = "sabta_agenciatemprotocoloprestador", schema = "public")
@Getter
@Setter
public class AgenciaTemProtocoloPrestador implements Serializable {

	private static final long serialVersionUID = -3035721976874319329L;
	
	@Id
	@SequenceGenerator(name = "sq_agenciatemprotocoloprestador", sequenceName = "sq_agenciatemprotocoloprestador", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_agenciatemprotocoloprestador", strategy = GenerationType.SEQUENCE)
	@Column(name = "atp_cd")
	private Long id;
	
	@Column(name = "atp_ds_protocolo", length = 150, nullable = true)
	private String protocolo;

	@Column(name = "atp_ic_finalizado")
	private Boolean finalizado;

	@ManyToOne
	@JoinColumn(name = "atp_pca_cd", referencedColumnName = "pca_cd")
	private ProcessoCefAgencia processoCefAgencia;
	
    @OneToMany(mappedBy="agenciaTemProtocoloPrestador", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private List<RespostaProtocolo> listaRespostas;

}

// Fim do arquivo: AgenciaTemProtocoloPrestador.java

// Arquivo: AtoNormativoDetalhado.java
// Caminho: \br\gov\ana\sarsb\model\entity\AtoNormativoDetalhado.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.*;
import java.time.LocalDateTime;

import lombok.*;

@Entity
@Table(name = "sabtb_atonormativo_detalhado")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AtoNormativoDetalhado {

    @Id
    @SequenceGenerator(
            name = "seq_atonormativo_detalhado",
            sequenceName = "public.sq_atonormativo_detalhado",
            allocationSize = 1
    )
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "seq_atonormativo_detalhado"
    )
    @Column(name = "cd_atod_id")
    private Long id;


    @Column(name = "atod_exclusao")
    private Boolean exclusao;

    @Column(name = "atod_id_agr")
    private Long idAgr;

    @Column(name = "atod_ano_coleta_id")
    private Integer anoColetaReferencia;

    @Column(name = "atod_definicao_bens_reserviveis")
    private Boolean definicaoBensReserviveis;

    @Column(name = "atod_definicao_metodologia")
    private Boolean definicaoMetodologia;

    @Column(name = "atod_possui_exemplos")
    private Boolean possuiExemplos;

    @Column(name = "atod_data_inclusao")
    private LocalDateTime dataInclusao;

    @Column(name = "atod_metodologia", columnDefinition = "TEXT")
    private String metodologia;

    @Column(name = "atod_documento_upload")
    private String documentoUpload;

    @Column(name = "atod_definicao_bens_reserviveis_exemplo", columnDefinition = "TEXT")
    private String definicaoBensReserviveisExemplo;

    @Column(name = "atod_link_diario_oficial")
    private String linkDiarioOficial;

    @Column(name = "atod_exemplos", columnDefinition = "TEXT")
    private String exemplos;



}


// Fim do arquivo: AtoNormativoDetalhado.java

// Arquivo: AtoNormativoEri.java
// Caminho: \br\gov\ana\sarsb\model\entity\AtoNormativoEri.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_atonormativoeri", schema = "public")
@Getter
@Setter
public class AtoNormativoEri extends GenericEntity<Long> {

    @Id
    @SequenceGenerator(name = "sq_atonormativoeri", sequenceName = "sq_atonormativoeri", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_atonormativoeri", strategy = GenerationType.SEQUENCE)
    @Column(name = "ato_cd")
    private Long id;

    @Column(name = "ato_ano_referencia")
    private Long anoReferencia;

    @Column(name = "ato_aceite")
    private Boolean atoAceite;

    @Column(name = "ato_possui_ato_normativo")
    private Boolean possuiAtoNormativo;

    @Column(name = "ato_revisado")
    private Boolean atoRevisado;

    @Column(name = "ato_alterou_matriz")
    private Boolean atoAlterouMatriz;

    @Column(name = "ato_acrecentou_riscos")
    private Boolean acrescentouRiscos;

    @Column(name = "ato_observou_procedimento")
    private Boolean observouProcedimentos;

    @Column(name = "ato_conforme")
    private Boolean atoConforme;

    @ManyToOne
    @JoinColumn(name = "ato_arg_cd", referencedColumnName = "agr_cd")
    AgenciaReguladora entidadeReguladora;


}


// Fim do arquivo: AtoNormativoEri.java

// Arquivo: Cadastrante.java
// Caminho: \br\gov\ana\sarsb\model\entity\Cadastrante.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_cadastrante", schema = "public")
@Getter
@Setter
public class Cadastrante extends GenericEntity<Long> {

	private static final long serialVersionUID = 2322017329253456366L;

	@Id
	@SequenceGenerator(name = "sq_cadastrante", sequenceName = "sq_cadastrante", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_cadastrante", strategy = GenerationType.SEQUENCE)
	@Column(name = "cad_cd")
	private Long id;

	@Column(name = "cad_nu_cpf", length = 11, nullable = false)
	private String cpf;

	@Column(name = "cad_nm", length = 150, nullable = false)
	private String nome;

	@Column(name = "cad_ds_email", length = 150, nullable = false)
	private String email;

	@Column(name = "cad_nu_telefone", length = 11, nullable = false)
	private String telefone;

	@Column(name = "cad_ic_vinculoprefeitura", nullable = false)
	private Boolean possuiVinculoPrefeitura;

	@Column(name = "cad_ds_cargo", length = 150, nullable = true)
	private String cargo;

	@Column(name = "cad_ds_departamento", length = 150, nullable = true)
	private String departamento;

	@ManyToOne
	@JoinColumn(name = "cad_pft_cd", referencedColumnName = "pft_cd", nullable = true)
	private Prefeitura prefeitura;
}

// Fim do arquivo: Cadastrante.java

// Arquivo: CondicaoAtividade.java
// Caminho: \br\gov\ana\sarsb\model\entity\CondicaoAtividade.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "sabtb_condicoesatividades", schema = "public")
@Getter
@Setter
public class CondicaoAtividade extends GenericEntity<Long> {

	private static final long serialVersionUID = 1790471043114875902L;

	@Id
	@SequenceGenerator(name = "sq_condicoesatividades", sequenceName = "sq_condicoesatividades", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_condicoesatividades", strategy = GenerationType.SEQUENCE)
	@Column(name = "cond_cd")
	private Long id;

	@Column(name = "cond_ic_conforme")
	private Boolean isConforme;

	@Column(name = "cond_serv_nome")
	private String nomeServico;

	@Column(name = "cond_serv_prestador_cd")
	private Long idPrestador;

	@Column(name = "cond_serv_prestador_nm")
	private String nomePrestador;

	@Column(name = "cond_serv_dt_inicio")
	private Date dataInicioPrestacao;

	@Column(name = "cond_serv_dt_fim")
	private Date dataFimPrestacao;

	@Column(name = "cond_tp_serv")
	private Long tipoServico;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cond_conf_cd")
	private ConformidadeServico conformidadeServico;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cond_serv_cd")
	private ServicoRegulado servicoRegulado;
}

// Fim do arquivo: CondicaoAtividade.java

// Arquivo: ConformidadeEntidade.java
// Caminho: \br\gov\ana\sarsb\model\entity\ConformidadeEntidade.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_conformidadeentidade", schema = "public")
@Getter
@Setter
public class ConformidadeEntidade extends GenericEntity<Long> {

	@Id
	@SequenceGenerator(name = "sq_conformidadeentidade", sequenceName = "sq_conformidadeentidade", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_conformidadeentidade", strategy = GenerationType.SEQUENCE)
	@Column(name = "con_cd")
	private Long id;

	@Column(name = "con_aa_coleta")
	private Long anoColeta;

	@Column(name = "con_ic_atendimentodiretrizes")
	private Boolean indicativoAceite;

	@Column(name = "con_ds_motivo")
	private String descricaoMotivo;

	@Column(name = "con_ic_declaro")
	private Boolean indicativoDeclaro;

	@ManyToOne
	@JoinColumn(name = "con_agr_cd", referencedColumnName = "agr_cd")
	AgenciaReguladora entidadeReguladora;

}


// Fim do arquivo: ConformidadeEntidade.java

// Arquivo: ConformidadeServico.java
// Caminho: \br\gov\ana\sarsb\model\entity\ConformidadeServico.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.util.Date;

@Entity
@Table(name = "sabtb_conformidadeservicos", schema = "public")
@Getter
@Setter
public class ConformidadeServico extends GenericEntity<Long> {

	private static final long serialVersionUID = -2951760175066890263L;

	@Id
	@SequenceGenerator(name = "sq_conformidadeservicos", sequenceName = "sq_conformidadeservicos", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_conformidadeservicos", strategy = GenerationType.SEQUENCE)
	@Column(name = "conf_cd")
	private Long id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "conf_mun_cd")
	private MunicipioIBGE municipioIBGE;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "conf_agr_cd")
	private AgenciaReguladora agenciaReguladora;

	@Column(name = "conf_aa_coleta")
	private Long anoColeta;

	@Column(name = "conf_ds_inconformidadeslu")
	private String descricaoInconformidadesLu;

	@Column(name = "conf_ds_inconformidadesmrsu")
	private String descricaoInconformidadesMrsu;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "conf_dt_registro")
	private Date dataRegistro;

	@Column(name = "conf_ds_tipo_servico")
	private String tipoServico;

	@Column(name = "conf_ic_conforme")
	private Boolean isConforme;

	@Column(name = "conf_dt_finalizacao")
	private Date dataFinalizacao;


}

// Fim do arquivo: ConformidadeServico.java

// Arquivo: Contrato.java
// Caminho: \br\gov\ana\sarsb\model\entity\Contrato.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "sabtb_contrato", schema = "public")
@Getter
@Setter
public class Contrato extends GenericEntity<Long> {

    private static final long serialVersionUID = -6045949820944268891L;

    @Id
    @SequenceGenerator(name = "sq_contrato", sequenceName = "sq_contrato", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_contrato", strategy = GenerationType.SEQUENCE)
    @Column(name = "con_cd")
    private Long id;

    @Column(name = "con_tp_prestacao", nullable = false)
    private Long tipoPrestacao;

    @Column(name = "con_iden_contrato", nullable = false)
    private String identificacao;

    @Column(name = "con_cod_interno", nullable = false)
    private String codigoInterno;

    @Column(name = "con_is_abastecimento")
    private Boolean isAbastecimento;

    @Column(name = "con_is_esgotamento")
    private Boolean isAEsgotamento;

    @Column(name = "con_is_limpeza_urbana")
    private Boolean isLimpezaUrbana;

    @Column(name = "con_is_manejo_residuos")
    private Boolean isManejoResiduos;

    @Column(name = "con_is_drenagem_manejo")
    private Boolean isDrenagemEManejoAguasPluviais;

    @Column(name = "con_dt_assinatura")
    private LocalDateTime dataAssinatura;

    @Column(name = "con_prazo_vigencia")
    private Long prazoVigencia;

    @Column(name = "con_link_internet")
    private String linkInternet;

    @Column(name = "con_ic_declaro")
    private Boolean declaro;

    @ManyToOne
    @JoinColumn(name = "con_agr_cd", referencedColumnName = "agr_cd")
    AgenciaReguladora agenciaReguladora;

    @ManyToOne
    @JoinColumn(name = "con_prt_cd", referencedColumnName = "prt_cd")
    Prestador prestador;

    @Column(name = "con_dt_atualizacao")
    private LocalDateTime dataAtualizacao;

    @Column(name = "con_status")
    private Boolean statusAtivo;

    @Column(name = "con_tp_acao")
    private String acao;

    @Column(name = "con_excluido")
    private Boolean contratoExcuido;

    @Column(name = "con_dt_cadastro")
    private LocalDateTime dataCadastro;


}


// Fim do arquivo: Contrato.java

// Arquivo: ContratoAditivo.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoAditivo.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_contratoaditivo", schema = "public")
@Getter
@Setter
public class ContratoAditivo extends GenericEntity<Long> {

	private static final long serialVersionUID = -7376107695573296154L;

	@Id
	@SequenceGenerator(name = "sq_contratoaditivo", sequenceName = "sq_contratoaditivo", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_contratoaditivo", strategy = GenerationType.SEQUENCE)
	@Column(name = "cad_cd")
	private Long id;

	@Column(name = "cad_ds_arquivo", length = 350, nullable = false)
	private String arquivo;
	
	@ManyToOne
	@JoinColumn(name = "cad_cpc_cd", referencedColumnName = "cpc_cd", nullable = false)
	private ContratoProtolocoCef contratoProtolocoCef;	

}

// Fim do arquivo: ContratoAditivo.java

// Arquivo: ContratoAditivoVinculado.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoAditivoVinculado.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.time.LocalDateTime;

@Entity
@Table(name = "sabtb_contratoaditivovinculado", schema = "public")
@Getter
@Setter
public class ContratoAditivoVinculado extends GenericEntity<Long> {

    private static final long serialVersionUID = -2572216103766095783L;

    @Id
    @SequenceGenerator(name = "sq_contrato_aditivo_viculado", sequenceName = "sq_contrato_aditivo_viculado", allocationSize = 1)
    @GeneratedValue(generator = "sq_contrato_aditivo_viculado", strategy = GenerationType.SEQUENCE)
    @Column(name = "adi_cd")
    private Long id;

    @Column(name = "adi_nome")
    private String nome;

    @Column(name = "adi_norma")
    private String normaList;

    @Column(name = "adi_dt_assinatura")
    private LocalDateTime dataAssinatura;

    @Column(name = "adi_link_aditivo")
    private String linkAditivo;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "adi_con_cd")
    private Contrato contrato;

}

// Fim do arquivo: ContratoAditivoVinculado.java

// Arquivo: ContratoDetalhamento.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoDetalhamento.java

package br.gov.ana.sarsb.model.entity;


import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "sabtb_contrato_detalhamento", schema = "public")
@Getter
@Setter
public class ContratoDetalhamento {

    @Id
    @SequenceGenerator(name = "sq_contrato_detalhamento", sequenceName = "sq_contrato_detalhamento", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_contrato_detalhamento", strategy = GenerationType.SEQUENCE)
    @Column(name = "cd_con_det")
    private Long id;

    @Column(name = "con_det_id_agr")
    private Long conDetIdAgr;

    @Column(name = "con_det_con_cd")
    private Integer conDetConCd;

    @Column(name = "con_det_definicao_bens_reserviveis")
    private Boolean conDetDefinicaoBensReserviveis;

    @Column(name = "con_det_definicao_metodologia")
    private Boolean conDetDefinicaoMetodologia;

    @Column(name = "con_det_definicao_bens_reserviveis_exemplo")
    private String conDetDefinicaoBensReserviveisExemplo;

    @Column(name = "con_det_possui_exemplos")
    private Boolean conDetPossuiExemplos;

    @Column(name = "con_det_exemplos")
    private String conDetExemplos;

    @Column(name = "con_det_metodologia")
    private String conDetMetodologia;

    @Column(name = "con_det_definicao_bens_reserviveis_justo")
    private Boolean conDetDefinicaoBensReserviveisJusto;

    @Column(name = "con_det_metodologia_valor_justo")
    private Boolean conDetMetodologiaValorJusto;

    @Column(name = "con_det_artigo_contratual_bens_reversiveis")
    private String conDetArtigoContratualBensReversiveis;

    @Column(name = "con_det_exemplos_contratual_bens_reversiveis")
    private String conDetExemplosContratualBensReversiveis;

    @Column(name = "con_det_data_inclusao")
    private LocalDateTime conDetDataInclusao;

    @Column(name = "con_excluido")
    private Boolean conExcluido;

    @ManyToOne(optional = true)
    @JoinColumn(name = "con_prod_cd")
    private Protocolo protocolo;

    @Column(name = "con_ano_referencia")
    private Long anoColetaReferencia;





}


// Fim do arquivo: ContratoDetalhamento.java

// Arquivo: ContratoMatrizRisco.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoMatrizRisco.java

package br.gov.ana.sarsb.model.entity;

import br.gov.ana.sarsb.model.converter.AcoesDocContratoMatrizEnumConverter;
import br.gov.ana.sarsb.model.enums.AcoesDocContratoMatrizEnum;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "sabtb_contratomatrizrisco", schema = "public")
@Getter
@Setter
public class ContratoMatrizRisco extends GenericEntity<Long> {

    private static final long serialVersionUID = 4651798163162619917L;

    @Id
    @SequenceGenerator(name = "sq_contratomatrizrisco", sequenceName = "sq_contratomatrizrisco", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_contratomatrizrisco", strategy = GenerationType.SEQUENCE)
    @Column(name = "ma_cd")
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ma_prt_cd")
    private Prestador prestador;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ma_agr_cd")
    private AgenciaReguladora agenciaReguladora;

    @Column(name = "ma_ano_referencia")
    private Long anoReferencia;

    @Column(name = "ma_tipo_prestacao")
    private String tipoPrestacao;

    @Column(name = "ma_identificacao_contrato")
    private String identificacaoContrato;

    @Column(name = "ma_codigo_interno")
    private String codigoInterno;

    @Column(name = "ma_ic_servico_ambos")
    private Boolean isServicoAmbos;

    @Column(name = "ma_ic_servico_esgotamento")
    private Boolean isServicoEsgotamento;

    @Column(name = "ma_ic_servico_abastecimento")
    private Boolean isServicoAbastecimento;

    @Column(name = "ma_ic_producao_agua_potavel")
    private Boolean isProducaoAguaPotavel;

    @Column(name = "ma_ic_distribuicao_agua_potavel")
    private Boolean isDistribuicaoAguaPotavel;

    @Column(name = "ma_ic_coleta_esgoto")
    private Boolean isColetaEsgoto;

    @Column(name = "ma_ic_tratamento_esgoto")
    private Boolean isTratamentoEsgoto;

    @Column(name = "ma_ic_disposicao_final_residuos")
    private Boolean isDisposicaoFinalResiduos;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "ma_dt_assinatura_contrato")
    private Date dataAssinatura;

    @Column(name = "ma_prazo_vigencia")
    private Long prazoVigencia;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "ma_dt_delegacao")
    private Date dataDelegacao;

    @Column(name = "ma_contrato_possuia_riscos")
    private Boolean isPossuiReparticao;

    @Column(name = "ma_titular_alterou_matriz")
    private Boolean isPossuiAlteracao;

    @Column(name = "ma_titular_acrescentou_riscos")
    private Boolean isPossuiNovosRiscos;

    @Column(name = "ma_titular_observou_procedimentos")
    private Boolean isPossuiObsersavoes;

    @Column(name = "ma_aceite")
    private Boolean isAceite;

    @Column(name = "conformidade_contrato")
    private String conformidade;

    @Column(name = "ma_contrato_programa_seguindo_nr")
    private Boolean isContratoProgramaSeguindoNR;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "ma_dt_ciclo_tarifario")
    private Date anoCicloTarifario;

    @Column(name = "ma_acao")
    @Convert(converter = AcoesDocContratoMatrizEnumConverter.class)
    private AcoesDocContratoMatrizEnum acao;


}

// Fim do arquivo: ContratoMatrizRisco.java

// Arquivo: ContratoMunicipio.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoMunicipio.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_contratomunicipio", schema = "public")
@Getter
@Setter
public class ContratoMunicipio extends GenericEntity<Long> {

	private static final long serialVersionUID = 3758090161233576077L;

	@Id
	@SequenceGenerator(name = "sq_contratomunicipio", sequenceName = "sq_contratomunicipio", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_contratomunicipio", strategy = GenerationType.SEQUENCE)
	@Column(name = "ctm_cd")
	private Long id;
	
	@Column(name = "ctm_nu_ibgemunicipio", length = 7, nullable = false)
	private String codigoIbge;
	
	@Column(name = "ctm_ic_servicoagua", nullable = false)
	private Boolean servicoAgua;
	
	@Column(name = "ctm_ic_servicoesgoto", nullable = false)
	private Boolean servicoEsgoto;
	
	@ManyToOne
	@JoinColumn(name = "ctm_cpc_cd", referencedColumnName = "cpc_cd", nullable = false)
	private ContratoProtolocoCef contratoProtolocoCef;	
	
}

// Fim do arquivo: ContratoMunicipio.java

// Arquivo: ContratoProtolocoCef.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoProtolocoCef.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_contratosprotocolocef", schema = "public")
@Getter
@Setter
public class ContratoProtolocoCef extends GenericEntity<Long> {

	private static final long serialVersionUID = -3116152606314847352L;

	@Id
	@SequenceGenerator(name = "sq_contratosprotocolocef", sequenceName = "sq_contratosprotocolocef", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_contratosprotocolocef", strategy = GenerationType.SEQUENCE)
	@Column(name = "cpc_cd")
	private Long id;
	
	@Column(name = "cpc_ds_arquivominutacontrato", length = 350, nullable = false)
	private String arquivoMinutaContrato;
	
	@Column(name = "cpc_ds_arquivodeclaracaoanuencia", length = 350, nullable = false)
	private String arquivoDeclaracaoAnuencia;
	
	@Column(name = "cpc_ds_arquivocontrato", length = 350, nullable = false)
	private String arquivoContrato;
	
	@ManyToOne
	@JoinColumn(name = "cpc_pcf_cd", referencedColumnName = "pcf_cd", nullable = false)
	private ProtocoloCefPrestador protocoloCefPrestador;
	
//    @OneToMany(mappedBy="contratoProtolocoCef", fetch = FetchType.EAGER)
//	private Set<ContratoMunicipio> contratosMunicipio;
	
}

// Fim do arquivo: ContratoProtolocoCef.java

// Arquivo: ContratoServico.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoServico.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "sabtb_contrato_servicos", schema = "public")
@Getter
@Setter
public class ContratoServico extends GenericEntity<Long> {
    private static final long serialVersionUID = 6370936868444194278L;

    @Id
    @SequenceGenerator(name = "sq_contrato_servicos", sequenceName = "sq_contrato_servicos", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_contrato_servicos", strategy = GenerationType.SEQUENCE)
    @Column(name = "servico_cd")
    private Long id;

    @Column(name = "servico_nome")
    private String nome;
}


// Fim do arquivo: ContratoServico.java

// Arquivo: ContratoServicoAtividade.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoServicoAtividade.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "sabtb_contrato_servicos_atividades", schema = "public")
@Getter
@Setter
public class ContratoServicoAtividade extends GenericEntity<Long> {

    private static final long serialVersionUID = -5161790161205858609L;

    @Id
    @SequenceGenerator(name = "sq_contrato_servicos_atividades", sequenceName = "sq_contrato_servicos_atividades", allocationSize = 1)
    @GeneratedValue(generator = "sq_contrato_servicos_atividades", strategy = GenerationType.SEQUENCE)
    @Column(name = "atividade_cd")
    private Long id;

    @Column(name = "atividade_nome")
    private String nome;

    @ManyToOne
    @JoinColumn(name = "atividade_servico_cd", referencedColumnName = "servico_cd")
    private ContratoServico contratoServico;

}


// Fim do arquivo: ContratoServicoAtividade.java

// Arquivo: ContratoServicoAtividadeSelecionada.java
// Caminho: \br\gov\ana\sarsb\model\entity\ContratoServicoAtividadeSelecionada.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "sabtb_contrato_servicos_atividades_selecionadas", schema = "public")
@Getter
@Setter
public class ContratoServicoAtividadeSelecionada extends GenericEntity<Long> {

    private static final long serialVersionUID = 8354381376307512686L;

    @Id
    @SequenceGenerator(name = "sq_contrato_servicos_atividades_selecionadas", sequenceName = "sq_contrato_servicos_atividades_selecionadas", allocationSize = 1)
    @GeneratedValue(generator = "sq_contrato_servicos_atividades_selecionadas", strategy = GenerationType.SEQUENCE)
    @Column(name = "selecao_cd")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "selecao_con_cd", referencedColumnName = "con_cd")
    private Contrato contrato;

    @ManyToOne
    @JoinColumn(name = "selecao_atividade_cd", referencedColumnName = "atividade_cd")
    private ContratoServicoAtividade contratoServicoAtividade;


    @ManyToOne
    @JoinColumn(name = "selecao_servreg_cd", referencedColumnName = "servreg_cd")
    private TipoServicoReguladoDocumento tipoServicoReguladoDocumento;
}

// Fim do arquivo: ContratoServicoAtividadeSelecionada.java

// Arquivo: DocumentoCondicoesGerais.java
// Caminho: \br\gov\ana\sarsb\model\entity\DocumentoCondicoesGerais.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.time.LocalDateTime;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_documentocondicoes", schema = "public")
@Getter
@Setter
public class DocumentoCondicoesGerais extends GenericEntity<Long> {

    @ManyToOne
    @JoinColumn(name = "doc_con_cd", referencedColumnName = "con_cd")
    ConformidadeEntidade conformidadeEntidade;
    @Id
    @SequenceGenerator(name = "sq_documentocondicoes", sequenceName = "sq_documentocondicoes", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_documentocondicoes", strategy = GenerationType.SEQUENCE)
    @Column(name = "doc_cd")
    private Long id;
    @Column(name = "doc_ds_arquivo")
    private String descricao;
    @Column(name = "doc_dt_inclusao")
    private LocalDateTime dtInclusao;
    @Column(name = "doc_nm_arquivo")
    private String nome;
    @Column(name = "doc_link_oficial")
    private String linkOficial;

}


// Fim do arquivo: DocumentoCondicoesGerais.java

// Arquivo: DocumentoIndicadorMeta.java
// Caminho: \br\gov\ana\sarsb\model\entity\DocumentoIndicadorMeta.java

package br.gov.ana.sarsb.model.entity;

import br.gov.ana.sarsb.model.enums.TipoEnvio;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import java.time.LocalDateTime;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_documentoindicadoresmetas", schema = "public")
@Getter
@Setter
public class DocumentoIndicadorMeta extends GenericEntity<Long> {

    private static final long serialVersionUID = 2934735328562658968L;

    @Id
    @SequenceGenerator(name = "sq_documentoindicadoresmetas", sequenceName = "sq_documentoindicadoresmetas", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_documentoindicadoresmetas", strategy = GenerationType.SEQUENCE)
    @Column(name = "docin_cd")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "docin_arg_cd", referencedColumnName = "agr_cd")
    private AgenciaReguladora agenciaReguladora;

    @Column(name = "docin_ds_arquivo")
    private String descricaoArquivo;

    @Column(name = "docin_link_oficial")
    private String linkOficial;

    @Enumerated(EnumType.STRING)
    @Column(name = "docin_tp_envio")
    private TipoEnvio tipoEnvio;

    @Column(name = "docin_dt_inclusao")
    private LocalDateTime dataInclusao;

    @Column(name = "docin_acao_nova_lista")
    private Boolean acaoNovaLista;

    @Column(name = "docin_acao_retificacao_lista")
    private Boolean acaoRetificacaoLista;

    @Column(name = "docin_acao_novo_ato")
    private Boolean acaoNovoAto;

    @Column(name = "docin_acao_retificacao_ato")
    private Boolean acaoRetificacaoAto;

    @Column(name = "docin_acao_novo_relatorio")
    private Boolean acaoNovoRelatorio;

    @Column(name = "docin_acao_retificacao_relatorio")
    private Boolean acaoRetificacaoRelatorio;

    @Column(name = "docin_aceite", nullable = false)
    private Boolean aceite;

    @Transient
    private Long numeroPergunta;

}

// Fim do arquivo: DocumentoIndicadorMeta.java

// Arquivo: DocumentoMatrizRisco.java
// Caminho: \br\gov\ana\sarsb\model\entity\DocumentoMatrizRisco.java

package br.gov.ana.sarsb.model.entity;

import br.gov.ana.sarsb.model.converter.AcoesDocContratoMatrizEnumConverter;
import br.gov.ana.sarsb.model.enums.AcoesDocContratoMatrizEnum;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.util.Date;

@Entity
@Table(name = "sabtb_documentomatrizrisco", schema = "public")
@Getter
@Setter
public class DocumentoMatrizRisco extends GenericEntity<Long> {

    private static final long serialVersionUID = -2572216103766095783L;

    @Id
    @SequenceGenerator(name = "sq_documentomatrizrisco", sequenceName = "sq_documentomatrizrisco", allocationSize = 1)
    @GeneratedValue(generator = "sq_documentomatrizrisco", strategy = GenerationType.SEQUENCE)
    @Column(name = "docma_cd")
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "docma_matr_cd")
    private ContratoMatrizRisco contratoMatrizRisco;

    @Column(name = "docma_ds_arquivo")
    private String arquivo;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "docma_dt_inclusao")
    private Date dataInclusao;

    @Column(name = "docma_acao")
    @Convert(converter = AcoesDocContratoMatrizEnumConverter.class)
    private AcoesDocContratoMatrizEnum acao;

    @Column(name = "docma_link_oficial")
    private String linkOficial;

}

// Fim do arquivo: DocumentoMatrizRisco.java

// Arquivo: DocumentoNormativoEri.java
// Caminho: \br\gov\ana\sarsb\model\entity\DocumentoNormativoEri.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_documentoatonormativoeri", schema = "public")
@Getter
@Setter
public class DocumentoNormativoEri {

    @Id
    @SequenceGenerator(name = "sq_documentoatonormativoeri", sequenceName = "sq_documentoatonormativoeri", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_documentoatonormativoeri", strategy = GenerationType.SEQUENCE)
    @Column(name = "docato_cd")
    private Long id;

    @Column(name = "docato_ds_arquivo", nullable = false)
    private String arquivo;

    @Column(name = "docato_dt_inclusao", nullable = false)
    private Date dataInclusao;

    @Column(name = "docato_link_oficial")
    private String linkOficial;

    @Column(name = "docato_acao", nullable = false)
    private Long acao;

    @Column(name = "docato_aceite")
    private Boolean aceite;

    @ManyToOne
    @JoinColumn(name = "docato_ato_cd", referencedColumnName = "ato_cd")
    AtoNormativoEri atoNormativoEri;

}

// Fim do arquivo: DocumentoNormativoEri.java

// Arquivo: DocumentoPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\DocumentoPrestador.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_documentoprestador", schema = "public")
@Getter
@Setter
public class DocumentoPrestador extends GenericEntity<Long> {

	private static final long serialVersionUID = -7679862062724096414L;

	@Id
	@SequenceGenerator(name = "sq_documentoprestador", sequenceName = "sq_documentoprestador", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_documentoprestador", strategy = GenerationType.SEQUENCE)
	@Column(name = "dcp_cd")
	private Long id;

	@Column(name = "dcp_ds_arquivo", length = 350, nullable = false)
	private String arquivo;
	
	@ManyToOne
	@JoinColumn(name = "dcp_tdp_cd", referencedColumnName = "tdp_cd", nullable = false)
	private TipoDocumentoPrestador tipoDocumentoPrestador;	
	
	@ManyToOne
	@JoinColumn(name = "dcp_fcp_cd", referencedColumnName = "fcp_cd", nullable = false)
	private FormularioCefPrestador formularioCefPrestador;

}

// Fim do arquivo: DocumentoPrestador.java

// Arquivo: FinalizacaoPreenchimento.java
// Caminho: \br\gov\ana\sarsb\model\entity\FinalizacaoPreenchimento.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import java.util.Date;

@Entity
@Table(name = "sabtb_finalizacao_preenchimento", schema = "public")
@Getter
@Setter
public class FinalizacaoPreenchimento extends GenericEntity<Long> {

    private static final long serialVersionUID = -1599012352111931616L;

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "finalizacao_preenchimento_seq")
    @SequenceGenerator(name = "finalizacao_preenchimento_seq", sequenceName = "finalizacao_preenchimento_seq", allocationSize = 1)
    private Long id;

    @Column(name = "ano_referencia")
    private Long anoReferencia;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "identificador_eri")
    private AgenciaReguladora agenciaReguladora;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "identificador_ato_normativo")
    private AtoNormativoEri atoNormativoEri;

    @Column(name = "conformidade_analise_ato_normativo_eri")
    private String conformidadeAtoNormativoEri;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "data_finalizacao")
    private Date dataFinalizacao;

    @Column(name = "preenchimento_finalizado")
    private Boolean preenchimentoFinalizado;

}



// Fim do arquivo: FinalizacaoPreenchimento.java

// Arquivo: FinalizacaoPreenchimentoContrato.java
// Caminho: \br\gov\ana\sarsb\model\entity\FinalizacaoPreenchimentoContrato.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import java.io.Serializable;

@Entity
@Table(name = "sabtb_finalizacao_preenchimento_contrato", schema = "public")
@IdClass(FinalizacaoPreenchimentoContratoId.class)
@Getter
@Setter
public class FinalizacaoPreenchimentoContrato implements Serializable {

    private static final long serialVersionUID = -1700030417988091136L;

    @Id
    @Column(name = "identificador_finalizacao_preenchimento", nullable = false)
    private Long idFinalizacaoPreenchimento;

    @Id
    @Column(name = "identificador_contrato", nullable = false)
    private Long idContrato;

    @Column(name = "conformidade_contrato")
    private String conformidadeContrato;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "identificador_finalizacao_preenchimento", insertable = false, updatable = false)
    private FinalizacaoPreenchimento finalizacaoPreenchimento;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "identificador_contrato", insertable = false, updatable = false)
    private ContratoMatrizRisco contratoMatrizRisco;


}

// Fim do arquivo: FinalizacaoPreenchimentoContrato.java

// Arquivo: FinalizacaoPreenchimentoContratoId.java
// Caminho: \br\gov\ana\sarsb\model\entity\FinalizacaoPreenchimentoContratoId.java

package br.gov.ana.sarsb.model.entity;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

import java.io.Serializable;

@Getter
@Setter
@EqualsAndHashCode
public class FinalizacaoPreenchimentoContratoId implements Serializable {
    private static final long serialVersionUID = 7651558019492795670L;

    private Long idFinalizacaoPreenchimento;
    private Long idContrato;

    public FinalizacaoPreenchimentoContratoId() {
    }

    public FinalizacaoPreenchimentoContratoId(Long idFinalizacaoPreenchimento, Long idContrato) {
        this.idFinalizacaoPreenchimento = idFinalizacaoPreenchimento;
        this.idContrato = idContrato;
    }
}

// Fim do arquivo: FinalizacaoPreenchimentoContratoId.java

// Arquivo: FinalizacaoRegulacaoTarifaria.java
// Caminho: \br\gov\ana\sarsb\model\entity\FinalizacaoRegulacaoTarifaria.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "sabtb_finalizacao_regulacaotarifaria", schema = "public")
@Getter
@Setter
public class FinalizacaoRegulacaoTarifaria extends GenericEntity<Long> {

    private static final long serialVersionUID = -2180582366890310423L;

    @Id
    @SequenceGenerator(name = "sq_finalizacao_regulacaotarifaria", sequenceName = "sq_finalizacao_regulacaotarifaria", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_finalizacao_regulacaotarifaria", strategy = GenerationType.SEQUENCE)
    @Column(name = "fin_cd")
    private Long id;

    @Column(name = "fin_aa_coleta", nullable = false)
    private Long anoColeta;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fin_agr_cd")
    private AgenciaReguladora agenciaReguladora;

    @Column(name = "fin_dt_finalizacao", nullable = false)
    private LocalDateTime dataFinalizacao;

}

// Fim do arquivo: FinalizacaoRegulacaoTarifaria.java

// Arquivo: FinalizacaoRequisitoComplementar.java
// Caminho: \br\gov\ana\sarsb\model\entity\FinalizacaoRequisitoComplementar.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.time.LocalDateTime;

@Entity
@Table(name = "sabtb_finalizacao_requisito_complementar", schema = "public")
@Getter
@Setter
public class FinalizacaoRequisitoComplementar extends GenericEntity<Long> {

    @Id
    @SequenceGenerator(name = "sq_finalizacao_requisito_complementar",
            sequenceName = "sq_finalizacao_requisito_complementar", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_finalizacao_requisito_complementar", strategy = GenerationType.SEQUENCE)
    @Column(name = "fin_cd")
    private Long id;

    @Column(name = "fin_aa_coleta", nullable = false)
    private Long anoColeta;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "fin_agr_cd")
    private AgenciaReguladora agenciaReguladora;

    @Column(name = "fin_dt_finalizacao", nullable = false)
    private LocalDateTime dataFinalizacao;

}

// Fim do arquivo: FinalizacaoRequisitoComplementar.java

// Arquivo: FormularioAditivoAgencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\FormularioAditivoAgencia.java

package br.gov.ana.sarsb.model.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_formularioaditivo", schema = "public")
@Getter
@Setter
public class FormularioAditivoAgencia extends GenericEntity<Long> {

	private static final long serialVersionUID = -1398091074164878756L;
	
	public FormularioAditivoAgencia(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_formularioaditivo", sequenceName = "sq_formularioaditivo", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_formularioaditivo", strategy = GenerationType.SEQUENCE)
	@Column(name = "fao_cd")
	private Long id;

	@Column(name = "fao_nu_recibo", nullable = true)
	private Long numeroRecibo;
	
	@ManyToOne
	@JoinColumn(name = "fao_agr_cd", referencedColumnName = "agr_cd", nullable = false)
	private AgenciaReguladora agenciaReguladora;	
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fao_dt_envio", nullable = true)
	private Date dataEnvio;

}

// Fim do arquivo: FormularioAditivoAgencia.java

// Arquivo: FormularioAditivoSmsru.java
// Caminho: \br\gov\ana\sarsb\model\entity\FormularioAditivoSmsru.java

package br.gov.ana.sarsb.model.entity;

import lombok.*;

import javax.persistence.*;
import java.util.Date;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_formulariocefsasb", schema = "public")
@Getter
@Setter
public class FormularioAditivoSmsru extends GenericEntity<Long> {

	private static final long serialVersionUID = -1398091074164878756L;

	public FormularioAditivoSmsru(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_formulariocefsasb", sequenceName = "sq_formulariocefsasb", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_formulariocefsasb", strategy = GenerationType.SEQUENCE)
	@Column(name = "fcs_cd")
	private Long id;

	@Column(name = "fcs_nu_recibo", nullable = true)
	private Long numeroRecibo;
	
	@ManyToOne
	@JoinColumn(name = "fcs_prf_cd", referencedColumnName = "pft_cd", nullable = false)
	private Prefeitura prefeitura;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fcs_dt_envio", nullable = true)
	private Date dataEnvio;

}

// Fim do arquivo: FormularioAditivoSmsru.java

// Arquivo: FormularioCefAgencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\FormularioCefAgencia.java

package br.gov.ana.sarsb.model.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_formulariocefagencia", schema = "public")
@Getter
@Setter
public class FormularioCefAgencia extends GenericEntity<Long> {

	private static final long serialVersionUID = -1398091074164878756L;
	
	public FormularioCefAgencia(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_formulariocefagencia", sequenceName = "sq_formulariocefagencia", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_formulariocefagencia", strategy = GenerationType.SEQUENCE)
	@Column(name = "fca_cd")
	private Long id;

	@Column(name = "fca_nu_recibo", nullable = true)
	private Long numeroRecibo;
	
	@ManyToOne
	@JoinColumn(name = "fca_agr_cd", referencedColumnName = "agr_cd", nullable = false)
	private AgenciaReguladora agenciaReguladora;	
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fca_dt_envio", nullable = true)
	private Date dataEnvio;
	
//    @ManyToMany(mappedBy="formularioCefAgencia")
//	private List<ProcessoCefAgencia> listaProcessos;

}

// Fim do arquivo: FormularioCefAgencia.java

// Arquivo: FormularioCefPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\FormularioCefPrestador.java

package br.gov.ana.sarsb.model.entity;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_formulariocefprestador", schema = "public")
@Getter
@Setter
public class FormularioCefPrestador extends GenericEntity<Long> {

	private static final long serialVersionUID = 7956228543036473217L;

	@Id
	@SequenceGenerator(name = "sq_formulariocefprestador", sequenceName = "sq_formulariocefprestador", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_formulariocefprestador", strategy = GenerationType.SEQUENCE)
	@Column(name = "fcp_cd")
	private Long id;

	@Column(name = "fcp_nu_recibo", nullable = false)
	private String numeroRecibo;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fcp_dt_envio", nullable = true)
	private Date dataEnvio;
	
	@ManyToOne
	@JoinColumn(name = "fcp_prt_cd", referencedColumnName = "prt_cd", nullable = false)
	private Prestador prestador;	
    
    @OneToMany(mappedBy="formularioCefPrestador", fetch = FetchType.EAGER)
	private List<DocumentoPrestador> listaDocumentos;

}

// Fim do arquivo: FormularioCefPrestador.java

// Arquivo: GenericEntity.java
// Caminho: \br\gov\ana\sarsb\model\entity\GenericEntity.java

package br.gov.ana.sarsb.model.entity;

import java.io.Serializable;

public abstract class GenericEntity<K extends Serializable> implements Serializable {

    private static final long serialVersionUID = -4833492543335464195L;

    public abstract K getId();

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
        if (!getClass().isAssignableFrom(obj.getClass())) {
            return false;
        }
        GenericEntity<K> other = (GenericEntity<K>)obj;
        return getId().equals(other.getId());
    }

    @Override
    public int hashCode() {
        final int prime = getClass().getName().hashCode();
        return prime + (getId() == null ? super.hashCode() : getId().hashCode());
    }

}


// Fim do arquivo: GenericEntity.java

// Arquivo: InstrumentoCobranca.java
// Caminho: \br\gov\ana\sarsb\model\entity\InstrumentoCobranca.java

package br.gov.ana.sarsb.model.entity;

import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_instrumentocobranca", schema = "public")
@Getter
@Setter
public class InstrumentoCobranca extends GenericEntity<Long> {

	private static final long serialVersionUID = -5957630275804525704L;

	@Id
	@SequenceGenerator(name = "sq_instrumentocobranca", sequenceName = "sq_instrumentocobranca", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_instrumentocobranca", strategy = GenerationType.SEQUENCE)
	@Column(name = "isc_cd")
	private Long id;

	@Column(name = "isc_ic_implementado", nullable = false)
	private Boolean implementado;

	@Column(name = "isc_ic_unicoetapassmrsu", nullable = false)
	private Boolean unicaEtapaSmrsu;

	@Column(name = "isc_ic_regimeadotado", nullable = false)
	private Boolean regimeAdotado;

	@Column(name = "isc_ds_numeroinstrumento", length = 50, nullable = false)
	private String numeroInstrumento;

	@Column(name = "isc_ds_arquivo", length = 350, nullable = true)
	private String arquivo;

	@Column(name = "isc_nu_recibo", nullable = true)
	private Long numeroRecibo;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "isc_dt_cadastro", nullable = true)
	private Date dataCadastro;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "isc_dt_atualizacao", nullable = false)
	private Date dataAtualizacao;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "isc_dt_submissaoinstlegal", nullable = true)
	private Date dataSubmissaoInstrumentoLegal;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "isc_dt_previsaoinicobranca", nullable = false)
	private Date dataPrevisaoInicioCobranca;
	
	@Column(name = "isc_ds_arquivocronograma", nullable = true)
	private String arquivoCronograma;
	
	@Column(name = "isc_nu_recibo_retificado", nullable = true)
	private Long numeroReciboRetificado;

	@Column(name = "isc_tes_cd", nullable = false)
	private Long etapaServico;





	@Column(name = "isc_valcob_cd", nullable = false)
	private Long valoresCobrados;

	@Column(name = "isc_cobsoc_cd", nullable = false)
	private Long cobrancaSocial;

	@Column(name = "isc_parcob_outros", nullable = false)
	private String outrosParamentroCobranca;

	@Column(name = "isc_cat_usu_outros", nullable = false)
	private String outrosCategoriaUsuario;

	@Column(name = "isc_valbase_outros", nullable = false)
	private String outrosValoresCobrados;

	@Column(name = "isc_cobsocial_outros", nullable = false)
	private String outrosCobrancaSocial;


	@Column(name = "isc_ds_param_cob", nullable = false)
	private String paramentroCobranca;


	@Column(name = "isc_tes_ds", nullable = false)
	private String atividadeServico;


	@ManyToOne
	@JoinColumn(name = "isc_pft_cd", referencedColumnName = "pft_cd")
	private Prefeitura prefeitura;
	
	@ManyToOne
	@JoinColumn(name = "isc_til_cd", referencedColumnName = "til_cd")
	private TipoInstrumentoLegal tipoInstrumentoLegal;
	
	@ManyToOne
	@JoinColumn(name = "isc_tda_cd", referencedColumnName = "tda_cd")
	private TipoDocumentoArrecadacao tipoDocumentoArrecadacao;
	
	@OneToMany(mappedBy="instrumentoCobranca", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @OrderBy("id")
	private List<InstrumentoCobrancaTemEtapas> instrumentoCobrancaTemEtapas;
	
	@Transient
	private Boolean arquivoModificado;
	
	@Transient
	private Boolean arquivoCronogramaModificado;




	public void setMunicipio(Boolean aFalse) {
	}
}

// Fim do arquivo: InstrumentoCobranca.java

// Arquivo: InstrumentoCobrancaMunicipio.java
// Caminho: \br\gov\ana\sarsb\model\entity\InstrumentoCobrancaMunicipio.java

package br.gov.ana.sarsb.model.entity;

import br.gov.ana.sarsb.model.dto.municipio.PrefeituraDTO;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "sabtb_instrumentocobrancamunicipio", schema = "public")
@Getter
@Setter
public class InstrumentoCobrancaMunicipio extends GenericEntity<Long> {

	private static final long serialVersionUID = -5957630275804525704L;

	@Id
	@SequenceGenerator(name = "sq_instrumentocobranca", sequenceName = "sq_instrumentocobranca", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_instrumentocobranca", strategy = GenerationType.SEQUENCE)
	@Column(name = "iscm_cd")
	private Long id;

	@Column(name = "iscm_ic_unicoetapassmrsu", nullable = false)
	private Boolean implementado;

	@Column(name = "iscm_ic_unico_prestador", nullable = false)
	private Boolean unicoPrestador;

	@Column(name = "iscm_tes_cd", nullable = false)
	private String etapaServico;

	@Column(name = "iscm_regcob_cd", nullable = false)
	private Long regimeCobranca;


	@Column(name = "iscm_til_cd", nullable = false)
	private Long instrumentoLegal;

	@Column(name = "iscm_tda_cd", nullable = false)
	private Long documentoArrecadacao;



	@Column(name = "iscm_ds_arquivo", length = 350, nullable = true)
	private String arquivo;

	@Column(name = "iscm_parcob_cd", nullable = false)
	private String parametroCobranca;

	@Column(name = "iscm_catg_cd", nullable = false)
	private String categoriasUsuario;

	@Column(name = "iscm_valcob_cd", nullable = false)
	private Long valorCobradoBase;

	@Column(name = "iscm_cobsoc_cd", nullable = false)
	private Long cobrancaSocial;

	@Column(name = "iscm_tcp_cd", nullable = false)
	private Long naturezaPrestador;

	@Column(name = "iscm_tsp_cd", nullable = false)
	private Long subcategoriaNaturezaPrestador;


	@Column(name = "iscm_prt_cd", nullable = false)
	private Long prestadorMunicipio;

	@Column(name = "iscm_nu_recibo", nullable = false)
	private Long numeroRecibo;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "iscm_dt_cadastro", nullable = false)
	private Date dataCadastro;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "iscm_dt_atualizacao", nullable = false)
	private Date dataAtualizacao;

	@Column(name = "iscm_nu_recibo_retificado", nullable = true)
	private Long numeroReciboRetificado;

	@Column(name = "iscm_aceite_lgpd", nullable = false)
	private Boolean aceiteLgpd;


	@Column(name = "iscm_ic_rascunho", nullable = false)
	private Boolean rascunho;

	@Column(name = "iscm_isc_pft_cd", nullable = true)
	private Long codigoPrefeitura;


	@Column(name = "iscm_cad_cd", nullable = true)
	private Long codigoCadastrante;


	@Column(name = "iscm_ds_outros_paracob", nullable = false)
	private String outrosParamentroCobranca;

	@Column(name = "iscm_ds_outros_catusu", nullable = false)
	private String outrosParamentroCobrancaUsuario;

	@Column(name = "iscm_ds_outros_cobsocial", nullable = false)
	private String outrosParamentroCobrancaSocial;

	@Column(name = "iscm_ds_outros_valcob", nullable = false)
	private String outrosValorCobrado;


	@Column(name = "iscm_sus_cd")
	private Long cdSus;

	@Column(name = "iscm_ano_exercicio")
	private Integer anoExercicio;

	@Column(name = "iscm_rec_requerida")
	private BigDecimal recRequerida;

	@Column(name = "iscm_val_arrecadado")
	private BigDecimal valArrecadado;

	@Column(name = "iscm_val_subs_tarifario")
	private BigDecimal valSubsTarifario;

	@Column(name = "iscm_val_arrecadado_alt")
	private BigDecimal subValArrecadadoAlt;

	@Column(name = "iscm_ver_susten")
	private Boolean susVerSusten;

	@Column(name = "iscm_upload_doc_sus ")
	private String susUploadDocSus;

	@Column(name = "iscm_conf_verif  ")
	private Boolean susConfVerif;

	@Column(name = "iscm_aceite  ")
	private Boolean susAceite;

}

// Fim do arquivo: InstrumentoCobrancaMunicipio.java

// Arquivo: InstrumentoCobrancaTemEtapas.java
// Caminho: \br\gov\ana\sarsb\model\entity\InstrumentoCobrancaTemEtapas.java

package br.gov.ana.sarsb.model.entity;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

@EqualsAndHashCode
@Entity
@Table(name = "sabta_instrcobrtemetapas", schema = "public")
@Getter
@Setter
public class InstrumentoCobrancaTemEtapas implements Serializable {

	private static final long serialVersionUID = -3035721976874319329L;
	
	@Id
	@SequenceGenerator(name = "sq_instrcobrtemetapas", sequenceName = "sq_instrcobrtemetapas", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_instrcobrtemetapas", strategy = GenerationType.SEQUENCE)
	@Column(name = "ite_cd")
	private Long id;

	@ManyToOne
	@JoinColumn(name = "ite_isc_cd", referencedColumnName = "isc_cd")
	private InstrumentoCobranca instrumentoCobranca;
	
	@ManyToOne
	@JoinColumn(name = "ite_tes_cd", referencedColumnName = "tes_cd")
	private TipoEtapaServico tipoEtapaServico;

}

// Fim do arquivo: InstrumentoCobrancaTemEtapas.java

// Arquivo: JsonConverter.java
// Caminho: \br\gov\ana\sarsb\model\entity\JsonConverter.java

package br.gov.ana.sarsb.model.entity;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.persistence.AttributeConverter;
import javax.persistence.Converter;
import java.io.IOException;

@Converter(autoApply = true)  // autoApply=true para que o JPA aplique automaticamente este conversor.
public class JsonConverter implements AttributeConverter<JsonNode, String> {

    private final ObjectMapper objectMapper = new ObjectMapper(); // Usando ObjectMapper para serialização/deserialização

    @Override
    public String convertToDatabaseColumn(JsonNode attribute) {
        if (attribute == null) {
            return null;  // Caso o atributo seja null, retorna null
        }
        try {
            return objectMapper.writeValueAsString(attribute);  // Convertendo JsonNode para String
        } catch (IOException e) {
            throw new IllegalArgumentException("Erro ao converter JsonNode para String", e);
        }
    }

    @Override
    public JsonNode convertToEntityAttribute(String dbData) {
        if (dbData == null) {
            return null;  // Caso o valor no banco seja null, retorna null
        }
        try {
            return objectMapper.readTree(dbData);  // Convertendo String (JSON) para JsonNode
        } catch (IOException e) {
            throw new IllegalArgumentException("Erro ao converter String para JsonNode", e);
        }
    }
}


// Fim do arquivo: JsonConverter.java

// Arquivo: ManifestacaoTecnica.java
// Caminho: \br\gov\ana\sarsb\model\entity\ManifestacaoTecnica.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_manifestacaotecnica", schema = "public")
@Getter
@Setter
public class ManifestacaoTecnica extends GenericEntity<Long> {

	private static final long serialVersionUID = -9100509521425167034L;

	@Id
	@SequenceGenerator(name = "sq_manifestacaotecnica", sequenceName = "sq_manifestacaotecnica", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_manifestacaotecnica", strategy = GenerationType.SEQUENCE)
	@Column(name = "mat_cd")
	private Long id;

	@Column(name = "mat_ds_arquivo", nullable = false)
	private String arquivo;
	
	@ManyToOne
	@JoinColumn(name = "mat_pca_cd", referencedColumnName = "pca_cd", nullable = false)
	private ProcessoCefAgencia processoCefAgencia;

}

// Fim do arquivo: ManifestacaoTecnica.java

// Arquivo: MonitoramentoUniversalizacaoMunAgua.java
// Caminho: \br\gov\ana\sarsb\model\entity\MonitoramentoUniversalizacaoMunAgua.java

package br.gov.ana.sarsb.model.entity;
import javax.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_monitoramentouniversializacao_mun_agua", schema = "public")
@Getter
@Setter
public class MonitoramentoUniversalizacaoMunAgua {


    @Id
    @SequenceGenerator(name = "sq_mun_agua_cd", sequenceName = "sq_mun_agua_cd", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_mun_agua_cd", strategy = GenerationType.SEQUENCE)

    @Column(name = "mun_agua_cod")
    private Integer codigo;

        @Column(name = "aa_ref")
         private Integer munAaRef;

    @Column(name = "mun_ibge_cd")
    private Integer munIbgeCd;

    @Column(name = "mun_domred_agua_urb")
    private Integer munDomredAguaUrb;

    @Column(name = "mun_domred_agua_rur")
    private Integer munDomredAguaRur;

    @Column(name = "mun_dom_agua_urb")
    private Integer munDomAguaUrb;

    @Column(name = "mun_dom_agua_rur")
    private Integer munDomAguaRur;

    @Column(name = "mun_total_dom_agua")
    private Integer munTotalDomAgua;

    @Column(name = "mun_total_ecored_agua")
    private Integer munTotalEcoredAgua;

    @Column(name = "mun_total_eco_agua")
    private Integer munTotalEcoAgua;



    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}


// Fim do arquivo: MonitoramentoUniversalizacaoMunAgua.java

// Arquivo: MonitoramentoUniversalizacaoMunEsgoto.java
// Caminho: \br\gov\ana\sarsb\model\entity\MonitoramentoUniversalizacaoMunEsgoto.java

package br.gov.ana.sarsb.model.entity;
import javax.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_monitoramentouniversializacao_mun_esgoto", schema = "public")
@Getter
@Setter
public class MonitoramentoUniversalizacaoMunEsgoto {
    @Id
    @SequenceGenerator(name = "sq_mun_esg_cd", sequenceName = "sq_mun_esg_cd", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_mun_esg_cd", strategy = GenerationType.SEQUENCE)


    @Column(name = "mun_esgoto_cd")
    private Integer codigo;

    @Column(name = "aa_ref")
    private Integer munAaRef;

    @Column(name = "mun_ibge_cd")
    private Integer munIbgeCd;

    @Column(name = "mun_domred_urb")
    private Integer munDomredUrb;

    @Column(name = "mun_domred_rur")
    private Integer munDomredRur;

    @Column(name = "mun_dom_urb")
    private Integer munDomUrb;

    @Column(name = "mun_dom_rur")
    private Integer munDomRur;

    @Column(name = "mun_total_dom")
    private Integer munTotalDom;

    @Column(name = "mun_total_ecored")
    private Integer munTotalEcored;

    @Column(name = "mun_total_eco")
    private Integer munTotalEco;



    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}



// Fim do arquivo: MonitoramentoUniversalizacaoMunEsgoto.java

// Arquivo: MonitoramentoUniversalizacaoPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\MonitoramentoUniversalizacaoPrestador.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@IdClass(MonitoramentoUniversalizacaoPrestadorPK.class)
@Table(name = "sabtb_monitoramentouniversializacao_prt", schema = "public")
@Getter
@Setter
public class MonitoramentoUniversalizacaoPrestador {
    @Id
    @Column(name = "prt_aa_ref", nullable = false)
    private Integer prtAaRef;

    @Id
    @Column(name = "prt_cd", length = 14, nullable = false)
    private String prtCd;

    @Id
    @Column(name = "prt_mun_cd")
    private Long prtMunCd;

    @Column(name = "prt_serv")
    private String prtServ;

    @Column(name = "prt_nm")
    private String prtNm;

    @Column(name = "prt_dom_abg", nullable = false)
    private Integer prtDomAbg;

    @Column(name = "prt_pop_censo_abg", nullable = false)
    private Integer prtPopCensoAbg;

    @Column(name = "prt_sg")
    private String prtSg;

    @Column(name = "prt_ctr")
    private Boolean prtCtr;

    @Column(name = "prt_nat_jur")
    private String prtNatJur;

    @Column(name = "prt_abg")
    private Boolean prtAbg;

    @Column(name = "prt_preenchimento")
    private Integer prtPreenchimento;

    @Column(name = "prt_erros")
    private Integer prtErros;

    @Column(name = "prt_obj_erros")
    private String prtObjetoErros;

    @ManyToOne
    @JoinColumn(name = "prt_agr_cd", referencedColumnName = "agr_cd", nullable = false)
    private AgenciaReguladora agenciaReguladora;

    @ManyToOne
    @JoinColumn(name = "prt_mun_cd", referencedColumnName = "mun_cd", insertable = false, updatable = false)
    private MunicipioIBGE municipio;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

}

// Fim do arquivo: MonitoramentoUniversalizacaoPrestador.java

// Arquivo: MonitoramentoUniversalizacaoPrestadorPK.java
// Caminho: \br\gov\ana\sarsb\model\entity\MonitoramentoUniversalizacaoPrestadorPK.java

package br.gov.ana.sarsb.model.entity;

import java.io.Serializable;

public class MonitoramentoUniversalizacaoPrestadorPK implements Serializable {

    private Integer prtAaRef;

    private String prtCd;

    private Long prtMunCd;
}


// Fim do arquivo: MonitoramentoUniversalizacaoPrestadorPK.java

// Arquivo: MonitoramentoUniversalizacaoPrtAgua.java
// Caminho: \br\gov\ana\sarsb\model\entity\MonitoramentoUniversalizacaoPrtAgua.java

package br.gov.ana.sarsb.model.entity;
import javax.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_monitoramentouniversializacao_prt_agua", schema = "public")
@Getter
@Setter
public class MonitoramentoUniversalizacaoPrtAgua {

    @Id
    @SequenceGenerator(name = "sq_prt_agua_cd", sequenceName = "sq_prt_agua_cd", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_prt_agua_cd", strategy = GenerationType.SEQUENCE)
    @Column(name = "prt_agua_cd")
    private Integer prtAguaCd;

    @Column(name = "prt_aa_ref", length = 14, nullable = false)
    private Integer prtAaRef;

    @Column(name = "prt_cd", length = 14, nullable = false)
    private String prtCd;

    @Column(name = "prt_mun_cd", nullable = false)
    private Integer prtMunCd;

    @Column(name = "prt_ecored_urb")
    private Integer prtEcoredUrb;

    @Column(name = "prt_ecored_rur")
    private Integer prtEcoredRur;

    @Column(name = "prt_eco")
    private Integer prtEco;

    @Column(name = "prt_ecored_ina")
    private Integer prtEcoredIna;

    @Column(name = "prt_eco_ina")
    private Integer prtEcoIna;

    @Column(name = "prt_ecored_fac")
    private Integer prtEcoredFac;

    @Column(name = "prt_eco_fac")
    private Integer prtEcoFac;

    @Column(name = "prt_total_eco")
    private Integer prtTotalEco;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}


// Fim do arquivo: MonitoramentoUniversalizacaoPrtAgua.java

// Arquivo: MonitoramentoUniversalizacaoPrtEsgoto.java
// Caminho: \br\gov\ana\sarsb\model\entity\MonitoramentoUniversalizacaoPrtEsgoto.java

package br.gov.ana.sarsb.model.entity;
import javax.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_monitoramentouniversializacao_prt_esgoto", schema = "public")
@Getter
@Setter
public class MonitoramentoUniversalizacaoPrtEsgoto {
    @Id
    @SequenceGenerator(name = "sq_prt_esg_cd", sequenceName = "sq_prt_esg_cd", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_prt_esg_cd", strategy = GenerationType.SEQUENCE)
    @Column(name = "prt_esg_cd")
    private Integer prtEsgCd;

    @Column(name = "prt_aa_ref", length = 14, nullable = false)
    private Integer prtAaRef;

    @Column(name = "prt_cd", length = 14, nullable = false)
    private String prtCd;

    @Column(name = "prt_mun_cd", nullable = false)
    private Integer prtMunCd;

    @Column(name = "prt_ecored_urb")
    private Integer prtEcoredUrb;

    @Column(name = "prt_ecored_rur")
    private Integer prtEcoredRur;

    @Column(name = "prt_eco")
    private Integer prtEco;

    @Column(name = "prt_ecored_ina")
    private Integer prtEcoredIna;

    @Column(name = "prt_eco_ina")
    private Integer prtEcoIna;

    @Column(name = "prt_ecored_fac")
    private Integer prtEcoredFac;

    @Column(name = "prt_eco_fac")
    private Integer prtEcoFac;

    @Column(name = "prt_total_eco")
    private Integer prtTotalEco;


    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}


// Fim do arquivo: MonitoramentoUniversalizacaoPrtEsgoto.java

// Arquivo: MunicipioContrato.java
// Caminho: \br\gov\ana\sarsb\model\entity\MunicipioContrato.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Table(name = "sabtb_municipiocontrato", schema = "public")
@Getter
@Setter
public class MunicipioContrato {

    @Id
    @SequenceGenerator(name = "sq_municipiocontrato", sequenceName = "sq_municipiocontrato", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_municipiocontrato", strategy = GenerationType.SEQUENCE)
    @Column(name = "muni_cd")
    private Long id;

    @Column(name = "muni_uf", nullable = false)
    private String uf;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "muni_con_cd", referencedColumnName = "con_cd")
    Contrato contrato;

    @ManyToOne
    @JoinColumn(name = "muni_cod_ibge", referencedColumnName = "mun_cd")
    MunicipioIBGE municipio;
}


// Fim do arquivo: MunicipioContrato.java

// Arquivo: MunicipioIBGE.java
// Caminho: \br\gov\ana\sarsb\model\entity\MunicipioIBGE.java

package br.gov.ana.sarsb.model.entity;


import lombok.*;

import javax.persistence.*;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "sabtb_municipio", schema = "public")
@Getter
@Setter
public class MunicipioIBGE {
    @Id
    @Column(name = "mun_cd", length = 7)
    private Long codigoIbge;

    @Column(name = "mun_nm",  nullable = false)
    private String nomeMunicipio;

    @Column(name = "mun_nmuf", nullable = false)
    private String nomeUf;

    @Column(name = "mun_lat")
    private Long latitude;

    @Column(name = "mun_lon")
    private Long longitude;

    @Column(name = "mun_uf", nullable = false)
    private String Uf;


}


// Fim do arquivo: MunicipioIBGE.java

// Arquivo: MunicipioServico.java
// Caminho: \br\gov\ana\sarsb\model\entity\MunicipioServico.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "sabtb_servicomunicipio", schema = "public")
@Getter
@Setter
public class MunicipioServico extends GenericEntity<Long> {

	private static final long serialVersionUID = 1731684903434971035L;

	@Id
	@SequenceGenerator(name = "sq_servicomunicipio", sequenceName = "sq_servicomunicipio", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_servicomunicipio", strategy = GenerationType.SEQUENCE)
	@Column(name = "smo_cd")
	private Long id;
	
	@Column(name = "smo_nu_ibgemunicipio", length = 7, nullable = false)
	private String codigoIbge;
	
	@Column(name = "smo_ic_servicoagua", nullable = false)
	private Boolean servicoAgua;
	
	@Column(name = "smo_ic_servicoesgoto", nullable = false)
	private Boolean servicoEsgoto;

	@Column(name = "smo_ic_municipiorestricao", nullable = false)
	private Boolean municipioRestricao;
	
	@ManyToOne
	@JoinColumn(name = "smo_pta_cd", referencedColumnName = "pta_cd", nullable = false)
	private ProtocoloAdicional protocoloAdicional;	
	
}

// Fim do arquivo: MunicipioServico.java

// Arquivo: MunicipiosUniversalizacao.java
// Caminho: \br\gov\ana\sarsb\model\entity\MunicipiosUniversalizacao.java

package br.gov.ana.sarsb.model.entity;
import javax.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@IdClass(MunicipiosUniversalizacaoPK.class)
@Table(name = "sabtb_municipiosuniversializacao", schema = "public")
@Getter
@Setter
public class MunicipiosUniversalizacao {
    @Id
    @Column(name = "aa_ref", nullable = false)
    private Integer aaRef;

    @Id
    @Column(name = "mun_ibge_cd", nullable = false)
    private Integer munIbgeCd;

    @Column(name = "mun_nm")
    private String munNm;

    @Column(name = "mun_uf", length = 2)
    private String munUf;

    @Column(name = "mun_pop_total")
    private Integer munPopTotal;

    @Column(name = "mun_dom_part_ocup")
    private Integer munDomPartOcup;

    @Column(name = "mun_pop_urb")
    private Integer munPopUrb;

    @Column(name = "tax_med_ocup")
    private BigDecimal taxMedOcup;

    @Column(name = "pop_total_aa_ref")
    private Integer popTotalAaRef;

    @Column(name = "dom_res_ocup_total")
    private Integer domResOcupTotal;

    @Column(name = "dom_res_ocup_urb")
    private Integer domResOcupUrb;

    @Column(name = "dom_res_ocup_rur")
    private Integer domResOcupRur;


    @Column(name = "mun_dom_gerais")
    private Integer domResGerais;

    @Column(name = "estrut_reg_agua_esg")
    private String estruturaRegionalizacaoAguaEsg;

    @Column(name = "mun_preenchimento")
    private Integer munPreenchimento;

    @Column(name = "mun_erros")
    private Integer munErros;

    @Column(name = "mun_obj_erros")
    private String munObjetoErros;


    @ManyToOne
    @JoinColumn(name = "mun_agr_cd", referencedColumnName = "agr_cd", nullable = false)
    private AgenciaReguladora agenciaReguladora;

    //@OneToOne()
    //private MonitoramentoUniversalizacaoMunAgua monitoramentoUniversalizacaoMunAgua;

    //@OneToOne()
    //private MonitoramentoUniversalizacaoMunEsgoto monitoramentoUniversalizacaoMunEsgoto;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    public enum EstruturaRegionalizacaoAguaEsg {
      //Temos que criar um padrao para isso ver com o Joao
    }
}


// Fim do arquivo: MunicipiosUniversalizacao.java

// Arquivo: MunicipiosUniversalizacaoPK.java
// Caminho: \br\gov\ana\sarsb\model\entity\MunicipiosUniversalizacaoPK.java

package br.gov.ana.sarsb.model.entity;

import java.io.Serializable;

public class MunicipiosUniversalizacaoPK implements Serializable {
  private Integer aaRef;
  private Integer munIbgeCd;
}


// Fim do arquivo: MunicipiosUniversalizacaoPK.java

// Arquivo: NormasDeReferencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\NormasDeReferencia.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Table(name = "sabtb_normasreferencia", schema = "public")
@Getter
@Setter
public class NormasDeReferencia extends GenericEntity<Long>{

    @Id
    @SequenceGenerator(name = "sq_normasreferencia", sequenceName = "sq_normasreferencia", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_normasreferencia", strategy = GenerationType.SEQUENCE)
    @Column(name = "nor_cd")
    private Long id;

    @Column(name = "nor_nome", nullable = false)
    private String nome;

    @Column(name = "nor_descricao")
    private String descricao;

}


// Fim do arquivo: NormasDeReferencia.java

// Arquivo: ParametroConfiguracao.java
// Caminho: \br\gov\ana\sarsb\model\entity\ParametroConfiguracao.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@NamedQueries({
		@NamedQuery(name = "ParametroConfiguracao.recuperaParametroPorChave", query = "FROM ParametroConfiguracao pc WHERE pc.chave = :chave"),
		@NamedQuery(name = "ParametroConfiguracao.recuperaParametroPorValor", query = "SELECT pc FROM ParametroConfiguracao pc WHERE pc.valor = :valor"),
		@NamedQuery(name = "ParametroConfiguracao.pesquisar", query = "SELECT c.valor FROM ParametroConfiguracao c WHERE c.chave = :chave")

})
@Entity
@Table(name = "sabtb_parametroconfiguracao", schema = "public")
@Getter
@Setter
public class ParametroConfiguracao extends GenericEntity<Long> {

	private static final long serialVersionUID = -80195153693179319L;

	@Id
	@Column(name = "pac_cd")
	private Long id;

	@Column(name = "pac_cd_chave")
	private String chave;

	@Column(name = "pac_vl")
	private String valor;

}

// Fim do arquivo: ParametroConfiguracao.java

// Arquivo: ParametrosNRS.java
// Caminho: \br\gov\ana\sarsb\model\entity\ParametrosNRS.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "sabtb_parametros_nrs", schema = "public")
@Getter
@Setter
public class ParametrosNRS extends GenericEntity<Long> {

    private static final long serialVersionUID = -5161790161205858693L;

    @Id
    @SequenceGenerator(name = "sq_parametros_nrs", sequenceName = "sq_parametros_nrs", allocationSize = 1)
    @GeneratedValue(generator = "sq_parametros_nrs", strategy = GenerationType.SEQUENCE)
    @Column(name = "par_nrs_cd")
    private Long id;

    @Column(name = "par_nrs_ano_referencia")
    private Long anoReferencia;

    @ManyToOne
    @JoinColumn(name = "par_nrs_nor_cd", referencedColumnName = "nor_cd")
    private NormasDeReferencia normasDeReferencia;


    @Column(name = "par_nrs_data_inicio_envio")
    private Date dataInicioEnvio;
    @Column(name = "par_nrs_data_fim_envio")
    private Date dataFimEnvio;
    @Column(name = "par_nrs_data_inicio_retificacao")
    private Date dataInicioRetificacao ;
    @Column(name = "par_nrs_data_fim_retificacao")
    private Date dataFimRetificacao;

}


// Fim do arquivo: ParametrosNRS.java

// Arquivo: PerguntaDecreto.java
// Caminho: \br\gov\ana\sarsb\model\entity\PerguntaDecreto.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_perguntasdecreto", schema = "public")
@Getter
@Setter
public class PerguntaDecreto extends GenericEntity<Long> {

	private static final long serialVersionUID = -7611785455499892662L;
	
	public PerguntaDecreto(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_perguntasdecreto", sequenceName = "sq_perguntasdecreto", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_perguntasdecreto", strategy = GenerationType.SEQUENCE)
	@Column(name = "ped_cd")
	private Long id;

	@Column(name = "ped_cd_referencia", nullable = true)
	private Long codigoReferencia;
	
	@Column(name = "ped_ds", length = 5000, nullable = false)
	private String descricao;	
	
	@Column(name = "ped_ic_label")
	private boolean label;
	
	@ManyToOne
	@JoinColumn(name = "ped_tpq_cd", referencedColumnName = "tpq_cd")
	private TipoQuestionario tipoQuestionario;

}

// Fim do arquivo: PerguntaDecreto.java

// Arquivo: PlanilhaUniversalizacao.java
// Caminho: \br\gov\ana\sarsb\model\entity\PlanilhaUniversalizacao.java

package br.gov.ana.sarsb.model.entity;

import lombok.*;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "planilha_universalizacao")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PlanilhaUniversalizacao {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private String X00;
	private String X01;
	private String X02;
	private String X03;
	private Integer X04;
	private Integer X05;
	private Integer X06;
	private Double X07;
	private Integer X08;
	private Integer X09;
	private Integer X10;
	private Integer X11;
	private String X12;
	private Integer GE01;
	private Integer AS01;
	private Integer AS02;
	private Integer AS03;
	private Integer AS04;
	private Integer AS10;
	private Double AR11;
	private Double AR12;
	private Integer ES01;
	private Integer ES02;
	private Integer ES03;
	private Integer ES04;
	private Integer ES10;
	private Integer ER11;
	private Integer ER12;
//campos da aba 2
	private String X20;
	private String X21;
	private String X22;
	private String X23;
	private String X24;
	private String X25;
	private String X26;
	private Integer GE02;
	private Integer AR01;
	private Integer AR02;
	private Integer AR03;
	private Integer AR04;
	private Integer AR05;
	private Integer AR06;
	private Integer AR07;
	private Integer AR10;
	private Integer ER01;
	private Integer ER02;
	private Integer ER03;
	private Integer ER04;
	private Integer ER05;
	private Integer ER06;
	private Integer ER07;
	private Integer ER10;
	private Integer GE03;
	private Boolean importado;
	private String 	aba;

	@Column(name = "cod_agr_cd")
	private Long codAgrCd;

	@Column(name = "data_importacao", updatable = false)
	public LocalDate dataImportacao;

	@PrePersist
	protected void onCreate() {
		this.dataImportacao = LocalDate.now();
	}
}


// Fim do arquivo: PlanilhaUniversalizacao.java

// Arquivo: Prefeitura.java
// Caminho: \br\gov\ana\sarsb\model\entity\Prefeitura.java

package br.gov.ana.sarsb.model.entity;

import java.util.List;

import javax.persistence.*;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_prefeitura", schema = "public")
@Getter
@Setter
public class Prefeitura extends GenericEntity<Long> {

	private static final long serialVersionUID = 6854438501632170418L;

	public Prefeitura(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_prefeitura", sequenceName = "sq_prefeitura", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_prefeitura", strategy = GenerationType.SEQUENCE)
	@Column(name = "pft_cd")
	private Long id;

	@Column(name = "pft_nu_cnpj", length = 14, nullable = false)
	private String cnpj;

	@Column(name = "pft_nu_ibgemunicipio", length = 7, nullable = false)
	private String codigoIbge;

	@Column(name = "pft_ds_email", length = 150, nullable = false)
	private String email;

	@Column(name = "pft_nu_telefone", length = 11, nullable = false)
	private String telefone;

	@Column(name = "pft_ic_possuientidadereguladora", length = 1, nullable = false)
	private Boolean possuiEntidadeReguladora;

	@Column(name = "pft_cd_prestador")
	private Long codigoPrestador;

	@Column(name = "pft_sigla", length = 10)
	private String sigla;

	@Column(name = "pft_nm", length = 150)
	private String nome;
	
	@Column(name = "pft_ter_dsoutraentidade", length = 150)
	private String descricaoOutraEntidade;
	
	@Column(name = "pft_ic_retificar", nullable = false)
	private Boolean podeRetificar;
	
	@Column(name = "pft_ic_desativarcronograma", nullable = false)
	private Boolean desativarCronograma;
	
	@Column(name = "pft_ter_atodelegacao", length = 300)
	private String arquivoAtoDelegacao;

	@Column(name = "pft_agr_cd" , nullable = false)
	private Long codigoAgencia;


	@Column(name = "pft_aceitelgpd")
	private Boolean aceiteLgpd;






	@OneToMany(mappedBy = "prefeitura", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
	private List<PrefeituraTemPrestador> prefeituraTemPrestadores;

	@OneToMany(cascade = CascadeType.ALL)
	private List<Sustentabilidade> sustentabilidade;

	@Transient
	private Boolean arquivoAtoDelegacaoModificado;



}

// Fim do arquivo: Prefeitura.java

// Arquivo: PrefeituraTemPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\PrefeituraTemPrestador.java

package br.gov.ana.sarsb.model.entity;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabta_prefeituratemprestador", schema = "public")
@Getter
@Setter
public class PrefeituraTemPrestador implements Serializable {

	private static final long serialVersionUID = 8516360398769917385L;

	@Id
	@SequenceGenerator(name = "sq_prefeituratemprestador", sequenceName = "sq_prefeituratemprestador", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_prefeituratemprestador", strategy = GenerationType.SEQUENCE)
	@Column(name = "ptp_cd")
	private Long id;
	
	@ManyToOne
	@JoinColumn(name = "ptp_pft_cd", referencedColumnName = "pft_cd")
	private Prefeitura prefeitura;
	
	@ManyToOne
	@JoinColumn(name = "ptp_tsp_cd", referencedColumnName = "tsp_cd")
	private TipoSubCategoriaPrestador tipoSubCategoriaPrestador;

	@ManyToOne
	@JoinColumn(name = "ptp_tes_cd", referencedColumnName = "tes_cd")
	private TipoEtapaServico tipoEtapaServico;


}

// Fim do arquivo: PrefeituraTemPrestador.java

// Arquivo: Prestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\Prestador.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "sabtb_prestador", schema = "public")
@Getter
@Setter
public class Prestador extends GenericEntity<Long> {

	private static final long serialVersionUID = 6127199203947106931L;

	@Id
	@SequenceGenerator(name = "sq_prestador", sequenceName = "sq_prestador", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_prestador", strategy = GenerationType.SEQUENCE)
	@Column(name = "prt_cd")
	private Long id;

	@Column(name = "prt_nu_cnpj", length = 14, nullable = false)
	private String cnpj;

	@Column(name = "prt_nm_razaosocial", length = 350, nullable = false)
	private String nomeRazaoSocial;
	
	@Column(name = "prt_nu_ibgemunicipio", length = 7, nullable = false)
	private String codigoIbge;
	
	@Column(name = "prt_nu_telefone", length = 11, nullable = false)
	private String telefone;
	
	@Column(name = "prt_ds_email", length = 150, nullable = false)
	private String email;
	
	@Column(name = "prf_nu_cpfresponsavel", length = 11, nullable = false)
	private String cpfResponsavel;
	
	@Column(name = "prt_nm_responsavel", length = 150, nullable = false)
	private String nomeResponsavel;
	
	@Column(name = "prt_ds_cargofuncaoresponsavel", length = 150, nullable = false)
	private String cargoResponsavel;
	
	@Column(name = "prt_nu_telefoneresponsavel", length = 11, nullable = false)
	private String telefoneResponsavel;
	
	@Column(name = "prt_ds_emailresponsavel", length = 150, nullable = false)
	private String emailResponsavel;

	@Column(name = "prt_prestador_validado",  nullable = false)
	private Boolean prestadorativo;

	
}

// Fim do arquivo: Prestador.java

// Arquivo: ProcessoCefAgencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProcessoCefAgencia.java

package br.gov.ana.sarsb.model.entity;

import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_processocefagencia", schema = "public")
@Getter
@Setter
public class ProcessoCefAgencia extends GenericEntity<Long> {

	private static final long serialVersionUID = -5014914671286555414L;
	
	public ProcessoCefAgencia(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_processocefagencia", sequenceName = "sq_processocefagencia", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_processocefagencia", strategy = GenerationType.SEQUENCE)
	@Column(name = "pca_cd")
	private Long id;

	@Column(name = "pca_ds_arquivoprocessoditalcompleto", length = 350, nullable = false)
	private String arquivoProcessoDigitalCompleto;
	
	@Column(name = "pca_ds_arquivodecisaotecnica", length = 350, nullable = false)
	private String arquivoDecisaoTecnica;
	
	@Column(name = "pca_ic_analiseeconomicafinanceira", nullable = false)
	private Boolean analiseEconomicaFinanceira;
	
	@Column(name = "pca_ds_arquivodocumentocomplementar", length = 350, nullable = false)
	private String arquivoDocumentoComplementar;
	
	@Column(name = "pca_ds_documentocomplementar", length = 5000, nullable = false)
	private String descricaoDocumentoComplementar;
	
	@Column(name = "pca_ds_comentariosadicionais", length = 5000, nullable = false)
	private String comentariosAdicionais;
	
	@Column(name = "pca_ic_finalizado")
	private Boolean finalizado;
	
	@ManyToOne
	@JoinColumn(name = "pca_fca_cd", referencedColumnName = "fca_cd", nullable = false)
	private FormularioCefAgencia formularioCefAgencia;
	
    @OneToMany(mappedBy="processoCefAgencia", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private Set<ManifestacaoTecnica> listaManifestacaoTecnica;
    
    @OneToMany(mappedBy="processoCefAgencia", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private Set<AgenciaTemProtocoloPrestador> listaProtocolo;

}

// Fim do arquivo: ProcessoCefAgencia.java

// Arquivo: Protocolo.java
// Caminho: \br\gov\ana\sarsb\model\entity\Protocolo.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "sabtb_protocolos", schema = "public")
@Getter
@Setter
public class Protocolo extends GenericEntity<Long> {

    @Id
    @SequenceGenerator(name = "sq_protocolos", sequenceName = "sq_protocolos", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_protocolos", strategy = GenerationType.SEQUENCE)
    @Column(name = "pro_cd")
    private Long id;

    @Column(name = "pro_ano_referencia")
    private Long anoReferencia;

    @Column(name = "pro_nu_protocolo", nullable = false)
    private String numeroProtocolo;

    @Column(name = "pro_dt_envio", nullable = false)
    private LocalDateTime dataEnvio;

    @ManyToOne
    @JoinColumn(name = "pro_arg_cd", referencedColumnName = "agr_cd")
    AgenciaReguladora entidadeReguladora;

    @ManyToOne
    @JoinColumn(name = "pro_norma_cd", referencedColumnName = "nor_cd")
    NormasDeReferencia normasDeRefrencia;


    @OneToMany(mappedBy = "protocolo", fetch = FetchType.EAGER)
    private List<ProtocoloRegulacaoTarifaria> protocoloRegulacaoTarifarias;




}


// Fim do arquivo: Protocolo.java

// Arquivo: ProtocoloAdicional.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloAdicional.java

package br.gov.ana.sarsb.model.entity;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

@EqualsAndHashCode(callSuper = false)
@Entity
@Table(name = "sabtb_protocoloadicional", schema = "public")
@Getter
@Setter
public class ProtocoloAdicional extends GenericEntity<Long> {

	private static final long serialVersionUID = 156464058726758037L;

	@Id
	@SequenceGenerator(name = "sq_protocoloadicional", sequenceName = "sq_protocoloadicional", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_protocoloadicional", strategy = GenerationType.SEQUENCE)
	@Column(name = "pta_cd")
	private Long id;

	@Column(name = "pta_nu_protocolo", nullable = false)
	private String protocolo;

	@Column(name = "pta_ds_arquivoprotocolo", length = 350, nullable = false)
	private String arquivo;
	
	@ManyToOne
	@JoinColumn(name = "pta_agr_cd", referencedColumnName = "agr_cd", nullable = false)
	private AgenciaReguladora agenciaReguladora;
	
	@ManyToOne
	@JoinColumn(name = "pta_prt_cd", referencedColumnName = "prt_cd", nullable = false)
	private Prestador prestador;
	
	@OneToMany(mappedBy="protocoloAdicional", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @OrderBy("id")
	private List<MunicipioServico> listaServico;

}

// Fim do arquivo: ProtocoloAdicional.java

// Arquivo: ProtocoloAtoNormativo.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloAtoNormativo.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Table(name = "sabtb_protocoloatonormativo", schema = "public")
@Getter
@Setter
public class ProtocoloAtoNormativo extends GenericEntity<Long>  {

    @Id
    @SequenceGenerator(name = "sq_protocoloatonormativo", sequenceName = "sq_protocoloatonormativo", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_protocoloatonormativo", strategy = GenerationType.SEQUENCE)
    @Column(name = "pr_cd")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "pr_ato_cd", referencedColumnName = "ato_cd")
    AtoNormativoEri atoNormativoEri;

    @ManyToOne
    @JoinColumn(name = "pr_pro_cd", referencedColumnName = "pro_cd")
    Protocolo protocolo;

}


// Fim do arquivo: ProtocoloAtoNormativo.java

// Arquivo: ProtocoloCefPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloCefPrestador.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "sabtb_protocolocefprestador", schema = "public")
@Getter
@Setter
public class ProtocoloCefPrestador extends GenericEntity<Long> {

	private static final long serialVersionUID = 8378758124863032787L;

	@Id
	@SequenceGenerator(name = "sq_protocolocefprestador", sequenceName = "sq_protocolocefprestador", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_protocolocefprestador", strategy = GenerationType.SEQUENCE)
	@Column(name = "pcf_cd")
	private Long id;

	@Column(name = "pcf_nu_protocolo", nullable = false)
	private String numeroProtocolo;

	@Column(name = "pcf_ds_arquivoprotocolorequerimento", length = 350, nullable = false)
	private String arquivoProtocoloRequerimento;
	
	@Column(name = "pcf_ds_arquivocopiarequerimento", length = 350, nullable = false)
	private String arquivoCopiaRequerimento;
	
	@ManyToOne
	@JoinColumn(name = "pcf_agr_cd", referencedColumnName = "agr_cd", nullable = false)
	private AgenciaReguladora agenciaReguladora;
	
	@ManyToOne
	@JoinColumn(name = "pcf_fcp_cd", referencedColumnName = "fcp_cd", nullable = false)
	private FormularioCefPrestador formularioCefPrestador;
	
//    @OneToMany(mappedBy="protocoloCefPrestador", fetch = FetchType.EAGER)
//	private Set<ContratoProtolocoCef> listaContratos;

}

// Fim do arquivo: ProtocoloCefPrestador.java

// Arquivo: ProtocoloConformidade.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloConformidade.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "sabtb_protocoloconformidadeentidade", schema = "public")
@Getter
@Setter
public class ProtocoloConformidade extends GenericEntity<Long>  {

	@Id
	@SequenceGenerator(name = "sq_protocoloconformidadeentidade", sequenceName = "sq_protocoloconformidadeentidade",
			initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_protocoloconformidadeentidade", strategy = GenerationType.SEQUENCE)
	@Column(name = "prot_cd")
	private Long id;

	@ManyToOne
	@JoinColumn(name = "prot_con_cd", referencedColumnName = "con_cd")
	ConformidadeEntidade conformidadeEntidade;

	@ManyToOne
	@JoinColumn(name = "prot_pro_cd", referencedColumnName = "pro_cd")
	Protocolo protocolo;

}


// Fim do arquivo: ProtocoloConformidade.java

// Arquivo: ProtocoloContratos.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloContratos.java

package br.gov.ana.sarsb.model.entity;


import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;

@Entity
@Table(name = "sabtb_protocolocontratos", schema = "public")
@Getter
@Setter
public class ProtocoloContratos extends GenericEntity<Long>  {

    @Id
    @SequenceGenerator(name = "sq_protocolocontratos", sequenceName = "sq_protocolocontratos", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_protocolocontratos", strategy = GenerationType.SEQUENCE)
    @Column(name = "pc_cd")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "pc_ma_cd", referencedColumnName = "ma_cd")
    ContratoMatrizRisco contratoMatrizRisco;

    @ManyToOne
    @JoinColumn(name = "pc_pro_cd", referencedColumnName = "pro_cd")
    Protocolo protocolo;

}



// Fim do arquivo: ProtocoloContratos.java

// Arquivo: ProtocoloIndenizacao.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloIndenizacao.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.io.Serializable;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_protocoloindenizacao", schema = "public")
@Getter
@Setter
public class ProtocoloIndenizacao implements Serializable {

    private static final long serialVersionUID = 2934735328562658963L;

    @Id
    @SequenceGenerator(
            name = "sq_protocoloindenizacao",
            sequenceName = "sq_protocoloindenizacao",
            initialValue = 1,
            allocationSize = 1
    )
    @GeneratedValue(generator = "sq_protocoloindenizacao", strategy = GenerationType.SEQUENCE)
    @Column(name = "preg_cd")
    private Long id;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "preg_pro_cd", referencedColumnName = "pro_cd", nullable = true)
    private Protocolo protocolo;

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.REFRESH)
    @JoinColumn(name = "preg_ato_cd", referencedColumnName = "cd_atod_id", nullable = true)
    private AtoNormativoDetalhado atoNormativoDetalhado;

    @ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
    @JoinColumn(name = "preg_contrato_cd", referencedColumnName = "cd_con_det", nullable = true)
    private ContratoDetalhamento contratoDetalhado;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "preg_nor_cd", referencedColumnName = "nor_cd", nullable = true)
    private NormasDeReferencia norma;

    @Column(name = "preg_nu_ano_referencia")
    private Integer anoReferencia;
}


// Fim do arquivo: ProtocoloIndenizacao.java

// Arquivo: ProtocoloRegulacaoTarifaria.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloRegulacaoTarifaria.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_protocoloregulacaotarifaria", schema = "public")
@Getter
@Setter
public class ProtocoloRegulacaoTarifaria extends GenericEntity<Long> {

	private static final long serialVersionUID = 2934735328562658963L;


	@Id
	@SequenceGenerator(name = "sq_protocoloregulacaotarifaria", sequenceName = "sq_protocoloregulacaotarifaria", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_protocoloregulacaotarifaria", strategy = GenerationType.SEQUENCE)
	@Column(name = "preg_cd")
	private Long id;


	
	@ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
	@JoinColumn(name = "preg_pro_cd", referencedColumnName = "pro_cd")
	private Protocolo protocolo;

	@ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
	@JoinColumn(name = "preg_reg_cd", referencedColumnName = "reg_cd")
	private RegulacaoTarifaria regulacaoTarifaria;

	
}

// Fim do arquivo: ProtocoloRegulacaoTarifaria.java

// Arquivo: ProtocoloRequisitoComplementar.java
// Caminho: \br\gov\ana\sarsb\model\entity\ProtocoloRequisitoComplementar.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
    @Table(name = "sabtb_protocolo_requisito_complementar", schema = "public")
@Getter
@Setter
public class ProtocoloRequisitoComplementar extends GenericEntity<Long> {

    @Id
    @SequenceGenerator(name = "sq_protocolo_requisito_complementar",
            sequenceName = "sq_protocolo_requisito_complementar", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_protocolo_requisito_complementar", strategy = GenerationType.SEQUENCE)
    @Column(name = "preq_cd")
    private Long id;

    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    @JoinColumn(name = "preq_pro_cd", referencedColumnName = "pro_cd")
    private Protocolo protocolo;

    @ManyToOne(cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
    @JoinColumn(name = "preq_reg_cd", referencedColumnName = "req_cd")
    private RequisitoComplementar requisitoComplementar;


}

// Fim do arquivo: ProtocoloRequisitoComplementar.java

// Arquivo: RascunhoCadastro.java
// Caminho: \br\gov\ana\sarsb\model\entity\RascunhoCadastro.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "sabtb_rascunhocadastro", schema = "public")
@Getter
@Setter
public class RascunhoCadastro extends GenericEntity<Long> {

	private static final long serialVersionUID = -3127254102675507873L;

	@Id
	@SequenceGenerator(name = "sq_rascunhocadastro", sequenceName = "sq_rascunhocadastro", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_rascunhocadastro", strategy = GenerationType.SEQUENCE)
	@Column(name = "rca_cd")
	private Long id;

	@ManyToOne
	@JoinColumn(name = "rca_tpf_cd", referencedColumnName = "tpf_cd")
	private TipoFormulario tipoFormulario;
	
	@ManyToOne
	@JoinColumn(name = "rca_pft_cd", referencedColumnName = "pft_cd")
	private Prefeitura prefeitura;

	@Column(name = "rca_tx_rascunho", columnDefinition = "TEXT")
	private String rascunho;
	
}

// Fim do arquivo: RascunhoCadastro.java

// Arquivo: RegulacaoTarifaria.java
// Caminho: \br\gov\ana\sarsb\model\entity\RegulacaoTarifaria.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_regulacaotarifaria", schema = "public")
@Getter
@Setter
public class RegulacaoTarifaria extends GenericEntity<Long> {

	private static final long serialVersionUID = 2934735328562658968L;

	@Id
	@SequenceGenerator(name = "sq_regulacaotarifaria", sequenceName = "sq_regulacaotarifaria", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_regulacaotarifaria", strategy = GenerationType.SEQUENCE)
	@Column(name = "reg_cd")
	private Long id;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "reg_dt_cadastro", nullable = false)
	private Date dataCadastro;

	@Column(name = "reg_ic_declaro", nullable = false)
	private Boolean declaro;

	@ManyToOne
	@JoinColumn(name = "reg_agr_cd", referencedColumnName = "agr_cd")
	AgenciaReguladora agenciaReguladora;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "reg_con_cd")
	private Contrato  contrato;

	@Column(name = "reg_per1", nullable = false)
	private Boolean pergunta1;
	@Column(name = "reg_per2", nullable = false)
	private Boolean pergunta2;
	@Column(name = "reg_per2_1", nullable = false)
	private Boolean pergunta2_1;
	@Column(name = "reg_per3", nullable = false)
	private Boolean pergunta3;
	@Column(name = "reg_per4", nullable = false)
	private Boolean pergunta4;
	@Column(name = "reg_per5", nullable = false)
	private Boolean pergunta5;
	@Column(name = "reg_per6", nullable = false)
	private Boolean pergunta6;
	@Column(name = "reg_per7", nullable = false)
	private Boolean pergunta7;
	@Column(name = "reg_per8", nullable = false)
	private Boolean pergunta8;
	@Column(name = "reg_pe9", nullable = false)
	private Boolean pergunta9;
	@Column(name = "reg_per10", nullable = false)
	private Boolean pergunta10;
	@Column(name = "reg_per11", nullable = false)
	private Boolean pergunta11;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "reg_fin_cd", referencedColumnName = "fin_cd")
	private FinalizacaoRegulacaoTarifaria finalizacao;

	@Column(name = "reg_ano_coleta")
	private Long anoColeta;

	@Column(name = "reg_conforme")
	String conforme;

}

// Fim do arquivo: RegulacaoTarifaria.java

// Arquivo: RelatorioEris.java
// Caminho: \br\gov\ana\sarsb\model\entity\RelatorioEris.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@NoArgsConstructor
@Entity
@Table(name = "vw_relatorio_cadastro_eris_xls", schema = "public")
@Getter
@Setter
public class RelatorioEris extends GenericEntity<Long> {

	private static final long serialVersionUID = 2934735328562658963L;


	@Id
	@Column(name = "servreg_agr_cd") // Substitua "id" pelo nome da coluna de identificação, se necessário
	private Long idagr; // Tipo de dados do campo de identificação

	@Column(name = "servreg_mun_nm")
	private String servregMunNm;

	@Column(name = "servreg_nm_uf")
	private String servregNmUf;

	@Column(name = "atr_ds")
	private String atrDs;

	@Column(name = "servr_ds")
	private String servrDs;

	@Column(name = "servreg_ds_atividade")
	private String servregDsAtividade;

	@Column(name = "servreg_dt_inicio")
	private String servregDtInicio;

	@Column(name = "servreg_dt_fim")
	private String servregDtFim;

	@Column(name = "prt_nm_razaosocial")
	private String prtNmRazaoSocial;

	@Column(name = "servreg_dt_inicio_prestador")
	private String servregDtInicioPrestador;

	@Column(name = "servreg_dt_fim_prestador")
	private String servregDtFimPrestador;



	@Override
	public Long getId() {
		return null;
	}


}

// Fim do arquivo: RelatorioEris.java

// Arquivo: RequisitoComplementar.java
// Caminho: \br\gov\ana\sarsb\model\entity\RequisitoComplementar.java

package br.gov.ana.sarsb.model.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_reqcomplementaresnr8", schema = "public")
@Getter
@Setter
public class RequisitoComplementar extends GenericEntity<Long> {

    @Id
    @SequenceGenerator(name = "sq_complementaresnr8", sequenceName = "sq_complementaresnr8", initialValue = 1,
            allocationSize = 1)
    @GeneratedValue(generator = "sq_complementaresnr8", strategy = GenerationType.SEQUENCE)
    @Column(name = "req_cd")
    private Long id;

    @Column(name = "req_ano_referencia")
    private Long anoReferencia;

    @Column(name = "req_per1")
    private Boolean pergunta1;

    @Column(name = "req_per2")
    private Boolean pergunta2;

    @Column(name = "req_per3")
    private Boolean pergunta3;

    @Column(name = "req_per4")
    private Boolean pergunta4;

    @Column(name = "req_per5")
    private Boolean pergunta5;

    @Column(name = "req_per6")
    private Boolean pergunta6;

    @Column(name = "req_per7")
    private Boolean pergunta7;

    @Column(name = "req_conforme")
    private Boolean conforme;

    @ManyToOne
    @JoinColumn(name = "req_arg_cd", referencedColumnName = "agr_cd")
    private AgenciaReguladora agenciaReguladora;

    @OneToMany(mappedBy = "requisitoComplementar", fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties({"documentos"})
    private Set<RequisitoComplementarDoc> documentos;


    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "reg_fin_cd", referencedColumnName = "fin_cd")
    private FinalizacaoRequisitoComplementar finalizacao;

}

// Fim do arquivo: RequisitoComplementar.java

// Arquivo: RequisitoComplementarDoc.java
// Caminho: \br\gov\ana\sarsb\model\entity\RequisitoComplementarDoc.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_reqcomplementaresnr8_documentos", schema = "public")
@Getter
@Setter
public class RequisitoComplementarDoc extends GenericEntity<Long> {

    private static final long serialVersionUID = 2934735328562658968L;

    @Id
    @SequenceGenerator(name = "sq_reqcomplementaresnr8_documentos", sequenceName = "sq_reqcomplementaresnr8_documentos",
            initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_reqcomplementaresnr8_documentos", strategy = GenerationType.SEQUENCE)
    @Column(name = "reqdc_cd")
    private Long id;

    @Column(name = "req_per1")
    private Boolean pergunta1;

    @Column(name = "req_per2")
    private Boolean pergunta2;

    @Column(name = "req_per3")
    private Boolean pergunta3;

    @Column(name = "req_per4")
    private Boolean pergunta4;

    @Column(name = "req_per5")
    private Boolean pergunta5;

    @Column(name = "req_per6")
    private Boolean pergunta6;

    @Column(name = "req_per7")
    private Boolean pergunta7;

    @ManyToOne
    @JoinColumn(name = "reqdc_req_cd", referencedColumnName = "req_cd")
    private RequisitoComplementar requisitoComplementar;

    @ManyToOne
    @JoinColumn(name = "req_docin_cd", referencedColumnName = "docin_cd")
    private DocumentoIndicadorMeta documentoIndicadorMeta;

}

// Fim do arquivo: RequisitoComplementarDoc.java

// Arquivo: RespostaAditivoAgencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\RespostaAditivoAgencia.java

package br.gov.ana.sarsb.model.entity;

import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_respostasaditivo", schema = "public")
@Getter
@Setter
public class RespostaAditivoAgencia extends GenericEntity<Long> {

	private static final long serialVersionUID = -3915848906548258081L;

	@Id
	@SequenceGenerator(name = "sq_respostasaditivo", sequenceName = "sq_respostasaditivo", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_respostasaditivo", strategy = GenerationType.SEQUENCE)
	@Column(name = "rsa_cd")
	private Long id;

	@ManyToOne
	@JoinColumn(name = "rsa_adp_cd", referencedColumnName = "adp_cd")
	private AditivoProtocoloAgencia aditivoProtocolo;
	
	@ManyToOne
	@JoinColumn(name = "rsa_ped_cd", referencedColumnName = "ped_cd")
	private PerguntaDecreto perguntaDecreto;	
	
	@Column(name = "rsa_ic_resposta", nullable = false)
	private Boolean resposta;
	
    @OneToMany(mappedBy="respostaAditivoAgencia", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	private Set<RespostaMunicipioAgencia> listaMunicipio;
	

}

// Fim do arquivo: RespostaAditivoAgencia.java

// Arquivo: RespostaMunicipioAgencia.java
// Caminho: \br\gov\ana\sarsb\model\entity\RespostaMunicipioAgencia.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabta_respostamunicipio", schema = "public")
@Getter
@Setter
public class RespostaMunicipioAgencia extends GenericEntity<Long> {

	private static final long serialVersionUID = 3778239339531126790L;

	@Id
	@SequenceGenerator(name = "sq_respostamunicipio", sequenceName = "sq_respostamunicipio", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_respostamunicipio", strategy = GenerationType.SEQUENCE)
	@Column(name = "rpm_cd")
	private Long id;

	@ManyToOne
	@JoinColumn(name = "rpm_rsa_cd", referencedColumnName = "rsa_cd")
	private RespostaAditivoAgencia respostaAditivoAgencia;
	
	@Column(name = "rpm_cd_ibgemunicipio", nullable = false)
	private Long codigoIbge;
	
	@Column(name = "rpm_ds_clausula", nullable = true)
	private String clausula;
	
	@Column(name = "rpm_ic_agua")
	private Boolean agua;
	
	@Column(name = "rpm_ic_esgoto")
	private Boolean esgoto;
	

}

// Fim do arquivo: RespostaMunicipioAgencia.java

// Arquivo: RespostaProtocolo.java
// Caminho: \br\gov\ana\sarsb\model\entity\RespostaProtocolo.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_respostasprotocolo", schema = "public")
@Getter
@Setter
public class RespostaProtocolo extends GenericEntity<Long> {

	private static final long serialVersionUID = -7678205037416842035L;

	@Id
	@SequenceGenerator(name = "sq_respostasprotocolo", sequenceName = "sq_respostasprotocolo", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_respostasprotocolo", strategy = GenerationType.SEQUENCE)
	@Column(name = "qup_cd")
	private Long id;

	@ManyToOne
	@JoinColumn(name = "qup_atp_cd", referencedColumnName = "atp_cd")
	private AgenciaTemProtocoloPrestador agenciaTemProtocoloPrestador;
	
	@ManyToOne
	@JoinColumn(name = "qup_ped_cd", referencedColumnName = "ped_cd")
	private PerguntaDecreto perguntaDecreto;	
	
	@Column(name = "qup_ped_ic_resposta", nullable = false)
	private Boolean resposta;
	
	@Column(name = "qup_ds_comentario", nullable = true)
	private String comentario;
	

}

// Fim do arquivo: RespostaProtocolo.java

// Arquivo: ServicoRegulado.java
// Caminho: \br\gov\ana\sarsb\model\entity\ServicoRegulado.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import java.util.Date;

@Entity
@Table(name = "sabtb_servicosregulados", schema = "public")
@Getter
@Setter
public class ServicoRegulado extends GenericEntity<Long> {

	private static final long serialVersionUID = 1844674183516929716L;

	@Id
	@SequenceGenerator(name = "sq_servicosregulados", sequenceName = "sq_servicosregulados", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_servicosregulados", strategy = GenerationType.SEQUENCE)
	@Column(name = "servreg_cd")
	private Long id;

	@Column(name = "servreg_agr_cd", nullable = false)
	private Long CodigoEntidade;


	@Column(name = "servreg_servr_cd", nullable = false)
	private Long CodigoServico;

	@Column(name = "servreg_dt_inicio", nullable = false)
	private Date DatainicioServico;

	@Column(name = "servreg_dt_fim", nullable = false)
	private Date DataFimServico;

	@Column(name = "servrs_nm_aquivo_delegacao")
	private String DocumentoDelegacao;

	@Column(name = "servreg_prt_cd")
	private Long CodigoPrestadornovo;

	@Column(name = "servreg_mun_cd")
	private String CodigoMunicipio;

	@Column(name = "servreg_mun_nm")
	private String NomeMunicipio;

	@Column(name = "servreg_nm_uf")
	private String UfMunicipio;

	@Column(name = "servreg_ds_atividade")
	private String DescricaoAtividade;

	@Column(name = "servreg_atr_cd")
	private Long CodigoAtribuicao;

	@Column(name = "servreg_atr_ds_outra")
	private String OutrasDescricao;

	@Column(name = "servreg_dt_inicio_prestador")
	private Date DataInicioPrestador;

	@Column(name = "servreg_dt_fim_prestador")
	private Date DataFimPrestador;

	@Column(name = "servreg_d_e_l_e_t_a_d_o")
	private Boolean ServicoExcluido;
}

// Fim do arquivo: ServicoRegulado.java

// Arquivo: SolicitacaoAcesso.java
// Caminho: \br\gov\ana\sarsb\model\entity\SolicitacaoAcesso.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_solicitacaoacesso", schema = "public")
@Getter
@Setter
public class SolicitacaoAcesso extends GenericEntity<Long> {

	private static final long serialVersionUID = 7140466035664926438L;

	public SolicitacaoAcesso(Long id) {
		this.id = id;
	}

	@Id
	@SequenceGenerator(name = "sq_solicitacaoacesso", sequenceName = "sq_solicitacaoacesso", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_solicitacaoacesso", strategy = GenerationType.SEQUENCE)
	@Column(name = "sac_cd")
	private Long id;

	@Column(name = "sac_nu_ibgemunicipio", length = 7, nullable = false)
	private String codigoIbge;

	@Column(name = "sac_nu_cpf", length = 11, nullable = false)
	private String cpfSolicitante;
	
	@Column(name = "sac_nm_solicitante", length = 150, nullable = false)
	private String nomeSolicitante;
	
	@Column(name = "sac_nu_cnpj", length = 14, nullable = false)
	private String cnpj;

	@Column(name = "sac_ds_email", length = 150, nullable = false)
	private String email;

}

// Fim do arquivo: SolicitacaoAcesso.java

// Arquivo: SubmonitoramentoUniversalizacao.java
// Caminho: \br\gov\ana\sarsb\model\entity\SubmonitoramentoUniversalizacao.java

package br.gov.ana.sarsb.model.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;

import java.time.LocalDateTime;

@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "sabtb_submonitoramentouniversializacao", schema = "public")
@Getter
@Setter
public class SubmonitoramentoUniversalizacao {
    @Id
    @Column(name = "protocolo_entrega", length = 50, nullable = false)
    private String subprotocoloEntrega;

    @Column(name = "sub_mun_aa_ref_cd", nullable = false)
    private Integer subMunAaRefCd;

    @Column(name = "sub_prt_aa_ref_cnpj_cd", length = 50, nullable = false)
    private String subPrtAaRefCnpjCd;

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime subcreatedAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime subupdatedAt;

    @PrePersist
    protected void onCreate() {
        subcreatedAt = LocalDateTime.now();
        subupdatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        subupdatedAt = LocalDateTime.now();
    }
}


// Fim do arquivo: SubmonitoramentoUniversalizacao.java

// Arquivo: Sustentabilidade.java
// Caminho: \br\gov\ana\sarsb\model\entity\Sustentabilidade.java

package br.gov.ana.sarsb.model.entity;

import javassist.bytecode.ByteArray;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.Date;


@Entity
@Table(name = "sabtb_sustentabilidade", schema = "public")
@Getter
@Setter
public class Sustentabilidade extends GenericEntity<Long>{

    private static final long serialVersionUID = 2706870943581433135L;

    @Id
    @SequenceGenerator(name = "sq_sustentabilidade", sequenceName = "sq_sustentabilidade", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sq_sustentabilidade", strategy = GenerationType.SEQUENCE)
    @Column(name = "sus_cd")
    private Long id;

    @Column(name = "sus_ano_exercicio", nullable = false)
    private Integer anoExercicio;
    @Column(name = "sus_rec_requerida", nullable = false)
    private BigDecimal recRequerida;
    @Column(name = " sus_val_arrecadado", nullable = false)
    private BigDecimal valArrecadado;
    @Column(name = "sus_val_subs_tarifario")
    private BigDecimal valSubsTarifario;
    @Column(name = "sus_val_arrecadado_alt")
    private BigDecimal subValArrecadadoAlt;
    @Column(name = "sus_ver_susten", nullable = false)
    private Integer susVerSusten;
    @Column(name = "sus_upload_doc_sus ", nullable = false)
    private String susUploadDocSus;
    @Column(name = "sus_conf_verif  ", nullable = false)
    private Boolean susConfVerif;
    @Column(name = "sus_aceite  ", nullable = false)
    private Boolean susAceiteLgp;
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "prefeitura_id")
    Prefeitura prefeitura;
}


// Fim do arquivo: Sustentabilidade.java

// Arquivo: TipoAgenciaReguladora.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoAgenciaReguladora.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.*;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_agenciareguladora", schema = "public")
@Getter
@Setter
public class TipoAgenciaReguladora extends GenericEntity<Long> {

	private static final long serialVersionUID = -2128843923028132525L;

	@Id
	@Column(name = "tar_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tar_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;



}

// Fim do arquivo: TipoAgenciaReguladora.java

// Arquivo: TipoAtribuicao.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoAtribuicao.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_atribuicao", schema = "public")
@Getter
@Setter
public class TipoAtribuicao extends GenericEntity<Long> {

	private static final long serialVersionUID = 2706870943581433135L;

	@Id
	@Column(name = "atr_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "atr_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;

	public TipoAtribuicao(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoAtribuicao.java

// Arquivo: TipoCategoriaPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoCategoriaPrestador.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_catprestadorsmrsu", schema = "public")
@Getter
@Setter
public class TipoCategoriaPrestador extends GenericEntity<Long> {

	private static final long serialVersionUID = 2706870943581433135L;

	@Id
	@Column(name = "tcp_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tcp_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;
	
	public TipoCategoriaPrestador(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoCategoriaPrestador.java

// Arquivo: TipoCategoriasSmsru.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoCategoriasSmsru.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_categorias", schema = "public")
@Getter
@Setter
public class TipoCategoriasSmsru extends GenericEntity<Long> {

	private static final long serialVersionUID = 2706870943581433135L;

	@Id
	@Column(name = "catg_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "catg_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;

	public TipoCategoriasSmsru (Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoCategoriasSmsru.java

// Arquivo: TipoCobrancaSocialSmsru.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoCobrancaSocialSmsru.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_cobrancasocial", schema = "public")
@Getter
@Setter
public class TipoCobrancaSocialSmsru extends GenericEntity<Long> {

	private static final long serialVersionUID = 2706870943581433135L;

	@Id
	@Column(name = "cobsoc_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "cobsoc_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;

	public TipoCobrancaSocialSmsru(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoCobrancaSocialSmsru.java

// Arquivo: TipoDocumentoArrecadacao.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoDocumentoArrecadacao.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_documentoarrecadacao", schema = "public")
@Getter
@Setter
public class TipoDocumentoArrecadacao extends GenericEntity<Long> {

	private static final long serialVersionUID = 5506177565662061354L;

	@Id
	@Column(name = "tda_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tda_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;
	
	public TipoDocumentoArrecadacao(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoDocumentoArrecadacao.java

// Arquivo: TipoDocumentoCriacao.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoDocumentoCriacao.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_documentocriacao", schema = "public")
@Getter
@Setter
public class TipoDocumentoCriacao  extends GenericEntity<Long> {

    private static final long serialVersionUID = -2118843923028132525L;

    @Id
    @Column(name = "tdc_cd", nullable = false, updatable = false, insertable = false)
    private Long id;

    @Column(name = "tdc_ds", nullable = false, updatable = false, insertable = false)
    private String descricao;

    public TipoDocumentoCriacao(Long id) {
        this.id = id;
    }

}

// Fim do arquivo: TipoDocumentoCriacao.java

// Arquivo: TipoDocumentoPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoDocumentoPrestador.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_documentoprestador", schema = "public")
@Getter
@Setter
public class TipoDocumentoPrestador extends GenericEntity<Long> {

	private static final long serialVersionUID = -1795963305861493759L;
	
	public static final TipoDocumentoPrestador DEMONSTRACOES_CONTABEIS = new TipoDocumentoPrestador(1L);
	public static final TipoDocumentoPrestador DEMONSTRATIVO_CALCULO = new TipoDocumentoPrestador(2L);
	public static final TipoDocumentoPrestador LAUDO_DEMONSTRATIVO = new TipoDocumentoPrestador(3L);
	public static final TipoDocumentoPrestador ESTUDO_VIABILIDADE = new TipoDocumentoPrestador(4L);
	public static final TipoDocumentoPrestador PLANO_CAPTACAO = new TipoDocumentoPrestador(5L);
	public static final TipoDocumentoPrestador LAUDO_ADEQUACAO = new TipoDocumentoPrestador(6L);
	public static final TipoDocumentoPrestador DOCUMENTO_COMPLEMENTAR = new TipoDocumentoPrestador(7L);
	
	@Id
	@Column(name = "tdp_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tdp_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;
	
	public TipoDocumentoPrestador(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoDocumentoPrestador.java

// Arquivo: TipoEntidadeReguladora.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoEntidadeReguladora.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

@EqualsAndHashCode(callSuper = false)
@Entity
@Table(name = "sabtp_entidadereguladora", schema = "public")
@Getter
@Setter
public class TipoEntidadeReguladora extends GenericEntity<Long> {

	private static final long serialVersionUID = 8771039429873978209L;

	@Id
	@SequenceGenerator(name = "sq_tipoentidadereguladora", sequenceName = "sq_tipoentidadereguladora", initialValue = 1, allocationSize = 1)
	@GeneratedValue(generator = "sq_tipoentidadereguladora", strategy = GenerationType.SEQUENCE)
	@Column(name = "ter_cd")
	private Long id;

	@Column(name = "ter_ds")
	private String descricao;
	
	@Column(name = "ter_nu_cnpj")
	private String cnpj;

}

// Fim do arquivo: TipoEntidadeReguladora.java

// Arquivo: TipoEtapaServico.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoEtapaServico.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_etapaservico", schema = "public")
@Getter
@Setter
public class TipoEtapaServico extends GenericEntity<Long> {

	private static final long serialVersionUID = 4268399779172317951L;

	@Id
	@Column(name = "tes_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tes_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;
	
	public TipoEtapaServico(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoEtapaServico.java

// Arquivo: TipoFormulario.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoFormulario.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_formulario", schema = "public")
@Getter
@Setter
public class TipoFormulario extends GenericEntity<Long> {

	private static final long serialVersionUID = -336459690032137638L;
	
	public static final TipoFormulario FORMULARIO_SMRSU = new TipoFormulario(1L);
	public static final TipoFormulario FORMULARIO_AGENCIA = new TipoFormulario(2L);
	public static final TipoFormulario FORMULARIO_PRESTADOR = new TipoFormulario(3L);
	public static final TipoFormulario FORMULARIO_AGENCIA_ADITIVO = new TipoFormulario(4L);
	
	public TipoFormulario(Long id) {
		this.id = id;
	}

	@Id
	@Column(name = "tpf_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tpf_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;

}

// Fim do arquivo: TipoFormulario.java

// Arquivo: TipoInstrumentoLegal.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoInstrumentoLegal.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_instrumentolegal", schema = "public")
@Getter
@Setter
public class TipoInstrumentoLegal extends GenericEntity<Long> {

	private static final long serialVersionUID = 3412187033408760329L;

	@Id
	@Column(name = "til_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "til_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;
	
	public TipoInstrumentoLegal(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoInstrumentoLegal.java

// Arquivo: TipoMultissetorial.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoMultissetorial.java

package br.gov.ana.sarsb.model.entity;


import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_multissetorial", schema = "public")
@Getter
@Setter
public class TipoMultissetorial  extends GenericEntity<Long>  {

    @Id
    @Column(name = "tar_cd", nullable = false, updatable = false, insertable = false)
    private Long id;


    @Column(name = "tar_ds", nullable = false, updatable = false, insertable = false)
    private String descricao;

    public TipoMultissetorial(Long id) {
        this.id = id;
    }
}


// Fim do arquivo: TipoMultissetorial.java

// Arquivo: TipoParametroCobranca.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoParametroCobranca.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_parametrocobranca", schema = "public")
@Getter
@Setter
public class TipoParametroCobranca extends GenericEntity<Long> {

	private static final long serialVersionUID = 2706870943581433135L;

	@Id
	@Column(name = "parcob_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "parcob_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;

	public TipoParametroCobranca(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoParametroCobranca.java

// Arquivo: TipoQuestionario.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoQuestionario.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_tipoquestionario", schema = "public")
@Getter
@Setter
public class TipoQuestionario extends GenericEntity<Long> {

	private static final long serialVersionUID = 1105997124831933592L;

	@Id
	@Column(name = "tpq_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tpq_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;
	
	public TipoQuestionario(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoQuestionario.java

// Arquivo: TipoRegimeCobranca.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoRegimeCobranca.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_regimecobranca", schema = "public")
@Getter
@Setter
public class TipoRegimeCobranca extends GenericEntity<Long> {

	private static final long serialVersionUID = 2706870943581433135L;

	@Id
	@Column(name = "regcob_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "regcob_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;

	public TipoRegimeCobranca(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoRegimeCobranca.java

// Arquivo: TipoResponsavelMandatario.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoResponsavelMandatario.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@NoArgsConstructor
@Entity
@Table(name = "sabta_responsavelmandatario", schema = "public")



@Getter
@Setter
@NamedQueries({
        @NamedQuery(name = "TipoResponsavelMandatario.ativo",
                query = " select a FROM TipoResponsavelMandatario a WHERE a.dataFimResponsavel is null")
})


public class TipoResponsavelMandatario extends GenericEntity<Long>   {

    private static final long serialVersionUID = -2118843923028132525L;

    @Id
    @SequenceGenerator(name = "sp_cadastromandatario", sequenceName = "sp_cadastromandatario", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sp_cadastromandatario", strategy = GenerationType.SEQUENCE)
    @Column(name = "respm_cd")
    private Long id;


    @Column(name = "respm_nm_completo", nullable = false)
    private String nomeResponsavelLegal;

    @Column(name = "respm_nu_telefone", nullable = false)
    private String telefoneResponsavelLegal;

    @Column(name = "respm_ds_email", nullable = false)
    private String emailResponsavelLegal;


    @Column(name = "respm_agr_cd")
    private Long id_agr;


    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "respm_dt_inicio", nullable = false)
    private Date dataInicioResponsavel;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "respm_dt_fim", nullable = false)
    private Date dataFimResponsavel;





}

// Fim do arquivo: TipoResponsavelMandatario.java

// Arquivo: TipoServicoRegulado.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoServicoRegulado.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_servicosregulados", schema = "public")
@Getter
@Setter
public class TipoServicoRegulado extends GenericEntity<Long>  {


    @Id
    @Column(name = "servr_cd", nullable = false, updatable = false, insertable = false)
    private Long id;


    @Column(name = "servr_ds", nullable = false, updatable = false, insertable = false)
    private String descricao;

    public TipoServicoRegulado(Long id) {
        this.id = id;
    }
}


// Fim do arquivo: TipoServicoRegulado.java

// Arquivo: TipoServicoReguladoDescricao.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoServicoReguladoDescricao.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_subservicosregulados", schema = "public")
@Getter
@Setter
public class TipoServicoReguladoDescricao extends GenericEntity<Long>  {

    private static final long serialVersionUID = -2118843923028132525L;

    @Id
    @SequenceGenerator(name = "sp_servicosreguladosdescricao", sequenceName = "sp_servicosreguladosdescricao", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sp_servicosreguladosdescricao", strategy = GenerationType.SEQUENCE)
    @Column(name = "servrs_cd", nullable = false)
    private Long id;



    @Column(name = "servrs_agr_cd", nullable = false)
    private Long CodigoEri;


    @Column(name = "servrs_ic_producao_agua_potavel", nullable = false)
    private Boolean Servico_ic_agua_potavel;

    @Column(name = "servrs_ic_distribuicao_agua_potavel", nullable = false)
    private Boolean Servico_ic_distribuicao_agua_potavel;

    @Column(name = "servrs_ic_coleta_esgoto", nullable = false)
    private Boolean Servico_ic_coleta_esgoto;

    @Column(name = "servrs_ic_tratamento_esgoto", nullable = false)
    private Boolean Servico_ic_tratamento_esgoto;





    @Column(name = "servrs_ic_disposicao_residuos", nullable = false)
    private Boolean Servico_ic_disposicao_residuos;

    @Column(name = "servrs_ic_varricao", nullable = false)
    private Boolean Servico_ic_varricao;

    @Column(name = "servrs_ic_capina", nullable = false)
    private Boolean Servico_ic_capina;

    @Column(name = "servrs_ic_rocada", nullable = false)
    private Boolean Servico_ic_rocada;

    @Column(name = "servrs_ic_poda", nullable = false)
    private Boolean Servico_ic_poda;

    @Column(name = "servrs_ic_limpeza_bueiros", nullable = false)
    private Boolean Servico_ic_limpeza_bueiros;

    @Column(name = "servrs_ic_limpeza_logradouros", nullable = false)
    private Boolean Servico_ic_limpeza_logradouros;

    @Column(name = "servrs_ic_remocao_logradouros", nullable = false)
    private Boolean Servico_ic_remocao_logradouros;

    @Column(name = "servrs_ic_outras", nullable = false)
    private Boolean Servico_ic_outras;


    @Column(name = "servrs_ds_outras", nullable = false)
    private String Servico_ds_outras;


    @Column(name = "servrs_ic_coleta_manejo", nullable = false)
    private Boolean Servico_ic_coleta_manejo;


    @Column(name = "servrs_ic_transbordo_manejo", nullable = false)
    private Boolean Servico_ic_transbordo_manejo;

    @Column(name = "servrs_ic_transporte_manejo", nullable = false)
    private Boolean Servico_ic_transporte_manejo;

    @Column(name = "servrs_ic_tratamento_manejo", nullable = false)
    private Boolean Servico_ic_tratamento_manejo;


    @Column(name = "servrs_ic_destinacao_manejo", nullable = false)
    private Boolean Servico_ic_destinacao_manejo;

    @Column(name = "servrs_ic_planejamento_publico", nullable = false)
    private Boolean Servico_ic_planejamento_publico;

    @Column(name = "servrs_ic_administracao", nullable = false)
    private Boolean Servico_ic_administracao;

    @Column(name = "servrs_ic_operacao_manutencao", nullable = false)
    private Boolean Servico_ic_operacao_manutencao;



    public TipoServicoReguladoDescricao(Long id) {
        this.id = id;
    }

}


// Fim do arquivo: TipoServicoReguladoDescricao.java

// Arquivo: TipoServicoReguladoDocumento.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoServicoReguladoDocumento.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;
import java.util.Set;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_servicosregulados", schema = "public")
@Getter
@Setter
public class TipoServicoReguladoDocumento extends GenericEntity<Long>  {

    private static final long serialVersionUID = -2118843923028132525L;

    @Id
    @SequenceGenerator(name = "sp_servicosregulados", sequenceName = "sp_servicosregulados", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sp_servicosregulados", strategy = GenerationType.SEQUENCE)
    @Column(name = "servreg_cd", nullable = false)
    private Long id;



    @Column(name = "servreg_agr_cd", nullable = false)
    private Long CodigoEntidade;


    @Column(name = "servreg_servr_cd", nullable = false)
    private Long CodigoServico;

    @Column(name = "servreg_dt_inicio", nullable = false)
    private Date DatainicioServico;

    @Column(name = "servreg_dt_fim", nullable = false)
    private Date DataFimServico;

    @Column(name = "servrs_nm_aquivo_delegacao")
    private String DocumentoDelegacao;

    @Column(name = "servreg_prt_cd")
    private Long CodigoPrestadornovo;

    @Column(name = "servreg_mun_cd")
    private String CodigoMunicipio;


    @Column(name = "servreg_mun_nm")
    private String NomeMunicipio;



    @Column(name = "servreg_nm_uf")
    private String UfMunicipio;


    @Column(name = "servreg_ds_atividade")
    private String DescricaoAtividade;

    @Column(name = "servreg_atr_cd")
    private Long CodigoAtribuicao;

    @Column(name = "servreg_atr_ds_outra")
    private String OutrasDescricao;


    @Column(name = "servreg_dt_inicio_prestador")
    private Date DataInicioPrestador;

    @Column(name = "servreg_dt_fim_prestador")
    private Date DataFimPrestador;

    @Column(name = "servreg_d_e_l_e_t_a_d_o")
    private Boolean ServicoExcluido;


    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "servreg_prt_cd", referencedColumnName = "prt_cd", insertable = false, updatable = false)
    private Prestador prestador;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "servreg_servr_cd", referencedColumnName = "servr_cd", insertable = false, updatable = false)
    private TipoServicoRegulado tipoServicoRegulado;



    public TipoServicoReguladoDocumento(Long id) {
        this.id = id;
    }

}


// Fim do arquivo: TipoServicoReguladoDocumento.java

// Arquivo: TipoServicoReguladoPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoServicoReguladoPrestador.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;

@NoArgsConstructor
@Entity
@Table(name = "sabtb_servicosregulados", schema = "public")
@Getter
@Setter
public class TipoServicoReguladoPrestador {

    @Id
    @SequenceGenerator(name = "sp_servicosreguladosdescricao", sequenceName = "sp_servicosreguladosdescricao", initialValue = 1, allocationSize = 1)
    @GeneratedValue(generator = "sp_servicosreguladosdescricao", strategy = GenerationType.SEQUENCE)
    @Column(name = "servrs_cd", nullable = false)
    private Long id;

    @Column(name = "servreg_servr_cd", nullable = false)
    private Long CodigoServico;

    @Column(name = "servreg_prt_cd")
    private Long CodigoPrestador;

    @Column(name = "servreg_mun_nm")
    private String NomeMunicipio;

    @Column(name = "servreg_nm_uf")
    private String UfMunicipio;

    @Column(name = "servreg_mun_cd")
    private String codigoIbge;

    @Column(name = "servreg_agr_cd")
    private Long  CodigoEri;

    @Column(name = "servreg_d_e_l_e_t_a_d_o")
    private Boolean excluido;
}


// Fim do arquivo: TipoServicoReguladoPrestador.java

// Arquivo: TipoSetorRegulado.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoSetorRegulado.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_setorregulado", schema = "public")
@Getter
@Setter
public class TipoSetorRegulado  extends GenericEntity<Long>  {


    @Id
    @Column(name = "tar_cd", nullable = false, updatable = false, insertable = false)
    private Long id;


    @Column(name = "tar_ds", nullable = false, updatable = false, insertable = false)
    private String descricao;

    public TipoSetorRegulado(Long id) {
        this.id = id;
    }
}


// Fim do arquivo: TipoSetorRegulado.java

// Arquivo: TipoSubCategoriaPrestador.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoSubCategoriaPrestador.java

package br.gov.ana.sarsb.model.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_subcatprestadorsmrsu", schema = "public")
@Getter
@Setter
public class TipoSubCategoriaPrestador extends GenericEntity<Long> {

	private static final long serialVersionUID = 5313992748232850460L;

	@Id
	@Column(name = "tsp_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "tsp_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;
	
	@ManyToOne
	@JoinColumn(name = "tsp_tcp_cd", referencedColumnName = "tcp_cd", nullable = false, updatable = false, insertable = false)
	private TipoCategoriaPrestador tipoCategoriaPrestador;
	
	public TipoSubCategoriaPrestador(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoSubCategoriaPrestador.java

// Arquivo: TipoValoresCobradosSmsru.java
// Caminho: \br\gov\ana\sarsb\model\entity\TipoValoresCobradosSmsru.java

package br.gov.ana.sarsb.model.entity;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@NoArgsConstructor
@Entity
@Table(name = "sabtp_valorescobrados", schema = "public")
@Getter
@Setter
public class TipoValoresCobradosSmsru extends GenericEntity<Long> {

	private static final long serialVersionUID = 2706870943581433135L;

	@Id
	@Column(name = "valcob_cd", nullable = false, updatable = false, insertable = false)
	private Long id;

	@Column(name = "valcob_ds", nullable = false, updatable = false, insertable = false)
	private String descricao;

	public TipoValoresCobradosSmsru(Long id) {
		this.id = id;
	}

}

// Fim do arquivo: TipoValoresCobradosSmsru.java

============================================================

PACOTE 24 - [Model] br.gov.ana.sarsb.model.enums
------------------------------------------------------------
Arquivos: 6 | Métodos: 9

// Arquivo: AcoesDocContratoMatrizEnum.java
// Caminho: \br\gov\ana\sarsb\model\enums\AcoesDocContratoMatrizEnum.java

package br.gov.ana.sarsb.model.enums;

public enum AcoesDocContratoMatrizEnum {

    AVALIACAO("Matriz de Riscos do Contrato", 1L),
    RETIFICACAO("Retificação da Última Avaliação", 2L),
    ADITIVO("Matriz de Riscos do Contrato e Aditivos com assinatura posterior 16/01/2024", 3L);

    private final String descricao;
    private final Long codigo;

    AcoesDocContratoMatrizEnum(String descricao, Long codigo) {
        this.descricao = descricao;
        this.codigo = codigo;
    }

    public String getDescricao() {
        return descricao;
    }

    public Long getCodigo() {
        return codigo;
    }

    public static AcoesDocContratoMatrizEnum get(Long codigo) {
        for (AcoesDocContratoMatrizEnum acao : values()) {
            if (acao.getCodigo() == codigo) {
                return acao;
            }
        }
        throw new IllegalArgumentException("Código inválido: " + codigo);
    }

    public static AcoesDocContratoMatrizEnum get(String descricao) {
        for (AcoesDocContratoMatrizEnum acao : values()) {
            if (acao.getDescricao().equals(descricao)) {
                return acao;
            }
        }
        throw new IllegalArgumentException("Descrição inválida: " + descricao);
    }

}


// Fim do arquivo: AcoesDocContratoMatrizEnum.java

// Arquivo: Configuracoes.java
// Caminho: \br\gov\ana\sarsb\model\enums\Configuracoes.java

package br.gov.ana.sarsb.model.enums;

public enum Configuracoes {

	OAUTH_SERVER("app.oauth.server"),
	OAUTH_CLIENT_SECRET("app.oauth.clientsecret"),
    OAUTH_CLIENT_ID("app.oauth.clientid"),
    BINARIO_E("00100110"),
    VALUE_BINARIO_E("&"),
	VOLUME_SASB("app.volume");
	
    private String value;

    private Configuracoes(String value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return value;
    }
    
}


// Fim do arquivo: Configuracoes.java

// Arquivo: SimNao.java
// Caminho: \br\gov\ana\sarsb\model\enums\SimNao.java

package br.gov.ana.sarsb.model.enums;

import lombok.Getter;

public enum SimNao {

    SIM("S"), NAO("N");

    @Getter
    private final String value;

    private SimNao(String value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return this.value;
    }

    public static SimNao toEnum(String value) {
        for(SimNao e : values()) {
            if(e.value.equals(value)) {
                return e;
            }
        }
        return null;
    }

    public String getDescricao(){
        if(value.equals("S")){
            return "Sim";
        }else{
            return "Não";
        }
    }

}


// Fim do arquivo: SimNao.java

// Arquivo: TipoEnvio.java
// Caminho: \br\gov\ana\sarsb\model\enums\TipoEnvio.java

package br.gov.ana.sarsb.model.enums;

public enum TipoEnvio {
    LINK,
    UPLOAD
}


// Fim do arquivo: TipoEnvio.java

// Arquivo: TipoPrestacaoContratoEnum.java
// Caminho: \br\gov\ana\sarsb\model\enums\TipoPrestacaoContratoEnum.java

package br.gov.ana.sarsb.model.enums;

public enum TipoPrestacaoContratoEnum {

    CONCESSAO("Concessão", 1L),
    PRESTACAO_REGIONALIZADA("Concessão - Prestação Regionalizada", 2L),
    PROGRAMA("Programa", 3L),
    PRESTACAO_DIRETA("Prestação Direta", 4L);

    private final String descricao;
    private final Long codigo;

    TipoPrestacaoContratoEnum(String descricao, Long codigo) {
        this.descricao = descricao;
        this.codigo = codigo;
    }

    public String getDescricao() {
        return descricao;
    }

    public Long getCodigo() {
        return codigo;
    }

    public static TipoPrestacaoContratoEnum get(Long codigo) {
        for (TipoPrestacaoContratoEnum acao : values()) {
            if (acao.getCodigo() == codigo) {
                return acao;
            }
        }
        throw new IllegalArgumentException("Código inválido: " + codigo);
    }

    public static TipoPrestacaoContratoEnum get(String descricao) {
        for (TipoPrestacaoContratoEnum acao : values()) {
            if (acao.getDescricao().equals(descricao)) {
                return acao;
            }
        }
        throw new IllegalArgumentException("Descrição inválida: " + descricao);
    }
}


// Fim do arquivo: TipoPrestacaoContratoEnum.java

// Arquivo: TipoServicoContratoEnum.java
// Caminho: \br\gov\ana\sarsb\model\enums\TipoServicoContratoEnum.java

package br.gov.ana.sarsb.model.enums;

public enum TipoServicoContratoEnum {

    IS_ABASTECIMENTO("Abastecimento de Água Potável", 1L),
    IS_ESGOTAMENTO("Esgotamento Sanitário", 2L),
    IS_LIMPEZA_URBANA("Limpeza Urbana", 3L),
    IS_MANEJO("Manejo de Resíduos Sólidos", 4L),
    IS_DRENAGEM("Drenagem e Manejo de Àguas Pluviais e Urbanas", 5L);

    private final String descricao;
    private final Long codigo;

    TipoServicoContratoEnum(String descricao, Long codigo) {

        this.descricao = descricao;
        this.codigo = codigo;
    }

    public String getDescricao() {
        return descricao;
    }

    public Long getCodigo() {
        return codigo;
    }


    public static TipoServicoContratoEnum get(Long codigo) {
        for (TipoServicoContratoEnum acao : values()) {
            if (acao.getCodigo() == codigo) {
                return acao;
            }
        }
        throw new IllegalArgumentException("Código inválido: " + codigo);
    }

    public static TipoServicoContratoEnum get(String descricao) {
        for (TipoServicoContratoEnum acao : values()) {
            if (acao.getDescricao().equals(descricao)) {
                return acao;
            }
        }
        throw new IllegalArgumentException("Descrição inválida: " + descricao);
    }
}


// Fim do arquivo: TipoServicoContratoEnum.java

============================================================

PACOTE 25 - [Other] br.gov.ana.sarsb
------------------------------------------------------------
Arquivos: 1 | Métodos: 0

// Arquivo: SarsbApplication.java
// Caminho: \br\gov\ana\sarsb\SarsbApplication.java

package br.gov.ana.sarsb;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SarsbApplication {

	public static void main(String[] args) {
        System.setProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "true");
		SpringApplication.run(SarsbApplication.class, args);
	}

}


// Fim do arquivo: SarsbApplication.java

============================================================

PACOTE 26 - [Other] br.gov.ana.sarsb.relatorio.apachepoi
------------------------------------------------------------
Arquivos: 10 | Métodos: 24

// Arquivo: GerarComprovanteContratoIndenizacao.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteContratoIndenizacao.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.ContratoDetalhamento;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

@Getter
@Setter
public class GerarComprovanteContratoIndenizacao extends GerarDocumentos implements Serializable {

    private static final String PATH_RELATORIOS = "/static/relatorios/docx/";
    private String caminhoUpload;

    private GerarComprovanteContratoIndenizacao(String caminhoUpload) {
        super();
        this.caminhoUpload = caminhoUpload;
    }

    public static GerarComprovanteContratoIndenizacao getInstance(String caminhoUpload) {
        return new GerarComprovanteContratoIndenizacao(caminhoUpload);
    }

    public void gerarReciboContratos(ReciboDTO recibo, ContratoDetalhamento contratoDetalhamento,
                                     AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) {
        try {
            File pasta = new File(caminhoUpload);
            if (!pasta.exists()) {
                pasta.mkdirs();
            }

            String nomeBase = "Recibo_Contrato_" + System.currentTimeMillis();
            String pathWord = caminhoUpload + "/" + nomeBase + ".docx";
            String pathPdf = caminhoUpload + "/" + nomeBase + ".pdf";

            try (InputStream templateStream = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-indenizacao-Contrato.docx")) {
                if (templateStream == null) {
                    throw new FileNotFoundException("Template Word não encontrado: " + PATH_RELATORIOS + "comprovante-indenizacao-Contrato.docx");
                }

                XWPFDocument document = new XWPFDocument(templateStream);

                Map<String, String> dadosParaSubstituicao = carregarDadosContrato(recibo, contratoDetalhamento, agenciaReguladora, protocoloEnvio);
                substituirCamposTexto(document, dadosParaSubstituicao);
                // Removido gerarTabelaContrato

                try (FileOutputStream wordOut = new FileOutputStream(pathWord)) {
                    document.write(wordOut);
                }

                try (InputStream wordInputStream = new FileInputStream(pathWord);
                     OutputStream pdfOutputStream = new FileOutputStream(pathPdf)) {

                    XWPFDocument wordDoc = new XWPFDocument(wordInputStream);
                    PdfOptions options = PdfOptions.create();
                    PdfConverter.getInstance().convert(wordDoc, pdfOutputStream, options);
                }

                recibo.setRecibo(new File(pathPdf));
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Erro ao gerar recibo de contrato", e);
        }
    }

    private Map<String, String> carregarDadosContrato(ReciboDTO reciboDTO, ContratoDetalhamento contrato,
                                                      AgenciaReguladora agencia, LocalDateTime dataEnvioProtocolo) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        Map<String, String> dados = new HashMap<>();
        dados.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        dados.put("@@dt_protocolo@@", dataEnvioProtocolo.format(formatter));
        dados.put("@@ano_coleta@@", contrato.getAnoColetaReferencia() != null ? contrato.getAnoColetaReferencia().toString() : "");

        dados.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        dados.put("@@ent_nome@@", agencia.getNome());
        dados.put("@@ent_sigla@@", agencia.getSigla());
        dados.put("@@ent_url_site@@", agencia.getUrlSite());
        dados.put("@@ent_lei_criacad@@", agencia.getLeiCriacao() != null ? agencia.getLeiCriacao() : "");
        dados.put("@@data_inicio_operacao@@", ConverterUtil.converterDateToString(agencia.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        return dados;
    }

    private void substituirCamposTexto(XWPFDocument document, Map<String, String> replacements) {
        document.getParagraphs().forEach(paragraph -> {
            replacements.forEach((placeholder, value) -> {
                if (paragraph.getText().contains(placeholder)) {
                    paragraph.getRuns().forEach(run -> {
                        String text = run.getText(0);
                        if (text != null && text.contains(placeholder)) {
                            run.setText(text.replace(placeholder, value), 0);
                        }
                    });
                }
            });
        });

        document.getTables().forEach(table -> {
            table.getRows().forEach(row -> {
                row.getTableCells().forEach(cell -> {
                    cell.getParagraphs().forEach(paragraph -> {
                        replacements.forEach((placeholder, value) -> {
                            if (paragraph.getText().contains(placeholder)) {
                                paragraph.getRuns().forEach(run -> {
                                    String text = run.getText(0);
                                    if (text != null && text.contains(placeholder)) {
                                        run.setText(text.replace(placeholder, value), 0);
                                    }
                                });
                            }
                        });
                    });
                });
            });
        });
    }
}


// Fim do arquivo: GerarComprovanteContratoIndenizacao.java

// Arquivo: GerarComprovanteIndenizacao.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteIndenizacao.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.model.enums.SimNao;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.*;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class GerarComprovanteIndenizacao extends GerarDocumentos implements Serializable {

    private static final String PATH_RELATORIOS = "/static/relatorios/docx/";

    @Getter
    @Setter
    private String caminhoUpload;

    private GerarComprovanteIndenizacao(String caminhoUpload) {
        super();
        this.caminhoUpload = caminhoUpload;
    }

    public static GerarComprovanteIndenizacao getInstance(String caminhoUpload) {
        return new GerarComprovanteIndenizacao(caminhoUpload);
    }

    public void replaceWordContratos(ReciboDTO recibo, AtoNormativoDetalhado atoNormativoDetalhado, AgenciaReguladora agenciaReguladora,
                                     LocalDateTime protocoloEnvio) {
        String outputFilePdf = caminhoUpload + "/Recibo_Contratos.pdf";

        try (InputStream templateStream = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-indenizacao2.docx")) {
            if (templateStream == null) {
                throw new FileNotFoundException("Template Word não encontrado no caminho: " + PATH_RELATORIOS + "comprovante-indenizacao2.docx");
            }

            XWPFDocument document = new XWPFDocument(templateStream);

            Map<String, String> mapReplacement = carregarDadosDetalhadoWordContratos(recibo, atoNormativoDetalhado, agenciaReguladora, protocoloEnvio);

            replacePlaceholders(document, mapReplacement);
            substituirTabelaAtos(document, atoNormativoDetalhado); // <<<< adiciona a tabela no lugar do @@tabelaAtos@@

            try (OutputStream outPdf = new FileOutputStream(outputFilePdf)) {
                PdfOptions options = PdfOptions.create();
                PdfConverter.getInstance().convert(document, outPdf, options);
            }

            recibo.setRecibo(new File(outputFilePdf));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> carregarDadosDetalhadoWordContratos(ReciboDTO reciboDTO, AtoNormativoDetalhado atoNormativoDetalhado,
                                                                    AgenciaReguladora agenciaReguladora, LocalDateTime dataEnvioProtocolo) {

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        HashMap<String, String> mapaAtos = new HashMap<>();
        mapaAtos.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaAtos.put("@@dt_protocolo@@", dataEnvioProtocolo.format(formatter));
        mapaAtos.put("ano_coleta", String.valueOf(dataEnvioProtocolo.getYear()));

        mapaAtos.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaAtos.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaAtos.put("@@ent_sigla@@", agenciaReguladora.getSigla());
        mapaAtos.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaAtos.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao() : " ");
        mapaAtos.put("data", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        mapaAtos.put("@@quest_possui_ato@@", atoNormativoDetalhado.getDefinicaoBensReserviveis() ?
                SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());

        mapaAtos.put("@@quest_revisado@@", atoNormativoDetalhado.getDefinicaoMetodologia() ?
                SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());

        mapaAtos.put("@@quest_alterado@@", String.valueOf(atoNormativoDetalhado.getAnoColetaReferencia()));

        mapaAtos.put("@@quest_acrescentou_riscos@@",
                atoNormativoDetalhado.getDefinicaoBensReserviveisExemplo() != null ? atoNormativoDetalhado.getDefinicaoBensReserviveisExemplo() : "");

        mapaAtos.put("@@quest_observou_procedimentos@@",
                atoNormativoDetalhado.getMetodologia() != null ? atoNormativoDetalhado.getMetodologia() : "");

        mapaAtos.put("@@quest_Link_diario_oficial@@",
                atoNormativoDetalhado.getLinkDiarioOficial() != null ? atoNormativoDetalhado.getLinkDiarioOficial() : "");

        return mapaAtos;
    }

    private void replacePlaceholders(XWPFDocument document, Map<String, String> replacements) {
        document.getParagraphs().forEach(paragraph -> {
            replacements.forEach((placeholder, value) -> {
                if (paragraph.getText().contains(placeholder)) {
                    paragraph.getRuns().forEach(run -> {
                        String text = run.getText(0);
                        if (text != null && text.contains(placeholder)) {
                            run.setText(text.replace(placeholder, value), 0);
                        }
                    });
                }
            });
        });

        document.getTables().forEach(table -> {
            table.getRows().forEach(row -> {
                row.getTableCells().forEach(cell -> {
                    cell.getParagraphs().forEach(paragraph -> {
                        replacements.forEach((placeholder, value) -> {
                            if (paragraph.getText().contains(placeholder)) {
                                paragraph.getRuns().forEach(run -> {
                                    String text = run.getText(0);
                                    if (text != null && text.contains(placeholder)) {
                                        run.setText(text.replace(placeholder, value), 0);
                                    }
                                });
                            }
                        });
                    });
                });
            });
        });
    }

    private void substituirTabelaAtos(XWPFDocument document, AtoNormativoDetalhado atoNormativoDetalhado) {
        List<XWPFParagraph> paragraphs = document.getParagraphs();
        for (int i = 0; i < paragraphs.size(); i++) {
            XWPFParagraph paragraph = paragraphs.get(i);
            if (paragraph.getText().contains("@@tabelaAtos@@")) {
                // Remove o parágrafo que contém @@tabelaAtos@@
                int pos = document.getPosOfParagraph(paragraph);
                document.removeBodyElement(pos);

                // Agora cria parágrafos simples no lugar
                criarParagrafoSimples(document, "Definição de Bens Reservíveis: " + (atoNormativoDetalhado.getDefinicaoBensReserviveis() ? "Sim" : "Não"));
                criarParagrafoSimples(document, "Definição de Metodologia: " + (atoNormativoDetalhado.getDefinicaoMetodologia() ? "Sim" : "Não"));
                criarParagrafoSimples(document, "Ano Coleta Referência: " + atoNormativoDetalhado.getAnoColetaReferencia());
                criarParagrafoSimples(document, "Exemplo Bens Reservíveis: " + (atoNormativoDetalhado.getDefinicaoBensReserviveisExemplo() != null
                        ? atoNormativoDetalhado.getDefinicaoBensReserviveisExemplo() : "-"));
                criarParagrafoSimples(document, "Metodologia: " + (atoNormativoDetalhado.getMetodologia() != null
                        ? atoNormativoDetalhado.getMetodologia() : "-"));
                criarParagrafoSimples(document, "Link Diário Oficial: " + (atoNormativoDetalhado.getLinkDiarioOficial() != null
                        ? atoNormativoDetalhado.getLinkDiarioOficial() : "-"));

                break;
            }
        }
    }

    // Método auxiliar para criar parágrafo simples
    private void criarParagrafoSimples(XWPFDocument document, String texto) {
        XWPFParagraph newParagraph = document.createParagraph();
        newParagraph.createRun().setText(texto);
    }



////contrqto///

    public void replaceWordContratosDetalhado(ReciboDTO recibo, ContratoDetalhamento contratoDetalhamento, AgenciaReguladora agenciaReguladora, LocalDateTime dataEnvio, String codigoInterno) {
        String outputFilePdf = caminhoUpload + "/Recibo_Contratos.pdf";

        try (InputStream templateStream = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-indenizacao-Contrato.docx")) {
            if (templateStream == null) {
                throw new FileNotFoundException("Template Word não encontrado no caminho: " + PATH_RELATORIOS + "comprovante-indenizacao-Contrato.docx");
            }

            XWPFDocument document = new XWPFDocument(templateStream);

            Map<String, String> mapReplacement = carregarDadosDetalhadoWordContratosDetalhado(recibo, contratoDetalhamento, agenciaReguladora, dataEnvio);

            replacePlaceholders(document, mapReplacement);

            substituirTabelaContratoDetalhado(document,
                    contratoDetalhamento,codigoInterno ); // <<<< adiciona a tabela no lugar do @@tabelaAtos@@

            try (OutputStream outPdf = new FileOutputStream(outputFilePdf)) {
                PdfOptions options = PdfOptions.create();
                PdfConverter.getInstance().convert(document, outPdf, options);
            }

            recibo.setRecibo(new File(outputFilePdf));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private Map<String, String> carregarDadosDetalhadoWordContratosDetalhado(ReciboDTO reciboDTO, ContratoDetalhamento contratoDetalhamento,
                                                                    AgenciaReguladora agenciaReguladora, LocalDateTime dataEnvioProtocolo) {

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        Map<String, String> dados = new HashMap<>();
        dados.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        dados.put("@@dt_protocolo@@", dataEnvioProtocolo.format(formatter));
        dados.put("@@ano_coleta@@", contratoDetalhamento.getAnoColetaReferencia() != null ? contratoDetalhamento.getAnoColetaReferencia().toString() : "");

        dados.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        dados.put("@@ent_nome@@", agenciaReguladora.getNome());
        dados.put("@@ent_sigla@@", agenciaReguladora.getSigla());
        dados.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        dados.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao() : "");
        dados.put("@@data@@", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        return dados;
    }



    private void substituirTabelaContratoDetalhado(XWPFDocument document, ContratoDetalhamento contratoDetalhamento, String codigoInterno) {



        List<XWPFParagraph> paragraphs = document.getParagraphs();
        for (int i = 0; i < paragraphs.size(); i++) {
            XWPFParagraph paragraph = paragraphs.get(i);
            if (paragraph.getText().contains("@@tabelacontratos@@")) {
                int pos = document.getPosOfParagraph(paragraph);
                document.removeBodyElement(pos);
                criarParagrafoSimples(document, "ID Contrato", codigoInterno);
                criarParagrafoSimples(document, "Ano Coleta", contratoDetalhamento.getAnoColetaReferencia());
                criarParagrafoSimples(document, "Definição Bens Reservíveis", contratoDetalhamento.getConDetDefinicaoBensReserviveis() != null ? (contratoDetalhamento.getConDetDefinicaoBensReserviveis() ? "Sim" : "Não") : "-");
                criarParagrafoSimples(document, "Definição Metodologia", contratoDetalhamento.getConDetDefinicaoMetodologia() != null ? (contratoDetalhamento.getConDetDefinicaoMetodologia() ? "Sim" : "Não") : "-");
                criarParagrafoSimples(document, "Exemplo Bens Reservíveis", contratoDetalhamento.getConDetDefinicaoBensReserviveisExemplo());
                criarParagrafoSimples(document, "Possui Exemplos", contratoDetalhamento.getConDetPossuiExemplos() != null ? (contratoDetalhamento.getConDetPossuiExemplos() ? "Sim" : "Não") : "-");
                criarParagrafoSimples(document, "Exemplos",
                        Optional.ofNullable(contratoDetalhamento.getConDetExemplos())
                                .filter(s -> !"null".equalsIgnoreCase(s.trim()))
                                .orElse(""));

                criarParagrafoSimples(document, "Metodologia", contratoDetalhamento.getConDetMetodologia());
                criarParagrafoSimples(document, "Definição Bens Valor Justo", contratoDetalhamento.getConDetDefinicaoBensReserviveisJusto() != null ? (contratoDetalhamento.getConDetDefinicaoBensReserviveisJusto() ? "Sim" : "Não") : "-");
                criarParagrafoSimples(document, "Metodologia Valor Justo", contratoDetalhamento.getConDetMetodologiaValorJusto() != null ? (contratoDetalhamento.getConDetMetodologiaValorJusto() ? "Sim" : "Não") : "-");
                criarParagrafoSimples(document, "Artigo Contratual Bens Reversíveis", contratoDetalhamento.getConDetArtigoContratualBensReversiveis());
                criarParagrafoSimples(document, "Exemplos Contrato Bens Reversíveis",
                            Optional.ofNullable(contratoDetalhamento.getConDetExemplosContratualBensReversiveis())
                                    .filter(s -> !"null".equalsIgnoreCase(s.trim()))
                                    .orElse(""));
                criarParagrafoSimples(document, "Data Inclusão", contratoDetalhamento.getConDetDataInclusao() != null ? contratoDetalhamento.getConDetDataInclusao().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")) : "-");

                break;
            }
        }
    }
    private void criarParagrafoSimples(XWPFDocument document, String campo, Object valor) {
        XWPFParagraph newParagraph = document.createParagraph();
        XWPFRun run = newParagraph.createRun();
        run.setBold(true);
        run.setText(campo + ": ");

        run = newParagraph.createRun();
        run.setBold(false);
        run.setText(valor == null ? "" : valor.toString());
    }






}


// Fim do arquivo: GerarComprovanteIndenizacao.java

// Arquivo: GerarComprovanteReciboAgencia.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteReciboAgencia.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import lombok.Getter;
import lombok.Setter;

public class GerarComprovanteReciboAgencia extends GerarDocumentos implements Serializable {

	private static final long serialVersionUID = -424932048930266230L;

	@Getter
	@Setter
	private String caminhoUpload;

	private GerarComprovanteReciboAgencia(String caminhoUpload) {
		super();
		this.caminhoUpload = caminhoUpload;
	}

	public static GerarComprovanteReciboAgencia getInstance(String caminhoUpload) {
		return new GerarComprovanteReciboAgencia(caminhoUpload);
	}

	@SuppressWarnings("resource")
	public void replaceWord(ReciboDTO reciboDTO, boolean isNorma2) {
		String outputFileDoc = caminhoUpload + "/Recibo Agencia.docx";
		String outputFilePdf = caminhoUpload + "/Recibo Agencia.pdf";
		try {
			
			String filePath = isNorma2 ? "/static/relatorios/docx/comprovante-envio-norma-2.docx" 
					: "/static/relatorios/docx/comprovante-envio-agencia.docx";
			InputStream caminho = getClass().getResourceAsStream(filePath);
			
			XWPFDocument word = new XWPFDocument(caminho);
			Map<String, String> mapReplacement = carrageDadosWord(reciboDTO);
			replaceParagraphs(word.getParagraphs(), mapReplacement);
			OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
			word.write(arquivoDoc);
			arquivoDoc.flush();
			arquivoDoc.close();

			// CONVERTER PARA PDF
			OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
			InputStream is = new FileInputStream(outputFileDoc);
			XWPFDocument document = new XWPFDocument(is);
			PdfOptions options = PdfOptions.create();
			PdfConverter.getInstance().convert(document, arquivoPdf, options);

			reciboDTO.setRecibo(new File(outputFilePdf));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private Map<String, String> carrageDadosWord(ReciboDTO reciboDTO) {
		HashMap<String, String> mapa = new HashMap<>();
		mapa.put("@@nm@@", reciboDTO.getNomeTitular());
		mapa.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
		mapa.put("@@dt_cadastro@@", reciboDTO.getDataRegistro());
		mapa.put("@@nu_recibo@@", reciboDTO.getNumeroRecibo());
		return mapa;
	}

}


// Fim do arquivo: GerarComprovanteReciboAgencia.java

// Arquivo: GerarComprovanteReciboAtoNormativo.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteReciboAtoNormativo.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.enums.SimNao;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import java.io.*;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class GerarComprovanteReciboAtoNormativo extends GerarDocumentos implements Serializable {

    private static final String PATH_RELATORIOS = "/static/relatorios/docx/";

    @Getter
    @Setter
    private String caminhoUpload;

    private GerarComprovanteReciboAtoNormativo(String caminhoUpload) {
        super();
        this.caminhoUpload = caminhoUpload;
    }

    public static GerarComprovanteReciboAtoNormativo getInstance(String caminhoUpload) {
        return new GerarComprovanteReciboAtoNormativo(caminhoUpload);
    }


    @SuppressWarnings("resource")
    public void replaceWordAto(ReciboDTO recibo, AtoNormativoEriDTO atoNormativoEriDTO, AgenciaReguladora agenciaReguladora) {
        String outputFileDoc = caminhoUpload + "/Recibo Ato.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Ato.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS +  "comprovante-envio-ato-normativo-detalhado.docx");
            XWPFDocument wordAto = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWord(recibo, atoNormativoEriDTO, agenciaReguladora);
            newReplaceParagraphs(wordAto.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordAto.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            // CONVERTER PARA PDF
            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> carregarDadosDetalhadoWord(ReciboDTO reciboDTO, AtoNormativoEriDTO atoNormativoEriDTO, AgenciaReguladora agenciaReguladora) {
        HashMap<String, String> mapaAto = new HashMap<>();
        mapaAto.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo() + "/" + atoNormativoEriDTO.getAnoReferencia().toString());
        mapaAto.put("@@ano_referencia@@", atoNormativoEriDTO.getAnoReferencia().toString());
        mapaAto.put("@@dt_protocolo@@", ConverterUtil.converterDateToString(new Date(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA_HH_MM_SS));
        mapaAto.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaAto.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaAto.put("@@ent_sigla@@", agenciaReguladora.getSigla());

        mapaAto.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaAto.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao() : " ");
        mapaAto.put("@@ent_data_inicio@@", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA_HH_MM_SS));


        mapaAto.put("@@quest_possui_ato@@", atoNormativoEriDTO.getPossuiAtoNormativo()  ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());
        mapaAto.put("@@quest_revisado@@", atoNormativoEriDTO.getAtoRevisado() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());
        mapaAto.put("@@quest_alterado@@", atoNormativoEriDTO.getAtoAlterouMatriz() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());
        mapaAto.put("@@quest_acrescentou_riscos@@", atoNormativoEriDTO.getAcrescentouRiscos() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());
        mapaAto.put("@@quest_observou_procedimentos@@", atoNormativoEriDTO.getObservouProcedimentos() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());
        return mapaAto;
    }
}


// Fim do arquivo: GerarComprovanteReciboAtoNormativo.java

// Arquivo: GerarComprovanteReciboConformidade.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteReciboConformidade.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicosReguladosDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.CondicaoAtividade;
import br.gov.ana.sarsb.model.entity.ConformidadeEntidade;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class GerarComprovanteReciboConformidade extends GerarDocumentos implements Serializable {


    private static final String PATH_RELATORIOS = "/static/relatorios/docx/";

    @Getter
    @Setter
    private String caminhoUpload;

    private GerarComprovanteReciboConformidade(String caminhoUpload) {
        super();
        this.caminhoUpload = caminhoUpload;
    }

    public static GerarComprovanteReciboConformidade getInstance(String caminhoUpload) {
        return new GerarComprovanteReciboConformidade(caminhoUpload);
    }


    @SuppressWarnings("resource")
    public void replaceWordCondicaoGeral(ReciboDTO recibo, ConformidadeEntidade conformidadeEntidade,
                                         AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) {
        String outputFileDoc = caminhoUpload + "/Recibo Conformidade.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Conformidade.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-envio-conformidade.docx");
            XWPFDocument wordConformidade = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWord(recibo, conformidadeEntidade,
                    agenciaReguladora, protocoloEnvio);
            replaceParagraphs(wordConformidade.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordConformidade.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> carregarDadosDetalhadoWord(ReciboDTO reciboDTO, ConformidadeEntidade conformidadeEntidade,
                                                           AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) {
        HashMap<String, String> mapaConformidade = new HashMap<>();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        mapaConformidade.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaConformidade.put("ano_referencia", conformidadeEntidade.getAnoColeta().toString());
        mapaConformidade.put("@@dt_protocolo@@", (protocoloEnvio.format(formatter)));

        mapaConformidade.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaConformidade.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaConformidade.put("@@ent_sigla@@", agenciaReguladora.getSigla());

        mapaConformidade.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaConformidade.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao() : " ");
        mapaConformidade.put("data_inicio", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        mapaConformidade.put("@@quest_possui_ato@@", conformidadeEntidade.getIndicativoAceite() ? "Sim" : "Não");

        if (!conformidadeEntidade.getIndicativoAceite()) {
            mapaConformidade.put("Motivo:", "Motivo:");
            mapaConformidade.put("valor_m", conformidadeEntidade.getDescricaoMotivo());
        } else {
            mapaConformidade.put("Motivo:", "");
            mapaConformidade.put("valor_m", "");
        }

        return mapaConformidade;
    }


    @SuppressWarnings("resource")
    public void replaceWordCondicaoGeralSegundaAba(ReciboDTO recibo, ConformidadeEntidade conformidadeEntidade,
                                                   AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio, List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS, List<ConformidadeServicoDTO> conformidadeServicoDTOS, List<CondicaoAtividade> condicaoAtividades) {
        String outputFileDoc = caminhoUpload + "/Recibo Conformidade.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Conformidade.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-envio-conformidade-condicao-geral.docx");
            XWPFDocument wordConformidade = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWord(recibo, conformidadeEntidade,
                    agenciaReguladora, protocoloEnvio, conformidadeEntidadeServicosDTOS, conformidadeServicoDTOS, condicaoAtividades);

            replaceParagraphs(wordConformidade.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordConformidade.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> carregarDadosDetalhadoWord(ReciboDTO reciboDTO, ConformidadeEntidade conformidadeEntidade,
                                                           AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio, List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS, List<ConformidadeServicoDTO> conformidadeServicoDTOS, List<CondicaoAtividade> condicaoAtividades) {

        HashMap<String, String> mapaConformidade = new HashMap<>();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        mapaConformidade.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaConformidade.put("ano_referencia", conformidadeEntidade.getAnoColeta().toString());
        mapaConformidade.put("@@dt_protocolo@@", (protocoloEnvio.format(formatter)));

        //DADOS DE IDENTIFICAÇÃO DA ENTIDADE
        mapaConformidade.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaConformidade.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaConformidade.put("@@ent_sigla@@", agenciaReguladora.getSigla());

        mapaConformidade.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaConformidade.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao() : " ");
        mapaConformidade.put("data_inicio", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        //DADOS INFORMADOS DURANTE O CADASTRAMENTO
        mapaConformidade.put("@@quest_possui_ato@@", conformidadeEntidade.getIndicativoAceite() ? "Sim" : "Não");

        if (!conformidadeEntidade.getIndicativoAceite()) {
            mapaConformidade.put("Motivo:", "Motivo:");
            mapaConformidade.put("valor_m", conformidadeEntidade.getDescricaoMotivo());
        } else {
            mapaConformidade.put("Motivo:", "");
            mapaConformidade.put("valor_m", "");
        }

        StringBuilder tabelaConformidadesCadastradas = new StringBuilder();
        StringBuilder tabelaIdentificacaoEntidade = new StringBuilder();
        int contador = 0;


        for (ConformidadeServicoDTO conformidadeServicoDTO : conformidadeServicoDTOS) {


            tabelaConformidadesCadastradas.append("UF: ").append(conformidadeServicoDTO.getMunicipioIbge().getUf()).append("\n");
            tabelaConformidadesCadastradas.append("Município: ").append(conformidadeServicoDTO.getMunicipioIbge().getNomeMunicipio()).append("\n\n\n\n\n");


            tabelaConformidadesCadastradas.append("Conformidade dos Serviço Público de Limpeza Urbana(SLU) com a NR da ANA\n\n");

            tabelaConformidadesCadastradas.append("Atividade ").append(" | ");
            tabelaConformidadesCadastradas.append("Prestador").append(" | ");
            tabelaConformidadesCadastradas.append("Periodo").append(" | ");
            tabelaConformidadesCadastradas.append("Conformidade das atividades").append(" | \n\n");

            for (ConformidadeServicosReguladosDTO conformidadeServicosReguladosDTO: conformidadeEntidadeServicosDTOS.get(contador).getAtividades()) {
                for (CondicaoAtividade condicaoAtividade : condicaoAtividades) {
                    if (conformidadeServicosReguladosDTO.getCodigoServico() == 3 && condicaoAtividade.getId().equals(conformidadeServicosReguladosDTO.getId())) {
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getDescricaoAtividade()).append(" | ");
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getNomePrestador().trim().isEmpty()? "Não informado" : conformidadeServicosReguladosDTO.getNomePrestador()).append(" | ");
                        if (conformidadeServicosReguladosDTO.getDatainicioServico() != null || conformidadeServicosReguladosDTO.getDataFimServico() != null) {
                            tabelaConformidadesCadastradas.append(ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" - ")
                                    .append(ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" | ");

                        } else {
                            tabelaConformidadesCadastradas.append("Não informado").append(" | ");
                        }
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getConformidade().equals(false) ? "Não conforme" : "Conforme").append(" | \n\n");
                    }

                }
            }

            if(conformidadeServicoDTO.getDescricaoInconformidadesLu() != null && !conformidadeServicoDTO.getDescricaoInconformidadesLu().equals("")) {
                tabelaConformidadesCadastradas.append("Descrição das inconformidades: ").append(conformidadeServicoDTO.getDescricaoInconformidadesLu());
            }

            tabelaConformidadesCadastradas.append("\n\n\n\n\n");

            tabelaConformidadesCadastradas.append("Conformidade dos Serviço Público de Manejo de Resíduos Sólidos Urbanos(SMRSU) com a NR da ANA\n\n");

            tabelaConformidadesCadastradas.append("Atividade ").append(" | ");
            tabelaConformidadesCadastradas.append("Prestador").append(" | ");
            tabelaConformidadesCadastradas.append("Periodo").append(" | ");
            tabelaConformidadesCadastradas.append("Conformidade das atividades").append(" | \n\n");

            for (ConformidadeServicosReguladosDTO conformidadeServicosReguladosDTO: conformidadeEntidadeServicosDTOS.get(contador).getAtividades()) {
                for (CondicaoAtividade condicaoAtividade : condicaoAtividades) {
                    if (conformidadeServicosReguladosDTO.getCodigoServico() == 4 && condicaoAtividade.getId().equals(conformidadeServicosReguladosDTO.getId())) {
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getDescricaoAtividade()).append(" | ");
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getNomePrestador().trim().equals("") ? "Não informado" : conformidadeServicosReguladosDTO.getNomePrestador()).append(" | ");

                        if (conformidadeServicosReguladosDTO.getDatainicioServico() != null || conformidadeServicosReguladosDTO.getDataFimServico() != null) {
                            tabelaConformidadesCadastradas.append(ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" - ")
                                    .append(ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" | ");

                        } else {
                            tabelaConformidadesCadastradas.append("Não informado").append(" | ");
                        }
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getConformidade().equals(false) ? "Não conforme" : "Conforme").append("|\n\n");
                    }
                }
            }
            tabelaConformidadesCadastradas.append("\n\n\n");

            if (conformidadeServicoDTO.getDescricaoInconformidadesMrsu() != null && !conformidadeServicoDTO.getDescricaoInconformidadesMrsu().equals("") ) {
                tabelaConformidadesCadastradas.append("Descrição das inconformidades: ").append(conformidadeServicoDTO.getDescricaoInconformidadesMrsu()).append("\n\n");
            }
            tabelaConformidadesCadastradas.append("__________________________________________________________________\n\n");

            contador++;
        }

        mapaConformidade.put("@@tabelaContrato@@", tabelaConformidadesCadastradas.toString());
        mapaConformidade.put("tabelaIndentificaoEntidade", tabelaIdentificacaoEntidade.toString());


        return mapaConformidade;

    }



}

// Fim do arquivo: GerarComprovanteReciboConformidade.java

// Arquivo: GerarComprovanteReciboMatrizDeRiscos.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteReciboMatrizDeRiscos.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ContratoMatrizRiscoDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.enums.SimNao;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class GerarComprovanteReciboMatrizDeRiscos extends GerarDocumentos implements Serializable {


    private static final String PATH_RELATORIOS = "/static/relatorios/docx/";

    @Getter
    @Setter
    private String caminhoUpload;

    private GerarComprovanteReciboMatrizDeRiscos(String caminhoUpload) {
        super();
        this.caminhoUpload = caminhoUpload;
    }

    public static GerarComprovanteReciboMatrizDeRiscos getInstance(String caminhoUpload) {
        return new GerarComprovanteReciboMatrizDeRiscos(caminhoUpload);
    }


    @SuppressWarnings("resource")
    public void replaceWordAto(ReciboDTO recibo, AtoNormativoEriDTO atoNormativoEriDTO,
                               AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) {
        String outputFileDoc = caminhoUpload + "/Recibo Ato.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Ato.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS +  "comprovante-envio-ato-normativo-detalhado.docx");
            XWPFDocument wordAto = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWord(recibo, atoNormativoEriDTO, agenciaReguladora, protocoloEnvio);
            replaceParagraphs(wordAto.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordAto.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            // CONVERTER PARA PDF
            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> carregarDadosDetalhadoWord(ReciboDTO reciboDTO, AtoNormativoEriDTO atoNormativoEriDTO,
                                                           AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) {
        HashMap<String, String> mapaAto = new HashMap<>();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");


        mapaAto.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaAto.put("@@ano_referencia@@", atoNormativoEriDTO.getAnoReferencia().toString());
        mapaAto.put("@@dt_protocolo@@", (protocoloEnvio.format(formatter).toString()));

        mapaAto.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaAto.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaAto.put("@@ent_sigla@@", agenciaReguladora.getSigla());

        mapaAto.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaAto.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao()  : " " );
        mapaAto.put("@@ent_data_inicio@@", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));


        mapaAto.put("@@quest_possui_ato@@", (atoNormativoEriDTO.getPossuiAtoNormativo() != null) ? atoNormativoEriDTO.getPossuiAtoNormativo() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao() : " " );
        mapaAto.put("@@quest_revisado@@", (atoNormativoEriDTO.getAtoRevisado() != null) ? atoNormativoEriDTO.getAtoRevisado() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao() : "Não se aplica" );

        mapaAto.put("@@quest_alterado@@", (atoNormativoEriDTO.getAtoAlterouMatriz() != null) ? atoNormativoEriDTO.getAtoAlterouMatriz() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao() : " ");
        mapaAto.put("@@quest_acrescentou_riscos@@", (atoNormativoEriDTO.getAcrescentouRiscos() != null) ? atoNormativoEriDTO.getAcrescentouRiscos() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao() : " " );
        mapaAto.put("@@quest_observou_procedimentos@@", (atoNormativoEriDTO.getObservouProcedimentos() != null) ? atoNormativoEriDTO.getObservouProcedimentos() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao() : " ");

        return mapaAto;
    }


    public void replaceWordContratos(ReciboDTO recibo, AgenciaReguladora agenciaReguladora,
                                     List<ContratoMatrizRiscoDTO> listaContratos, LocalDateTime dataEnvioProtocolo) {
        String outputFileDoc = caminhoUpload + "/Recibo Contratos.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Contratos.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS +  "comprovante-envio-contratos-comprovante-matriz-riscos.docx");
            XWPFDocument wordAto = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWordContratos(recibo, agenciaReguladora, listaContratos, dataEnvioProtocolo);
            replaceParagraphs(wordAto.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordAto.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            // CONVERTER PARA PDF
            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private Map<String, String> carregarDadosDetalhadoWordContratos(ReciboDTO reciboDTO, AgenciaReguladora agenciaReguladora,
                                                                    List<ContratoMatrizRiscoDTO> listaContratos, LocalDateTime dataEnvioProtocolo ) {


        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        HashMap<String, String> mapaContratos = new HashMap<>();
        mapaContratos.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaContratos.put("@@dt_protocolo@@",  (dataEnvioProtocolo.format(formatter).toString()));
        mapaContratos.put("@@ano_referencia@@", String.valueOf(dataEnvioProtocolo.getYear()));


        //DADOS DE IDENTIFICACAO DA ENTIDADE
        mapaContratos.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaContratos.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaContratos.put("@@ent_sigla@@", agenciaReguladora.getSigla());
        mapaContratos.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaContratos.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao()  : " " );
        mapaContratos.put("@@ent_data_inicio@@", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        StringBuilder tabelaContrato = new StringBuilder();

        for (ContratoMatrizRiscoDTO contrato : listaContratos) {

            String servicos = contrato.getIsServicoAmbos() ? "Abastecimento de Água, Esgotamento Sanitário" :
                    contrato.getIsServicoEsgotamento() ? "Esgotamento Sanitário" :
                            contrato.getIsServicoAbastecimento() ? "Abastecimento de Água" : " ";

            String atividades = "";

            if (contrato.getIsServicoAmbos() || contrato.getIsServicoEsgotamento()) {
                if (contrato.getIsColetaEsgoto()) {
                    atividades = atividades.concat("Coleta; ");
                }
                if (contrato.getIsTratamentoEsgoto()) {
                    atividades = atividades.concat("Tratamento; ");
                }
                if (!contrato.getIsColetaEsgoto() && !contrato.getIsTratamentoEsgoto()) {
                    atividades = atividades.concat("Disposição final adequados de efluentes e resíduos; ");
                }
            }
            if (contrato.getIsServicoAmbos() || contrato.getIsServicoAbastecimento()) {
                if (contrato.getIsProducaoAguaPotavel()) {
                    atividades = atividades.concat("Produção de água potável; ");
                }
                if (contrato.getIsDistribuicaoAguaPotavel()) {
                    atividades = atividades.concat("Distribuição de água potável; ");
                }
            }


            StringBuilder ufs = new StringBuilder();
            for (Municipio m : contrato.getMunicipios()) {
                ufs.append(m.getNome()).append("(").append(m.getSiglaUF()).append("); ");
            }
            boolean existeCicloTarifario = contrato.getTipoPrestacao().equals("Programa") && (contrato.getIsContratoProgramaSeguindoNR()!= null && !contrato.getIsContratoProgramaSeguindoNR());

            tabelaContrato.append("Prestador: ").append(contrato.getPrestador().getNome()).append("\n")
                    .append("CNPJ do Prestador: ").append(contrato.getPrestador().getCnpj() != null ? contrato.getPrestador().getCnpj() : " ").append("\n")
                    .append("Identificação do Contrato: ").append(contrato.getIdentificacaoContrato() != null ? contrato.getIdentificacaoContrato() : " ").append("\n")
                    .append("Código Interno do Contrato: ").append(contrato.getCodigoInterno() != null ? contrato.getCodigoInterno() : " ").append("\n")
                    .append("Serviço: ").append(servicos).append("\n")
                    .append("Atividades: ").append(atividades).append("\n")
                    .append("Data de Assinatura do Contrato: ").append(ConverterUtil.converterDateToString(contrato.getDataAssinatura(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA)).append("\n")
                    .append("Prazo de Vigência do Contrato: ").append(contrato.getPrazoVigencia()).append("\n")
                    .append("Data de Delegação: ").append(ConverterUtil.converterDateToString(contrato.getDataDelegacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA)).append("\n")
                    .append("Tipo de Contrato: ").append(contrato.getTipoPrestacao()).append("\n")
                    .append("Documentos Avaliados: ").append(contrato.getAcao().getDescricao());


            if (contrato.getTipoPrestacao().equals("Programa")) {
                tabelaContrato.append("O contrato de programa deve seguir a NR 5/2024 neste ano? ").append((contrato.getIsContratoProgramaSeguindoNR() != null) ? (contrato.getIsContratoProgramaSeguindoNR() ? "Sim" : "Não") : " ").append("\n");
            }

            if (existeCicloTarifario) {
                tabelaContrato.append("Quando inicia o ciclo tarifário? ").append(ConverterUtil.converterDateToString(contrato.getAnoCicloTarifario(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA)).append("\n");
            }

            tabelaContrato.append("\n\n\n");



            tabelaContrato.append("Município(UF): ").append(ufs).append("\n");

            if(!existeCicloTarifario && !contrato.getTipoPrestacao().equals("Prestação Direta")){
                tabelaContrato.append("Questionário de Avaliação do Contrato").append("\n\n");
                tabelaContrato.append("1) O contrato já possuía repartição de riscos antes da publicação da NR 5/2024? ")
                        .append((contrato.getIsPossuiReparticao() != null) ? (contrato.getIsPossuiReparticao() ? "Sim" : "Não") : "Não Respondido").append("\n");
                tabelaContrato.append("2) Em seu contrato, o titular alterou a matriz de riscos proposta pela NR 5/2024, na alocação ou descrição de algum risco? ")
                        .append((contrato.getIsPossuiAlteracao() != null) ? (contrato.getIsPossuiAlteracao() ? "Sim" : "Não") : "Não Respondido").append("\n");
                tabelaContrato.append("3) Em seu contrato, o titular acrescentou novos riscos à matriz proposta pela NR 5/2024? ")
                        .append((contrato.getIsPossuiNovosRiscos()!= null) ? (contrato.getIsPossuiNovosRiscos() ? "Sim" : "Não") : "Não Respondido").append("\n");
                tabelaContrato.append("4) O titular observou todos os procedimentos previstos na NR 5/2024 para a inclusão de novo risco ou alteração da matriz proposta? ")
                        .append((contrato.getIsPossuiObsersavoes()!= null) ? (contrato.getIsPossuiObsersavoes() ? "Sim" : "Não") : "Não Respondido").append("\n\n\n\n");
            }

            tabelaContrato.append("__________________________________________________________________\n\n");



        }

        mapaContratos.put("@@tabelaContrato@@", tabelaContrato.toString());

        return mapaContratos;

    }

}


// Fim do arquivo: GerarComprovanteReciboMatrizDeRiscos.java

// Arquivo: GerarComprovanteReciboRequisitoComplementar.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteReciboRequisitoComplementar.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicosReguladosDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.CondicaoAtividade;
import br.gov.ana.sarsb.model.entity.ConformidadeEntidade;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GerarComprovanteReciboRequisitoComplementar extends GerarDocumentos implements Serializable {


    private static final String PATH_RELATORIOS = "/static/relatorios/docx/";

    @Getter
    @Setter
    private String caminhoUpload;

    private GerarComprovanteReciboRequisitoComplementar(String caminhoUpload) {
        super();
        this.caminhoUpload = caminhoUpload;
    }

    public static GerarComprovanteReciboRequisitoComplementar getInstance(String caminhoUpload) {
        return new GerarComprovanteReciboRequisitoComplementar(caminhoUpload);
    }


    @SuppressWarnings("resource")
    public void replaceWordCondicaoGeral(ReciboDTO recibo, RequisitoComplementarDTO requisitoComplementarDTO,
                                         AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) {
        String outputFileDoc = caminhoUpload + "/Recibo Conformidade.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Conformidade.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-envio-requisito-complementar.docx");
            XWPFDocument wordConformidade = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWord(recibo, requisitoComplementarDTO,
                    agenciaReguladora, protocoloEnvio);
            replaceParagraphs(wordConformidade.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordConformidade.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> carregarDadosDetalhadoWord(ReciboDTO reciboDTO, RequisitoComplementarDTO requisitoComplementarDTO,
                                                           AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) {
        HashMap<String, String> mapaConformidade = new HashMap<>();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        mapaConformidade.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaConformidade.put("ano_referencia", requisitoComplementarDTO.getAnoReferencia().toString());
        mapaConformidade.put("@@dt_protocolo@@", (protocoloEnvio.format(formatter)));

        mapaConformidade.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaConformidade.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaConformidade.put("@@ent_sigla@@", agenciaReguladora.getSigla());

        mapaConformidade.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaConformidade.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao() : " ");
        mapaConformidade.put("data_inicio", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        StringBuilder perguntas = new StringBuilder();

        perguntas.append("1) A ERI possui ato normativo sobre metas de universalização emitido\n" +
                "anteriormente à publicação da NR nº8/2024? ").append(requisitoComplementarDTO.getPergunta1()? "sim" : "Não ").append("\n\n");
        perguntas.append("2) O ato normativo da ERI foi elaborado/revisado nos termos da NR nº8/2024? ").append(requisitoComplementarDTO.getPergunta2()? "sim" : "Não ").append("\n\n");
        if(requisitoComplementarDTO.getPergunta2()){
            requisitoComplementarDTO.getDocumentos().forEach(documento ->{
                if(documento.getNumeroPergunta() == 2){
                    perguntas.append("Link do site da internet: ").append(documento.getLinkOficial()).append("\n\n");
                }

            });

        }
        perguntas.append("3) A ERI possui ato normativo sobre previsão de solução alternativa adequada\n" +
                "utilizada na ausência de disponibilidade de redes públicas de abastecimento\n" +
                "de água ou esgotamento sanitário emitido anteriormente à publicação da NR\n" +
                "n° 8/2024? ").append(requisitoComplementarDTO.getPergunta3()? "sim" : "Não ").append("\n\n");
        perguntas.append("4) O ato normativo sobre solução alternativa da ERI foi elaborado/revisado e está\n" +
                "compatível com os termos da NR nº 8/2024? ").append(requisitoComplementarDTO.getPergunta4()? "sim" : "Não ").append("\n\n");

        if(requisitoComplementarDTO.getPergunta4()){
            requisitoComplementarDTO.getDocumentos().forEach(documento ->{
                if(documento.getNumeroPergunta() == 4){
                    perguntas.append("Link do site da internet: ").append(documento.getLinkOficial()).append("\n\n");
                }

            });

        }

        perguntas.append("5) Na elaboração de seus atos normativos, a ERI observou todos os\n" +
                "procedimentos previstos na NR nº 8/2024? ").append(requisitoComplementarDTO.getPergunta5()? "sim" : "Não ").append("\n\n");
        perguntas.append("6) A ERI publicou relação de municípios que adotaram em seus planos de\n" +
                "saneamento básico os indicadores e metas progressivas para o\n" +
                "acompanhamento da universalização? ").append(requisitoComplementarDTO.getPergunta6()? "sim" : "Não ").append("\n\n");

        if(requisitoComplementarDTO.getPergunta6()){
            requisitoComplementarDTO.getDocumentos().forEach(documento ->{
                if(documento.getNumeroPergunta() == 6){
                    perguntas.append("Link do site da internet: ").append(documento.getLinkOficial()).append("\n\n");
                }

            });

        }

        perguntas.append("7) A ERI publicou o relatório de avaliação do cumprimento das metas\n" +
                "progressivas de universalização, na sua página da internet? ").append(requisitoComplementarDTO.getPergunta7()? "sim" : "Não ").append("\n\n");

        if(requisitoComplementarDTO.getPergunta7()){
            requisitoComplementarDTO.getDocumentos().forEach(documento ->{
                if(documento.getNumeroPergunta() == 7){
                    perguntas.append("Link do site da internet: ").append(documento.getLinkOficial()).append("\n\n");
                }

            });

        }

        mapaConformidade.put("@@tabelaContrato@@", perguntas.toString());
        return mapaConformidade;
    }


    @SuppressWarnings("resource")
    public void replaceWordCondicaoGeralSegundaAba(ReciboDTO recibo, ConformidadeEntidade conformidadeEntidade,
                                                   AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio, List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS, List<ConformidadeServicoDTO> conformidadeServicoDTOS, List<CondicaoAtividade> condicaoAtividades) {
        String outputFileDoc = caminhoUpload + "/Recibo Conformidade.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Conformidade.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-envio-conformidade-condicao-geral.docx");
            XWPFDocument wordConformidade = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWord(recibo, conformidadeEntidade,
                    agenciaReguladora, protocoloEnvio, conformidadeEntidadeServicosDTOS, conformidadeServicoDTOS, condicaoAtividades);

            replaceParagraphs(wordConformidade.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordConformidade.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> carregarDadosDetalhadoWord(ReciboDTO reciboDTO, ConformidadeEntidade conformidadeEntidade,
                                                           AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio, List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS, List<ConformidadeServicoDTO> conformidadeServicoDTOS, List<CondicaoAtividade> condicaoAtividades) {

        HashMap<String, String> mapaConformidade = new HashMap<>();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        mapaConformidade.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaConformidade.put("ano_referencia", conformidadeEntidade.getAnoColeta().toString());
        mapaConformidade.put("@@dt_protocolo@@", (protocoloEnvio.format(formatter)));

        //DADOS DE IDENTIFICAÇÃO DA ENTIDADE
        mapaConformidade.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaConformidade.put("@@ent_nome@@", agenciaReguladora.getNome());
        mapaConformidade.put("@@ent_sigla@@", agenciaReguladora.getSigla());

        mapaConformidade.put("@@ent_url_site@@", agenciaReguladora.getUrlSite());
        mapaConformidade.put("@@ent_lei_criacad@@", agenciaReguladora.getLeiCriacao() != null ? agenciaReguladora.getLeiCriacao() : " ");
        mapaConformidade.put("data_inicio", ConverterUtil.converterDateToString(agenciaReguladora.getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        //DADOS INFORMADOS DURANTE O CADASTRAMENTO
        mapaConformidade.put("@@quest_possui_ato@@", conformidadeEntidade.getIndicativoAceite() ? "Sim" : "Não");

        if (!conformidadeEntidade.getIndicativoAceite()) {
            mapaConformidade.put("Motivo:", "Motivo:");
            mapaConformidade.put("valor_m", conformidadeEntidade.getDescricaoMotivo());
        } else {
            mapaConformidade.put("Motivo:", "");
            mapaConformidade.put("valor_m", "");
        }

        StringBuilder tabelaConformidadesCadastradas = new StringBuilder();
        StringBuilder tabelaIdentificacaoEntidade = new StringBuilder();
        int contador = 0;


        for (ConformidadeServicoDTO conformidadeServicoDTO : conformidadeServicoDTOS) {


            tabelaConformidadesCadastradas.append("UF: ").append(conformidadeServicoDTO.getMunicipioIbge().getUf()).append("\n");
            tabelaConformidadesCadastradas.append("Município: ").append(conformidadeServicoDTO.getMunicipioIbge().getNomeMunicipio()).append("\n\n\n\n\n");


            tabelaConformidadesCadastradas.append("Conformidade dos Serviço Público de Limpeza Urbana(SLU) com a NR da ANA\n\n");

            tabelaConformidadesCadastradas.append("Atividade ").append(" | ");
            tabelaConformidadesCadastradas.append("Prestador").append(" | ");
            tabelaConformidadesCadastradas.append("Periodo").append(" | ");
            tabelaConformidadesCadastradas.append("Conformidade das atividades").append(" | \n\n");

            for (ConformidadeServicosReguladosDTO conformidadeServicosReguladosDTO: conformidadeEntidadeServicosDTOS.get(contador).getAtividades()) {
                for (CondicaoAtividade condicaoAtividade : condicaoAtividades) {
                    if (conformidadeServicosReguladosDTO.getCodigoServico() == 3 && condicaoAtividade.getId().equals(conformidadeServicosReguladosDTO.getId())) {
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getDescricaoAtividade()).append(" | ");
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getNomePrestador().trim().isEmpty()? "Não informado" : conformidadeServicosReguladosDTO.getNomePrestador()).append(" | ");
                        if (conformidadeServicosReguladosDTO.getDatainicioServico() != null || conformidadeServicosReguladosDTO.getDataFimServico() != null) {
                            tabelaConformidadesCadastradas.append(ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" - ")
                                    .append(ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" | ");

                        } else {
                            tabelaConformidadesCadastradas.append("Não informado").append(" | ");
                        }
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getConformidade().equals(false) ? "Não conforme" : "Conforme").append(" | \n\n");
                    }

                }
            }

            if(conformidadeServicoDTO.getDescricaoInconformidadesLu() != null && !conformidadeServicoDTO.getDescricaoInconformidadesLu().equals("")) {
                tabelaConformidadesCadastradas.append("Descrição das inconformidades: ").append(conformidadeServicoDTO.getDescricaoInconformidadesLu());
            }

            tabelaConformidadesCadastradas.append("\n\n\n\n\n");

            tabelaConformidadesCadastradas.append("Conformidade dos Serviço Público de Manejo de Resíduos Sólidos Urbanos(SMRSU) com a NR da ANA\n\n");

            tabelaConformidadesCadastradas.append("Atividade ").append(" | ");
            tabelaConformidadesCadastradas.append("Prestador").append(" | ");
            tabelaConformidadesCadastradas.append("Periodo").append(" | ");
            tabelaConformidadesCadastradas.append("Conformidade das atividades").append(" | \n\n");

            for (ConformidadeServicosReguladosDTO conformidadeServicosReguladosDTO: conformidadeEntidadeServicosDTOS.get(contador).getAtividades()) {
                for (CondicaoAtividade condicaoAtividade : condicaoAtividades) {
                    if (conformidadeServicosReguladosDTO.getCodigoServico() == 4 && condicaoAtividade.getId().equals(conformidadeServicosReguladosDTO.getId())) {
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getDescricaoAtividade()).append(" | ");
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getNomePrestador().trim().equals("") ? "Não informado" : conformidadeServicosReguladosDTO.getNomePrestador()).append(" | ");

                        if (conformidadeServicosReguladosDTO.getDatainicioServico() != null || conformidadeServicosReguladosDTO.getDataFimServico() != null) {
                            tabelaConformidadesCadastradas.append(ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(conformidadeServicosReguladosDTO.getDatainicioServico(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" - ")
                                    .append(ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) != null ? ConverterUtil.converterDateToString(condicaoAtividade.getDataFimPrestacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA) : "Não Informado").append(" | ");

                        } else {
                            tabelaConformidadesCadastradas.append("Não informado").append(" | ");
                        }
                        tabelaConformidadesCadastradas.append(conformidadeServicosReguladosDTO.getConformidade().equals(false) ? "Não conforme" : "Conforme").append("|\n\n");
                    }
                }
            }
            tabelaConformidadesCadastradas.append("\n\n\n");

            if (conformidadeServicoDTO.getDescricaoInconformidadesMrsu() != null && !conformidadeServicoDTO.getDescricaoInconformidadesMrsu().equals("") ) {
                tabelaConformidadesCadastradas.append("Descrição das inconformidades: ").append(conformidadeServicoDTO.getDescricaoInconformidadesMrsu()).append("\n\n");
            }
            tabelaConformidadesCadastradas.append("__________________________________________________________________\n\n");

            contador++;
        }

        mapaConformidade.put("@@tabelaContrato@@", tabelaConformidadesCadastradas.toString());
        mapaConformidade.put("tabelaIndentificaoEntidade", tabelaIdentificacaoEntidade.toString());


        return mapaConformidade;

    }



}

// Fim do arquivo: GerarComprovanteReciboRequisitoComplementar.java

// Arquivo: GerarComprovanteReciboSmrsu.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteReciboSmrsu.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.text.NumberFormat;
import java.util.*;

import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaRelatorioDTO;
import br.gov.ana.sarsb.model.dto.municipio.SustentabilidadeDTO;
import br.gov.ana.sarsb.model.entity.Sustentabilidade;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioSmrsuDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.enums.SimNao;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;

public class GerarComprovanteReciboSmrsu extends GerarDocumentos implements Serializable {

	private static final long serialVersionUID = -424932048930266230L;
	
	private static final String PATH_RELATORIOS = "/static/relatorios/docx/";

	@Getter
	@Setter
	private String caminhoUpload;

	private GerarComprovanteReciboSmrsu(String caminhoUpload) {
		super();
		this.caminhoUpload = caminhoUpload;
	}

	public static GerarComprovanteReciboSmrsu getInstance(String caminhoUpload) {
		return new GerarComprovanteReciboSmrsu(caminhoUpload);
	}

	@SuppressWarnings("resource")
	public void replaceWord(ReciboDTO reciboSmrsuDTO) {
		String outputFileDoc = caminhoUpload + "/Recibo Smrsu.docx";
		String outputFilePdf = caminhoUpload + "/Recibo Smrsu.pdf";
		try {			
			InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS +  "comprovante-envio-smrsu-detalhado.docx");
			XWPFDocument word = new XWPFDocument(caminho);
			Map<String, String> mapReplacement = carrageDadosDetalhadoWord(reciboSmrsuDTO);
			replaceParagraphs(word.getParagraphs(), mapReplacement);
			OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
			word.write(arquivoDoc);
			arquivoDoc.flush();
			arquivoDoc.close();

			// CONVERTER PARA PDF
			OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
			InputStream is = new FileInputStream(outputFileDoc);
			XWPFDocument document = new XWPFDocument(is);
			PdfOptions options = PdfOptions.create();
			PdfConverter.getInstance().convert(document, arquivoPdf, options);

			reciboSmrsuDTO.setRecibo(new File(outputFilePdf));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private Map<String, String> carrageDadosWord(ReciboDTO reciboSmrsuDTO) {
		HashMap<String, String> mapa = new HashMap<>();
		mapa.put("@@pft_nu_cnpj@@", reciboSmrsuDTO.getCnpjFormatado());
		mapa.put("@@pft_municipio@@", reciboSmrsuDTO.getMunicipio());
		mapa.put("@@isc_dt_cadastro@@", reciboSmrsuDTO.getDataRegistro());
		mapa.put("@@isc_nu_recibo@@", reciboSmrsuDTO.getNumeroRecibo());
		if(reciboSmrsuDTO.getDataRegistroRetificado() != null) {			
			mapa.put("@@isc_dt_retificacao@@", reciboSmrsuDTO.getDataRegistroRetificado());
		}
		if(reciboSmrsuDTO.getNumeroReciboRetificado() != null) {
			mapa.put("@@isc_nu_recibo_retificacao@@", reciboSmrsuDTO.getNumeroReciboRetificado());
		}
		return mapa;
	}
	
	@SuppressWarnings("resource")
	public void replaceWordRetificado(ReciboDTO reciboSmrsuDTO) {
		String outputFileDoc = caminhoUpload + "/Recibo Retificado Smrsu.docx";
		String outputFilePdf = caminhoUpload + "/Recibo Retificado Smrsu.pdf";
		try {
			InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-envio-smrsu-retificado.docx");
			XWPFDocument word = new XWPFDocument(caminho);
			Map<String, String> mapReplacement = carrageDadosWord(reciboSmrsuDTO);
			replaceParagraphs(word.getParagraphs(), mapReplacement);
			OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
			word.write(arquivoDoc);
			arquivoDoc.flush();
			arquivoDoc.close();

			// CONVERTER PARA PDF
			OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
			InputStream is = new FileInputStream(outputFileDoc);
			XWPFDocument document = new XWPFDocument(is);
			PdfOptions options = PdfOptions.create();
			PdfConverter.getInstance().convert(document, arquivoPdf, options);

			reciboSmrsuDTO.setRecibo(new File(outputFilePdf));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));

	private Map<String, String> carrageDadosDetalhadoWord(ReciboDTO reciboSmrsuDTO) {
		HashMap<String, String> mapa = new HashMap<>();
		mapa.put("@@pft_nu_cnpj@@", reciboSmrsuDTO.getCnpjFormatado());
		mapa.put("@@pft_municipio@@", reciboSmrsuDTO.getMunicipio());
		mapa.put("@@ent_nome@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getPrefeitura().getAgenciaReguladora().getNome());
		mapa.put("@@isc_dt_cadastro@@", reciboSmrsuDTO.getDataRegistro());
		mapa.put("@@isc_nu_recibo@@", reciboSmrsuDTO.getNumeroRecibo());
		mapa.put("@@pft_ibge@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getPrefeitura().getCodigoIbge());
		mapa.put("@@pft_email@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getPrefeitura().getEmail());
		mapa.put("@@pft_telefone@@", ConverterUtil.aplicaMascaraTelefone(reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getPrefeitura().getTelefone()));
		mapa.put("@@cad_cpf@@", ConverterUtil.aplicaMascaraCPF(reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getCpf()));
		mapa.put("@@cad_nome@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getNome());
		mapa.put("@@cad_email@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getEmail());
		mapa.put("@@cad_telefone@@", ConverterUtil.aplicaMascaraTelefone(reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getTelefone()));
		mapa.put("@@cad_vinc@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getPossuiVinculoPrefeitura() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());

		if (reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getCargo() != null) {
			mapa.put("@@cad_cargo@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getCargo());
		} else {
			mapa.put("@@cad_cargo@@", ""); // Adiciona uma string vazia se o valor for null
		}

		if (reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getDepartamento() != null) {
			mapa.put("@@cad_departamento@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getCadastrante().getDepartamento());
		} else {
			mapa.put("@@cad_departamento@@", ""); // Adiciona uma string vazia se o valor for null
		}

		mapa.put("@@ent_possui@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getPrefeitura().getPossuiEntidadeReguladora() ? SimNao.toEnum("S").getDescricao() : SimNao.toEnum("N").getDescricao());
		mapa.put("@@inst_unico@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getListaInstrumentoCobrancaNovo().get(0).getUnicoprestador());
		mapa.put("@@pres_unico@@", reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getListaInstrumentoCobrancaNovo().get(0).getUnicoprestador());

		if (reciboSmrsuDTO.isDetalhado()) {
			List<InstrumentoCobrancaRelatorioDTO> instrumentos = reciboSmrsuDTO.getFormularioDTO().getFormularioSmrsuDTO().getListaInstrumentoCobrancaNovo();
			StringBuilder tabelaInstrumentos = new StringBuilder();

			for (InstrumentoCobrancaRelatorioDTO instrumento : instrumentos) {
				tabelaInstrumentos.append("Nome do Prestador: ").append(instrumento.getNomePrestador()).append("\n")
						.append("Atividade: ").append(instrumento.getEtapaDescricao()).append("\n")
						.append("Regime de Cobrança: ").append(instrumento.getRegimeCobranca()).append("\n")
						.append("Instrumento legal: ").append(instrumento.getInstrumentoCobranca()).append("\n")
						.append("Paramêtro de Cobrança: ").append(instrumento.getParamentoCobranca()).append("\n")
						.append("Categoria Usuário: ").append(instrumento.getCategoriaDescricao()).append("\n")
						.append("Valor Cobrado: ").append(instrumento.getNaturezaPrestador()).append("\n")
						.append("Natureza do Prestador: ").append(instrumento.getNaturezaPrestador()).append("\n")
						.append("SubCategoria do Prestador: ").append(instrumento.getCategoriaDescricao()).append("\n\n");
			}

			mapa.put("@@tabela_instrumentos@@", tabelaInstrumentos.toString());

			List<Sustentabilidade> sustentabilidades = reciboSmrsuDTO.getSustentabilidade();
			StringBuilder tabelaSustentabilidade = new StringBuilder();

			// Obter a instância de NumberFormat para moeda brasileira
			NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));

			for (Sustentabilidade sustentabilidade : sustentabilidades) {
				tabelaSustentabilidade.append("Receita Requerida: ").append(formatCurrency(sustentabilidade.getRecRequerida(), currencyFormat)).append("\n")
						.append("Arrecadação: ").append(formatCurrency(sustentabilidade.getValArrecadado(), currencyFormat)).append("\n")
						.append("Valor dos subsídios tarifários: ").append(sustentabilidade.getValSubsTarifario() != null ? formatCurrency(sustentabilidade.getValSubsTarifario(), currencyFormat) : "").append("\n")
						.append("Valor arrecadado com receitas alternativas: ").append(sustentabilidade.getSubValArrecadadoAlt() != null ? formatCurrency(sustentabilidade.getSubValArrecadadoAlt(), currencyFormat) : "").append("\n")
						.append("Ano exercício: ").append(sustentabilidade.getAnoExercicio()).append("\n");
			}

			if (reciboSmrsuDTO.getSustentabilidade() != null) {
				mapa.put(":##lista##", tabelaSustentabilidade.toString());
			} else {
				mapa.put(":##lista##", "");
			}
		}

		if (reciboSmrsuDTO.getDataRegistroRetificado() != null) {
			mapa.put("@@isc_dt_retificacao@@", reciboSmrsuDTO.getDataRegistroRetificado());
		}
		if (reciboSmrsuDTO.getNumeroReciboRetificado() != null) {
			mapa.put("@@isc_nu_recibo_retificacao@@", reciboSmrsuDTO.getNumeroReciboRetificado());
		}
		return mapa;
	}


	private static String formatCurrency(Number value, NumberFormat currencyFormat) {
		if (value == null) {
			return "R$ 0,00";
		}
		return currencyFormat.format(value);
	}


	private static List<Sustentabilidade> getSustentabilidades() {

		return new ArrayList<>();
	}
}




// Fim do arquivo: GerarComprovanteReciboSmrsu.java

// Arquivo: GerarComprovanteRegulacaoTarifaria.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarComprovanteRegulacaoTarifaria.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ContratoMatrizRiscoDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.ContratoServicoAtividadeSelecionada;
import br.gov.ana.sarsb.model.entity.MunicipioContrato;
import br.gov.ana.sarsb.model.entity.RegulacaoTarifaria;
import br.gov.ana.sarsb.model.enums.SimNao;
import br.gov.ana.sarsb.model.enums.TipoPrestacaoContratoEnum;
import br.gov.ana.sarsb.model.enums.TipoServicoContratoEnum;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.Getter;
import lombok.Setter;
import org.apache.poi.xwpf.converter.pdf.PdfConverter;
import org.apache.poi.xwpf.converter.pdf.PdfOptions;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class GerarComprovanteRegulacaoTarifaria extends GerarDocumentos implements Serializable {


    private static final String PATH_RELATORIOS = "/static/relatorios/docx/";

    @Getter
    @Setter
    private String caminhoUpload;

    private GerarComprovanteRegulacaoTarifaria(String caminhoUpload) {
        super();
        this.caminhoUpload = caminhoUpload;
    }

    public static GerarComprovanteRegulacaoTarifaria getInstance(String caminhoUpload) {
        return new GerarComprovanteRegulacaoTarifaria(caminhoUpload);
    }


    public void replaceWordContratos(ReciboDTO recibo, List<RegulacaoTarifaria> regulacaoTarifarias,
                                     List<ContratoServicoAtividadeSelecionada> contratoServicoAtividadeSelecionadas, LocalDateTime dataEnvioProtocolo, List<MunicipioContrato> municipioContratoes) {
        String outputFileDoc = caminhoUpload + "/Recibo Contratos.docx";
        String outputFilePdf = caminhoUpload + "/Recibo Contratos.pdf";
        try {
            InputStream caminho = getClass().getResourceAsStream(PATH_RELATORIOS + "comprovante-regulacao-tarifaria.docx");
            XWPFDocument wordAto = new XWPFDocument(caminho);
            Map<String, String> mapReplacement = carregarDadosDetalhadoWordContratos(recibo, regulacaoTarifarias, contratoServicoAtividadeSelecionadas, dataEnvioProtocolo, municipioContratoes);
            replaceParagraphs(wordAto.getParagraphs(), mapReplacement);
            OutputStream arquivoDoc = new FileOutputStream(outputFileDoc);
            wordAto.write(arquivoDoc);
            arquivoDoc.flush();
            arquivoDoc.close();

            // CONVERTER PARA PDF
            OutputStream arquivoPdf = new FileOutputStream(outputFilePdf);
            InputStream is = new FileInputStream(outputFileDoc);
            XWPFDocument document = new XWPFDocument(is);
            PdfOptions options = PdfOptions.create();
            PdfConverter.getInstance().convert(document, arquivoPdf, options);

            recibo.setRecibo(new File(outputFilePdf));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private Map<String, String> carregarDadosDetalhadoWordContratos(ReciboDTO reciboDTO, List<RegulacaoTarifaria> regulacaoTarifarias,
                                                                    List<ContratoServicoAtividadeSelecionada> contratoServicoAtividadeSelecionadas, LocalDateTime dataEnvioProtocolo, List<MunicipioContrato> municipioContratoes) {


        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

        HashMap<String, String> mapaContratos = new HashMap<>();
        mapaContratos.put("@@nu_protocolo@@", reciboDTO.getNumeroRecibo());
        mapaContratos.put("@@dt_protocolo@@", (dataEnvioProtocolo.format(formatter).toString()));
        mapaContratos.put("ano_coleta", String.valueOf(dataEnvioProtocolo.getYear()));


        //DADOS DE IDENTIFICACAO DA ENTIDADE
        mapaContratos.put("@@nu_cnpj@@", reciboDTO.getCnpjFormatado());
        mapaContratos.put("@@ent_nome@@", regulacaoTarifarias.get(0).getAgenciaReguladora().getNome());
        mapaContratos.put("@@ent_sigla@@", regulacaoTarifarias.get(0).getAgenciaReguladora().getSigla());
        mapaContratos.put("@@ent_url_site@@", regulacaoTarifarias.get(0).getAgenciaReguladora().getUrlSite());
        mapaContratos.put("@@ent_lei_criacad@@", regulacaoTarifarias.get(0).getAgenciaReguladora().getLeiCriacao() != null ? regulacaoTarifarias.get(0).getAgenciaReguladora().getLeiCriacao() : " ");
        mapaContratos.put("data", ConverterUtil.converterDateToString(regulacaoTarifarias.get(0).getAgenciaReguladora().getDataInicioOperacao(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA));

        StringBuilder tabelaContrato = new StringBuilder();

        for (RegulacaoTarifaria regulacaoTarifaria : regulacaoTarifarias) {

            StringBuilder ufs = new StringBuilder();
            for (MunicipioContrato m : municipioContratoes) {
                if (regulacaoTarifaria.getContrato().getId() == m.getContrato().getId()) {
                    ufs.append(m.getMunicipio().getNomeMunicipio()).append("(").append(m.getUf()).append("); ");
                }
            }

            HashMap<String, List<String>> map = new HashMap<>();

            List<String> abastecimento = new ArrayList<>();
            List<String> esgotamento = new ArrayList<>();
            List<String> limpezaUrbana = new ArrayList<>();
            List<String> manejoResidual = new ArrayList<>();
            List<String> drenagem = new ArrayList<>();

            StringBuilder tipoServico = new StringBuilder();
            for (ContratoServicoAtividadeSelecionada contratoServicoAtividadeSelecionada: contratoServicoAtividadeSelecionadas){
                if(contratoServicoAtividadeSelecionada.getContrato().getId() == regulacaoTarifaria.getContrato().getId()){
                    if (Objects.equals(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getCodigoServico(), TipoServicoContratoEnum.IS_ABASTECIMENTO.getCodigo())){
                        abastecimento.add(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getDescricaoAtividade());
                    }
                    if (Objects.equals(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getCodigoServico(), TipoServicoContratoEnum.IS_ESGOTAMENTO.getCodigo())){
                        esgotamento.add(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getDescricaoAtividade());
                    }
                    if (Objects.equals(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getCodigoServico(), TipoServicoContratoEnum.IS_MANEJO.getCodigo())){
                        manejoResidual.add(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getDescricaoAtividade());
                    }
                    if (Objects.equals(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getCodigoServico(), TipoServicoContratoEnum.IS_LIMPEZA_URBANA.getCodigo())){
                        limpezaUrbana.add(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getDescricaoAtividade());
                    }
                    if (Objects.equals(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getCodigoServico(), TipoServicoContratoEnum.IS_DRENAGEM.getCodigo())){
                        drenagem.add(contratoServicoAtividadeSelecionada.getTipoServicoReguladoDocumento().getDescricaoAtividade());
                    }
                }

            }

            map.put("Abastecimento de Água Potável:", abastecimento);
            map.put("Esgotamento Sanitário", esgotamento);
            map.put("Limpeza Urbana", limpezaUrbana);
            map.put("manejo de Resíduos Sólidos", manejoResidual);
            map.put("Drenagem e Manejo de Àguas Pluviais e Urbanas", drenagem);


            for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                // Pegando a chave
                String chave = entry.getKey();
                // Pegando o valor (lista de strings)
                List<String> valores = entry.getValue();

                if (!valores.isEmpty()) {
                    // Adicionando a chave no StringBuilder
                    tipoServico.append(chave).append(" ");
                }

                // Iterando sobre os valores e adicionando no StringBuilder
                for (String valor : valores) {
                    tipoServico.append(valor).append(",");
                }
                if (!valores.isEmpty()) {
                    tipoServico.append("\n"); // Separando as categorias com uma linha em branco
                }
            }


            StringBuilder servicos = new StringBuilder();
            if (regulacaoTarifaria.getContrato().getIsAbastecimento()!= null && regulacaoTarifaria.getContrato().getIsAbastecimento()) {
                servicos.append("Abastecimento de Água Potável").append(",");
            }
            if (regulacaoTarifaria.getContrato().getIsAEsgotamento() != null && regulacaoTarifaria.getContrato().getIsAEsgotamento()) {
                servicos.append("Esgotamento Sanitário").append(",");
            }
            if (regulacaoTarifaria.getContrato().getIsLimpezaUrbana() != null && regulacaoTarifaria.getContrato().getIsLimpezaUrbana()) {
                servicos.append("Limpeza Urbana").append(",");
            }
            if (regulacaoTarifaria.getContrato().getIsManejoResiduos() != null && regulacaoTarifaria.getContrato().getIsManejoResiduos()) {
                servicos.append("Manejo de Resíduos Sólidos").append(",");
            }
            if (regulacaoTarifaria.getContrato().getIsDrenagemEManejoAguasPluviais()!= null && regulacaoTarifaria.getContrato().getIsDrenagemEManejoAguasPluviais()) {
                servicos.append("Drenagem e Manejo de Àguas Pluviais e Urbanas");
            }


            StringBuilder perguntas = new StringBuilder();
            perguntas.append("1) O contrato teve seu edital publicado após 1º de março de 2024 ? ").append("\n").append(regulacaoTarifaria.getPergunta1() ? "sim" : "não").append("\n\n");
            perguntas.append("2) O contrato foi precedido da licitação com a tarifa modelada com base em projeto " +
                    "referencial ?").append("\n").append(regulacaoTarifaria.getPergunta2() ? "sim" : "não").append("\n\n");
            if (regulacaoTarifaria.getPergunta2_1() != null) {
                perguntas.append("2.1) O contratro decorreu de processo de desestatização por oferta secundária de ações de empresa ou sociedade de economia mista prestadora de serviços públicos de saneamento básico, " +
                        "substituindo algum contrato de programa ou de concessão?").append("\n").append(regulacaoTarifaria.getPergunta2_1() ? "sim" : "não").append("\n\n");
            }
            perguntas.append("3) O contrato prevê que os investimentos vinculados aos bens reversíveis devem " +
                    "ser considerados integralmente amortizados ou depreciados até o término do prazo " +
                    "contratual?").append("\n").append(regulacaoTarifaria.getPergunta3() ? "sim" : "não").append("\n\n");
            perguntas.append("4) O contrato determina qual será a tarifa ou as regras para sua definição?").append("\n").append(regulacaoTarifaria.getPergunta6() ? "sim" : "não").append("\n\n");
            perguntas.append("5) O contrato determina os procedimentos para: (i) o reajuste tarifário (ii) as revisões " +
                    "ordinárias; e (iii) as revisões extraordinárias?").append("\n").append(regulacaoTarifaria.getPergunta7() ? "sim" : "não").append("\n\n");
            perguntas.append("6) O contrato determina o reajustamento da tarifa observando-se intervalo mínimo " +
                    "de 12(doze) meses?").append("\n").append(regulacaoTarifaria.getPergunta8() ? "sim" : "não").append("\n\n");
            perguntas.append("7) O contrato prevê indicador de desempenho e qualidade que possibilite ajustes " +
                    "nos valores tarifários, com objetivo de avaliar o cumprimento de metas de expansão " +
                    "dos serviços, de redução de perdas na distribuição de água tratada e de qualidade " +
                    "na prestação do serviço?").append("\n").append(regulacaoTarifaria.getPergunta9() ? "sim" : "não").append("\n\n");
            perguntas.append("8) O contrato prevê os procedimentos e conteúdo das revisões ordinárias?").append("\n").append(regulacaoTarifaria.getPergunta10() ? "sim" : "não").append("\n\n");
            perguntas.append("9) O contrato prevê a revisão extraordinária para fins de recomposição do " +
                    "equilíbrio econômico?financeiro do contrato em face da materialização de riscos " +
                    "conforme previsto na matriz de riscos do contrato ou outras cláusulas contratuais?").append("\n").append(regulacaoTarifaria.getPergunta11() ? "sim" : "não").append("\n\n");
            perguntas.append("10) O contrato possui matriz de alocação de riscos, indicando quais eventos " +
                    "constituem riscos suportados exclusivamente pelo poder concedente, quais eventos " +
                    "constituem riscos suportados exclusivamente pelo prestador, e quais riscos são " +
                    "compartilhados?").append("\n").append(regulacaoTarifaria.getPergunta10() ? "sim" : "não").append("\n\n");
            perguntas.append("11) O contrato prevê metodologia para recomposição do equilíbrio econômico-financeiro, incluindo regras para definição da taxa de desconto na hipótese de " +
                    "adoção do fluxo de caixa marginal?:").append("\n").append(regulacaoTarifaria.getPergunta11() ? "sim" : "não").append("\n\n");

//            boolean existeCicloTarifario = contrato.getTipoPrestacao().equals("Programa") && (contrato.getIsContratoProgramaSeguindoNR()!= null && !contrato.getIsContratoProgramaSeguindoNR());
//



            tabelaContrato.append("Municípios do Contrato(UF): ").append(ufs).append("\n")
                    .append("Identificação do Contrato: ").append(regulacaoTarifaria.getContrato().getCodigoInterno().concat("").concat(regulacaoTarifaria.getContrato().getIdentificacao()) != null ? regulacaoTarifaria.getContrato().getIdentificacao() : " ").append("\n")
                    .append("Tipo de Prestação: ").append(TipoPrestacaoContratoEnum.get(regulacaoTarifaria.getContrato().getTipoPrestacao()).getDescricao()).append("\n")
                    .append("Prestador: ").append(regulacaoTarifaria.getContrato().getPrestador().getCnpj() != null ? regulacaoTarifaria.getContrato().getPrestador().getCnpj().concat("-" + regulacaoTarifaria.getContrato().getPrestador().getNomeRazaoSocial()) : " ").append("\n")
                    .append("Serviços:").append(servicos).append("\n")
                    .append("Data da Assinatura do Contrato: ").append(regulacaoTarifaria.getContrato().getDataAssinatura() != null ? regulacaoTarifaria.getContrato().getDataAssinatura().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) : "").append("\n")
                    .append("Prazo de Vigência do Contrato (Anos):").append(regulacaoTarifaria.getContrato().getPrazoVigencia() != null ? regulacaoTarifaria.getContrato().getPrazoVigencia() : "").append("\n")
                    .append(tipoServico)
                    .append("Link do contrato na internet:").append(regulacaoTarifaria.getContrato().getLinkInternet() != null ? regulacaoTarifaria.getContrato().getLinkInternet() : "").append("\n\n")
                    .append(perguntas);



//
//            if (contrato.getTipoPrestacao().equals("Programa")) {
//                tabelaContrato.append("O contrato de programa deve seguir a NR 5/2024 neste ano? ").append((contrato.getIsContratoProgramaSeguindoNR() != null) ? (contrato.getIsContratoProgramaSeguindoNR() ? "Sim" : "Não") : " ").append("\n");
//            }
//
//            if (existeCicloTarifario) {
//                tabelaContrato.append("Quando inicia o ciclo tarifário? ").append(ConverterUtil.converterDateToString(contrato.getAnoCicloTarifario(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA)).append("\n");
//            }
//
//            tabelaContrato.append("\n\n\n");
//
//
//
//            tabelaContrato.append("Município(UF): ").append(ufs).append("\n");
//
//            if(!existeCicloTarifario && !contrato.getTipoPrestacao().equals("Prestação Direta")){
//                tabelaContrato.append("Questionário de Avaliação do Contrato").append("\n\n");
//                tabelaContrato.append("1) O contrato já possuía repartição de riscos antes da publicação da NR 5/2024? ")
//                        .append((contrato.getIsPossuiReparticao() != null) ? (contrato.getIsPossuiReparticao() ? "Sim" : "Não") : "Não Respondido").append("\n");
//                tabelaContrato.append("2) Em seu contrato, o titular alterou a matriz de riscos proposta pela NR 5/2024, na alocação ou descrição de algum risco? ")
//                        .append((contrato.getIsPossuiAlteracao() != null) ? (contrato.getIsPossuiAlteracao() ? "Sim" : "Não") : "Não Respondido").append("\n");
//                tabelaContrato.append("3) Em seu contrato, o titular acrescentou novos riscos à matriz proposta pela NR 5/2024? ")
//                        .append((contrato.getIsPossuiNovosRiscos()!= null) ? (contrato.getIsPossuiNovosRiscos() ? "Sim" : "Não") : "Não Respondido").append("\n");
//                tabelaContrato.append("4) O titular observou todos os procedimentos previstos na NR 5/2024 para a inclusão de novo risco ou alteração da matriz proposta? ")
//                        .append((contrato.getIsPossuiObsersavoes()!= null) ? (contrato.getIsPossuiObsersavoes() ? "Sim" : "Não") : "Não Respondido").append("\n\n\n\n");
//            }
//
        tabelaContrato.append("__________________________________________________________________\n\n");
//
//
//
        }
//
        mapaContratos.put("@@tabelaContrato@@", tabelaContrato.toString());

        return mapaContratos;

    }

}


// Fim do arquivo: GerarComprovanteRegulacaoTarifaria.java

// Arquivo: GerarDocumentos.java
// Caminho: \br\gov\ana\sarsb\relatorio\apachepoi\GerarDocumentos.java

package br.gov.ana.sarsb.relatorio.apachepoi;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

public class GerarDocumentos {

	public void replaceParagraphs(List<XWPFParagraph> paragraphs, Map<String, String> properties) {
		for (XWPFParagraph paragraph : paragraphs) {
			List<XWPFRun> runs = paragraph.getRuns();
			for (XWPFRun run : runs) {
				String textRun = run.getText(run.getTextPosition());
				for (Entry<String, String> entry : properties.entrySet()) {
					if (textRun != null && textRun.contains(entry.getKey())) {
						String newText = textRun.replace(entry.getKey(),
								String.valueOf(properties.get(entry.getKey())));
						run.setText(newText, 0);
						break;
					}
				}

			}
		}
	}

	public void newReplaceParagraphs(List<XWPFParagraph> paragraphs, Map<String, String> properties) {
		for (XWPFParagraph paragraph : paragraphs) {
			List<XWPFRun> runs = paragraph.getRuns();
			if (runs == null || runs.isEmpty()) continue;

			StringBuilder fullText = new StringBuilder();
			for (XWPFRun run : runs) {
				String text = run.getText(0);
				if (text != null) {
					fullText.append(text);
				}
			}

			String modifiedText = fullText.toString();
			boolean hasChanges = false;

			for (Entry<String, String> entry : properties.entrySet()) {
				if (modifiedText.contains(entry.getKey())) {
					modifiedText = modifiedText.replace(entry.getKey(), entry.getValue());
					hasChanges = true;
				}
			}

			if (!hasChanges) continue;

			while (paragraph.getRuns().size() > 0) {
				paragraph.removeRun(0);
			}

			adicionarTextoComFormatacao(paragraph, runs, modifiedText);
		}
	}

	private void adicionarTextoComFormatacao(XWPFParagraph paragraph, List<XWPFRun> oldRuns, String texto) {
		int index = 0;
		for (XWPFRun oldRun : oldRuns) {
			if (index >= texto.length()) break;

			XWPFRun newRun = paragraph.createRun();
			copiarFormatacao(oldRun, newRun);

			newRun.setText(texto.substring(index, Math.min(index + oldRun.getText(0).length(), texto.length())));
			index += oldRun.getText(0).length();
		}

		if (index < texto.length()) {
			XWPFRun extraRun = paragraph.createRun();
			copiarFormatacao(oldRuns.get(oldRuns.size() - 1), extraRun); // Usa o último run como referência
			extraRun.setText(texto.substring(index));
		}
	}

	private void copiarFormatacao(XWPFRun origem, XWPFRun destino) {
		destino.setBold(origem.isBold());
		destino.setItalic(origem.isItalic());
		destino.setUnderline(origem.getUnderline());

		String color = origem.getColor();
		if (color != null && !color.isEmpty()) {
			destino.setColor(color);
		}

		destino.setFontSize(origem.getFontSize());
		destino.setFontFamily(origem.getFontFamily());
		destino.setTextPosition(origem.getTextPosition());
	}
}


// Fim do arquivo: GerarDocumentos.java

============================================================

PACOTE 27 - [Other] br.gov.ana.sarsb.relatorio.dynamicReports
------------------------------------------------------------
Arquivos: 5 | Métodos: 1

// Arquivo: BuildCampos.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\BuildCampos.java

package br.gov.ana.sarsb.relatorio.dynamicReports;

import static net.sf.dynamicreports.report.builder.DynamicReports.col;
import static net.sf.dynamicreports.report.builder.DynamicReports.field;
import static net.sf.dynamicreports.report.builder.DynamicReports.type;

import java.util.List;

import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;

public class BuildCampos extends ConstantesReport {
	
	public static JasperReportBuilder reciboFormularioSmrsu(JasperReportBuilder report, ReciboDTO reciboSmrsuDTO) {
		report.fields(field("comments", List.class))
				.columns(col.column("", KEY_VALOR, type.stringType()).setStretchWithOverflow(true).setHorizontalAlignment(HorizontalAlignment.LEFT)
				.setStyle(plainStyle)).setDataSource(DataSourceRelatorios.dataSourceReciboFormularioSmrsu(reciboSmrsuDTO));
		return report;
	}

}


// Fim do arquivo: BuildCampos.java

// Arquivo: BuildSubReport.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\BuildSubReport.java

package br.gov.ana.sarsb.relatorio.dynamicReports;

import static net.sf.dynamicreports.report.builder.DynamicReports.cmp;
import static net.sf.dynamicreports.report.builder.DynamicReports.export;
import static net.sf.dynamicreports.report.builder.DynamicReports.report;

import java.io.IOException;
import java.net.URL;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import lombok.extern.log4j.Log4j2;
import net.sf.dynamicreports.jasper.builder.JasperReportBuilder;
import net.sf.dynamicreports.jasper.builder.export.JasperPdfExporterBuilder;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;

@Log4j2
public class BuildSubReport extends DataSourceRelatorios {
	
	protected static ConfigCache cc = ConfigCache.getInstance();
	
	protected static JasperReportBuilder criarSubTitulo(String label, String subTitulo) {
		JasperReportBuilder report = report();
		return report.setTemplate(Templates.reportTemplate).title(cmp.verticalGap(10),
				cmp.horizontalList().add(cmp.text(label).setStyle(bold12CenteredStyle).setHorizontalAlignment(HorizontalAlignment.LEFT))
				.newRow().newRow().add(cmp.text(subTitulo).setStyle(bold12CenteredStyle).setHorizontalAlignment(HorizontalAlignment.LEFT)));
	}

	protected static JasperReportBuilder criarTitulo(String label) {
		JasperReportBuilder report = report();
		return report.setTemplate(Templates.reportTemplate).title(cmp.verticalGap(10),
				cmp.horizontalList().add(cmp.text(label).setStyle(bold12CenteredStyle).setHorizontalAlignment(HorizontalAlignment.LEFT)));
	}

	protected static JasperReportBuilder naoCriarTitulo(String label) {
		JasperReportBuilder report = report();
		return report.setTemplate(Templates.reportTemplate);
	}

	protected static JasperReportBuilder criarTitulosSemUnderline(String label) {
		JasperReportBuilder report = report();
		return report.setTemplate(Templates.reportTemplate).title(cmp.verticalGap(10),
				cmp.horizontalList().add(cmp.text(label).setStyle(bold11CenteredStyle).setHorizontalAlignment(HorizontalAlignment.LEFT)));
	}
	
	protected static JasperReportBuilder criarTitulosSemUnderlineRight(String label) {
		JasperReportBuilder report = report();
		return report.setTemplate(Templates.reportTemplate).title(cmp.verticalGap(10),
				cmp.horizontalList().add(cmp.text(label).setStyle(bold11CenteredStyle).setHorizontalAlignment(HorizontalAlignment.RIGHT)));
	}

	protected static JasperReportBuilder criarTituloPrincipal(String label) {
		JasperReportBuilder report = report();
		try {
			dynamicReportsComponent = cmp
					.horizontalList(cmp.image(new URL("")).setFixedDimension(120, 80)).newRow().newRow()
					.add(cmp.verticalGap(0).setStyle(direita));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return report.setTemplate(Templates.reportTemplate).title(
				cmp.horizontalList().add(dynamicReportsComponent).setStyle(bold12DireitaStyle).newRow().newRow()
						.add(cmp.text(label).setStyle(bold12DireitaStyle)).newRow().newRow().add(cmp.verticalGap(10)));
	}
	
	public static JasperPdfExporterBuilder retornaConfiguracoes() {
		try {
			System.setProperty("-Djava.awt.headless", "true");
            System.setProperty("java.awt.headless","true");

			String so = System.getProperty("os.name");
			if (so.contains("Windows")) {
				return export.pdfExporter(System.getProperty("java.io.tmpdir") + "relatorio.pdf");
			} else {
				return export.pdfExporter(cc.get("app.volume") + "relatorio/" + "relatorio.pdf");
			}

		} catch (Exception e) {
			log.error(e);
		}
		return export.pdfExporter(cc.get("app.volume") + "relatorio/" + "relatorio.pdf");
	}
	
	public JasperReportBuilder reciboFormularioSmrsu(String title, ReciboDTO reciboSmrsuDTO) {
		JasperReportBuilder report = criarTitulo(title);
		return BuildCampos.reciboFormularioSmrsu(report, reciboSmrsuDTO);
	}

}


// Fim do arquivo: BuildSubReport.java

// Arquivo: ConstantesReport.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\ConstantesReport.java

package br.gov.ana.sarsb.relatorio.dynamicReports;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import lombok.Getter;
import lombok.extern.log4j.Log4j2;

@Log4j2
public class ConstantesReport extends Templates {

	protected static List<String> labelsColuna = new ArrayList<String>();
	protected static List<String> valuesColuna = new ArrayList<String>();
	protected static List<String> camposCriadosStr = new ArrayList<String>();
	protected static HashMap<String, String> listMap = new HashMap<String, String>();
	protected static HashMap<String, String> param = new HashMap<String, String>();
	
	protected static final String RECIBO_SMRSU = "Comprovante de Envio";
	
	protected static final String KEY_NOME = "nome";
	protected static final String KEY_VALOR = "valor";

	@Getter
	public SimpleDateFormat formatDate = new SimpleDateFormat("dd/MM/yyyy"); 

	public static String format(Object obj) {

		String valor = String.valueOf(obj);

		if (valor == null || valor.equals("null") || valor.equals("")) {
			return "-";
		}

		try {

			if (valor.contains(":") &&  valor.length() < 10) {
				return formatarData(valor);
			}

			if (valor.contains(".") &&  valor.length() < 16) {

				if(obj instanceof Number) {
					return formatarValor(valor,2);
				} else {
					return valor;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return valor;
	}

	public static String formatPrecisaoMaior(Object obj) {

		String valor = String.valueOf(obj);

		if (valor == null || valor.equals("null") || valor.equals("")) {
			return "-";
		}

		try {

			if (valor.contains(":") &&  valor.length() < 10) {
				return formatarData(valor);
			}

			if (valor.contains(".") &&  valor.length() < 26) {

				if(obj instanceof Number) {
					return formatarValor(valor,5);
				} else {
					return valor;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return valor;
	}

	private static String formatarData(String valor) {
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			sdf.setLenient(false);
			Date data;
			data = sdf.parse(valor);
			SimpleDateFormat sdf2 = new SimpleDateFormat("dd/MM/yyyy");
			return sdf2.format(data);

		} catch (ParseException e) {
			e.printStackTrace();
		}
		return "-";
	}

	public static String  formatarData(Date data , String formato) {
		try{
			if(data != null && formato != null &&  formato.length() > 0){
				SimpleDateFormat sdf = new SimpleDateFormat(formato);
	           return sdf.format( data);
			}
			}catch( Exception e){
				log.error(e);
			}
		return "" ;
	}

	public static String converterValorParaString(Object object) {
		if(null == object ) {
            return "";
        }
		if (StringUtils.isEmpty(String.valueOf(object)) || StringUtils.isBlank(object.toString())) {
            return "";
        }
		return String.valueOf(object);
	}

	public static String formatarValor(String valor, int casasDecimais) {
		String qtDecimais = "";
		for (int i = 0; i < casasDecimais; i++) {
			qtDecimais += "0";
		}
		DecimalFormat df = new DecimalFormat("###,###,###,##0."+qtDecimais);
		Double double1 = Double.valueOf(valor);
		return df.format(double1);
	}
	
	public static String formatarValor(Double valor, int casasDecimais) {
		if(valor == null) {
			return "-";
		}
		
		String qtDecimais = "";
		for (int i = 0; i < casasDecimais; i++) {
			qtDecimais += "0";
		}
		DecimalFormat df = new DecimalFormat("###,###,###,##0."+qtDecimais);
		return df.format(valor);
	}

	public static byte[] getFileBytes(File file) throws IOException {
		ByteArrayOutputStream ous = null;
		InputStream ios = null;
		try {
			byte[] buffer = new byte[4096];
			ous = new ByteArrayOutputStream();
			ios = new FileInputStream(file);
			int read = 0;
			while ((read = ios.read(buffer)) != -1) {
				ous.write(buffer, 0, read);
			}
		} finally {
			try {
				if (ous != null) {
					ous.close();
				}
			} catch (IOException e) {
			}
			try {
				if (ios != null) {
					ios.close();
				}
			} catch (IOException e) {}
		}
		return ous.toByteArray();
	}

	   public static String formatarValorInteiro(Object valor) {
	        DecimalFormat df = new DecimalFormat("#,###,##0");

	        if(valor instanceof Integer){
	            return df.format(Double.valueOf(valor.toString()));
	        }

	        if(valor != null){
	            return df.format(Double.valueOf(valor.toString()));
	        }

	        return (String)valor;
	    }
}

// Fim do arquivo: ConstantesReport.java

// Arquivo: DataSourceRelatorios.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\DataSourceRelatorios.java

package br.gov.ana.sarsb.relatorio.dynamicReports;

import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import net.sf.dynamicreports.report.datasource.DRDataSource;
import net.sf.jasperreports.engine.JRDataSource;

public class DataSourceRelatorios extends ConstantesReport {
	
	public static JRDataSource dataSourceReciboFormularioSmrsu(ReciboDTO reciboSmrsuDTO) {
		DRDataSource dataSource = new DRDataSource(KEY_NOME, KEY_VALOR);
		dataSource.add("",
				"Este documento se configura como recibo do preenchimento do formulário on-line referente ao item 7.5 da Norma de Referência NR 01/2021/ANA.\n\n" + 
				"Nome do titular do serviço: " + reciboSmrsuDTO.getNomeTitular() + "  \n" + 
				"CNPJ: " + reciboSmrsuDTO.getCnpjFormatado() + "\n" + 
				"Data: " + reciboSmrsuDTO.getDataRegistro() + "\n" + 
				"Número do recibo: " + reciboSmrsuDTO.getNumeroRecibo());
		return dataSource;
	}

}


// Fim do arquivo: DataSourceRelatorios.java

// Arquivo: Templates.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\Templates.java

package br.gov.ana.sarsb.relatorio.dynamicReports;

import static net.sf.dynamicreports.report.builder.DynamicReports.cmp;
import static net.sf.dynamicreports.report.builder.DynamicReports.stl;
import static net.sf.dynamicreports.report.builder.DynamicReports.template;

import java.awt.Color;
import java.math.BigDecimal;
import java.util.Locale;

import net.sf.dynamicreports.jasper.builder.export.JasperPdfExporterBuilder;
import net.sf.dynamicreports.report.builder.DynamicReports;
import net.sf.dynamicreports.report.builder.MarginBuilder;
import net.sf.dynamicreports.report.builder.ReportTemplateBuilder;
import net.sf.dynamicreports.report.builder.component.ComponentBuilder;
import net.sf.dynamicreports.report.builder.style.BorderBuilder;
import net.sf.dynamicreports.report.builder.style.StyleBuilder;
import net.sf.dynamicreports.report.builder.subtotal.AggregationSubtotalBuilder;
import net.sf.dynamicreports.report.constant.HorizontalAlignment;

public class Templates {

	protected static final StyleBuilder rootStyle;
	protected static final StyleBuilder boldCenteredStyle;
	protected static final StyleBuilder bold08CenteredStyle;
	protected static final StyleBuilder bold10CenteredStyle;
	protected static final StyleBuilder bold11CenteredStyle;
	protected static final StyleBuilder bold12CenteredStyle;
	protected static final StyleBuilder bold12DireitaStyle;
	protected static final StyleBuilder bold12EsquerdaStyle;
	protected static final StyleBuilder bold18CenteredStyle;
	protected static final StyleBuilder bold22CenteredStyle;
	protected static ComponentBuilder<?, ?> dynamicReportsComponent;
	protected static final ReportTemplateBuilder reportTemplate;
	protected static StyleBuilder negrito = stl.style().bold();
	protected static StyleBuilder negritoBold = stl.style().bold().setPadding(30);
	protected static StyleBuilder padding10 = stl.style().setPadding(0);
	protected static StyleBuilder centralizado = stl.style().setHorizontalAlignment(HorizontalAlignment.CENTER);
	protected static StyleBuilder direita = stl.style().setHorizontalAlignment(HorizontalAlignment.LEFT);
	protected static StyleBuilder esquerda = stl.style().setHorizontalAlignment(HorizontalAlignment.RIGHT);
	protected static StyleBuilder valueStyle = stl.style();
	protected static StyleBuilder shippingStyle = stl.style().setUnderline(true).setItalic(true);
	protected static AggregationSubtotalBuilder<BigDecimal> totalSum;
	protected static JasperPdfExporterBuilder pdfExporter;
	protected static MarginBuilder marginBuilder;
	protected static StyleBuilder fontStyle;

	protected static StyleBuilder borderNegrito;
	protected static StyleBuilder borderEsquerda;
	protected static StyleBuilder borderNormal;
	protected static BorderBuilder border;

	protected static StyleBuilder plainStyle = stl.style().setFontSize(10).setFontName("DejaVu Sans");
	protected static StyleBuilder boldStyle = stl.style(plainStyle).bold().setFontName("DejaVu Sans");;
	protected static StyleBuilder italicStyle = stl.style(plainStyle).italic().setFontName("DejaVu Sans");;
	protected static StyleBuilder boldItalicStyle = stl.style(plainStyle).boldItalic().setFontName("DejaVu Sans");
	
	static {

		marginBuilder = DynamicReports.margin().setBottom(60).setLeft(60).setRight(60).setTop(60);

		rootStyle = stl.style().setPadding(2);
		boldStyle = stl.style(rootStyle).bold();
		italicStyle = stl.style(rootStyle).italic();
		fontStyle = stl.style();

		boldCenteredStyle = stl.style(boldStyle).setHorizontalAlignment(HorizontalAlignment.CENTER);

		bold08CenteredStyle = stl.style(boldCenteredStyle).setFontSize(8).setHorizontalAlignment(HorizontalAlignment.CENTER);
		bold11CenteredStyle = stl.style(boldCenteredStyle).setFontSize(11).setHorizontalAlignment(HorizontalAlignment.CENTER);
		bold12CenteredStyle = stl.style(boldCenteredStyle).setFontSize(12).setHorizontalAlignment(HorizontalAlignment.CENTER).underline();
		bold12DireitaStyle = stl.style(boldCenteredStyle).setFontSize(12).setHorizontalAlignment(HorizontalAlignment.LEFT);
		bold12EsquerdaStyle = stl.style(boldCenteredStyle).setFontSize(12).setHorizontalAlignment(HorizontalAlignment.RIGHT);
		bold10CenteredStyle = stl.style(boldCenteredStyle).setFontSize(10).setHorizontalAlignment(HorizontalAlignment.CENTER).underline();
		bold18CenteredStyle = stl.style(boldCenteredStyle).setFontSize(18).setHorizontalAlignment(HorizontalAlignment.CENTER);
		bold22CenteredStyle = stl.style(boldCenteredStyle).setFontSize(22).setHorizontalAlignment(HorizontalAlignment.CENTER);


		 BorderBuilder border = stl.border();
		 border.setBottomPen(stl.penThin().setLineColor(Color.BLACK))
         .setLeftPen(stl.penThin().setLineColor(Color.BLACK))
         .setTopPen(stl.penThin().setLineColor(Color.BLACK))
         .setRightPen(stl.penThin().setLineColor(Color.BLACK));

   	    borderNormal = stl.style().setBorder(border).setHorizontalAlignment(HorizontalAlignment.CENTER);
		borderNegrito = stl.style(boldStyle).setBorder(border).setHorizontalAlignment(HorizontalAlignment.CENTER);
		borderEsquerda = stl.style(boldStyle).setBorder(border).setHorizontalAlignment(HorizontalAlignment.LEFT);
		reportTemplate = template().setLocale(Locale.ENGLISH);

	}

	public static ComponentBuilder<?, ?> createTitleComponent(String label) {
		return createTitleComponent(label, false);
	}

	public static ComponentBuilder<?, ?> createTitleComponent(String label, boolean centralizar) {
		dynamicReportsComponent = cmp
				.horizontalList(cmp.image(Templates.class.getResource("logo.jpg")).setFixedDimension(120, 80)).newRow().newRow()
				.add(cmp.verticalGap(0).setStyle(direita));

		if(centralizar) {
			return cmp.horizontalList().add(dynamicReportsComponent).setStyle(bold12CenteredStyle).newRow().newRow()
				.add(cmp.text(label).setStyle(bold12CenteredStyle)).newRow().newRow().add(cmp.verticalGap(10));
		} else {
			return cmp.horizontalList().add(dynamicReportsComponent).setStyle(bold12DireitaStyle).newRow().newRow()
					.add(cmp.text(label).setStyle(bold12DireitaStyle)).newRow().newRow().add(cmp.verticalGap(10));
		}
	}

}

// Fim do arquivo: Templates.java

============================================================

PACOTE 28 - [Other] br.gov.ana.sarsb.relatorio.dynamicReports.build
------------------------------------------------------------
Arquivos: 1 | Métodos: 0

// Arquivo: BuildSubReportReciboSmrsu.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\build\BuildSubReportReciboSmrsu.java

package br.gov.ana.sarsb.relatorio.dynamicReports.build;

import static net.sf.dynamicreports.report.builder.DynamicReports.cmp;
import static net.sf.dynamicreports.report.builder.DynamicReports.report;

import java.io.File;
import java.io.IOException;

import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.relatorio.dynamicReports.BuildSubReport;
import br.gov.ana.sarsb.relatorio.dynamicReports.Templates;
import net.sf.dynamicreports.report.exception.DRException;

public class BuildSubReportReciboSmrsu extends BuildSubReport {

	public static BuildSubReportReciboSmrsu relatorio = new BuildSubReportReciboSmrsu();

	public static ReciboDTO build(ReciboDTO reciboSmrsuDTO) throws Exception {
		pdfExporter = retornaConfiguracoes();
		gerarRelatorioRecibo(reciboSmrsuDTO);
		return reciboSmrsuDTO;
	}

	private static void gerarRelatorioRecibo(ReciboDTO reciboSmrsuDTO) throws DRException, IOException {
        report().setPageMargin(marginBuilder.setBottom(60).setLeft(80).setRight(80).setTop(60))
            .title(Templates.createTitleComponent(RECIBO_SMRSU, true),
               cmp.subreport(relatorio.reciboFormularioSmrsu("Comprovante de Envio", reciboSmrsuDTO)
            .toPdf(pdfExporter)));
       	reciboSmrsuDTO.setRecibo(new File(pdfExporter.getExporter().getOutputFileName()));
   }

}


// Fim do arquivo: BuildSubReportReciboSmrsu.java

============================================================

PACOTE 29 - [Other] br.gov.ana.sarsb.relatorio.dynamicReports.fonts
------------------------------------------------------------
Arquivos: 2 | Métodos: 6

// Arquivo: DataSource.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\fonts\DataSource.java

/**
 * DynamicReports - Free Java reporting library for creating reports dynamically
 *
 * Copyright (C) 2010 - 2011 Ricardo Mariaca
 * http://dynamicreports.sourceforge.net
 *
 * This file is part of DynamicReports.
 *
 * DynamicReports is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DynamicReports is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with DynamicReports. If not, see <http://www.gnu.org/licenses/>.
 */

package br.gov.ana.sarsb.relatorio.dynamicReports.fonts;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;
import net.sf.jasperreports.engine.JRRewindableDataSource;

/**
 * @author Ricardo Mariaca (dynamicreports@gmail.com)
 */
public class DataSource implements JRRewindableDataSource {
	private String[] columns;
	private List<Map<String, Object>> values;
	private Iterator<Map<String, Object>> iterator;
	private Map<String, Object> currentRecord;

	public DataSource(String ...columns) {
		this.columns = columns;
		this.values = new ArrayList<Map<String, Object>>();
	}

	public void add(Object ...values) {
		Map<String, Object> row = new HashMap<String, Object>();
		for (int i = 0; i < values.length; i++) {
			row.put(columns[i], values[i]);
		}
		this.values.add(row);
	}

	public Object getFieldValue(JRField field) throws JRException {
		return currentRecord.get(field.getName());
	}

	public boolean next() throws JRException {
		if (iterator == null) {
			this.iterator = values.iterator();
		}
		boolean hasNext = iterator.hasNext();
		if (hasNext) {
			currentRecord = iterator.next();
		}
		return hasNext;
	}

	public void moveFirst() throws JRException {
		this.iterator = null;
	}
}


// Fim do arquivo: DataSource.java

// Arquivo: FontsReport.java
// Caminho: \br\gov\ana\sarsb\relatorio\dynamicReports\fonts\FontsReport.java

/**
 * DynamicReports - Free Java reporting library for creating reports dynamically
 *
 * Copyright (C) 2010 - 2011 Ricardo Mariaca
 * http://dynamicreports.sourceforge.net
 *
 * This file is part of DynamicReports.
 *
 * DynamicReports is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DynamicReports is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with DynamicReports. If not, see <http://www.gnu.org/licenses/>.
 */

package br.gov.ana.sarsb.relatorio.dynamicReports.fonts;

import static net.sf.dynamicreports.report.builder.DynamicReports.cmp;
import static net.sf.dynamicreports.report.builder.DynamicReports.col;
import static net.sf.dynamicreports.report.builder.DynamicReports.report;
import static net.sf.dynamicreports.report.builder.DynamicReports.type;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.util.Date;

import br.gov.ana.sarsb.relatorio.dynamicReports.Templates;
import net.sf.dynamicreports.report.exception.DRException;
import net.sf.jasperreports.engine.JRDataSource;

/**
 * @author Ricardo Mariaca (dynamicreports@gmail.com)
 */
public class FontsReport extends Templates{

	public FontsReport() {
		build();
	}

	private void build() {

		try {
			report()
				.setColumnStyle(plainStyle)
				.setColumnTitleStyle(boldStyle)
			  .columns(
			  	col.column("Item",       "item",      type.stringType()),
			  	col.column("Quantity",   "quantity",  type.integerType()),
			  	col.column("Unit price", "unitprice", type.bigDecimalType()))
			  .title(
			  	cmp.text("text - default font"),
			  	cmp.text("text - plain").setStyle(plainStyle),
			  	cmp.text("text - bold").setStyle(boldStyle),
			  	cmp.text("text - italic").setStyle(italicStyle),
			  	cmp.text("text - bolditalic").setStyle(boldItalicStyle))
			  .setDataSource(createDataSource())
			  .toPdf(new FileOutputStream("relatorio.pdf"))
			  .show();
		} catch (DRException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	private JRDataSource createDataSource() {
		DataSource dataSource = new DataSource("item", "orderdate", "quantity", "unitprice");
		dataSource.add("Notebook", new Date(), 1, new BigDecimal(500));
		return dataSource;
	}

	public static void main(String[] args) {
		new FontsReport();
	}
}

// Fim do arquivo: FontsReport.java

============================================================

PACOTE 30 - [Other] br.gov.ana.sarsb.resource
------------------------------------------------------------
Arquivos: 37 | Métodos: 20

// Arquivo: AditivoAgenciaResource.java
// Caminho: \br\gov\ana\sarsb\resource\AditivoAgenciaResource.java

package br.gov.ana.sarsb.resource;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo.AditivoAgenciaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo.RespostaAditivoDTO;
import br.gov.ana.sarsb.service.AditivoAgenciaService;

@RestController
@RequestMapping(path = "/aditivoAgencia")
@PreAuthorize("isAuthenticated()")
public class AditivoAgenciaResource {
	
	@Autowired
	private AditivoAgenciaService aditivoAgenciaService;

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> salvarAditivoAgencia(@Valid @RequestBody AditivoAgenciaDTO aditivoAgenciaDTO) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.salvarAditivoAgencia(aditivoAgenciaDTO), HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> atualizarAditivoAgencia(@Valid @RequestBody AditivoAgenciaDTO aditivoAgenciaDTO) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.atualizarAditivoAgencia(aditivoAgenciaDTO), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/consultarFormularioAditivo/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarFormularioAgencia(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.criarOuConsultarFormularioAditivo(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/consultarFormularioSmsru/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarFormularioSmsru(@PathVariable long id) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.criarOuConsultarFormularioSmsru(id), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/consultarListaAditivoAgencia/{idFormulario}/{protocolo}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarListaAditivoAgencia(@PathVariable("idFormulario") Long idFormulario, @PathVariable("protocolo") String protocolo) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.listarAditivoAgenciaPorProtocolo(idFormulario, protocolo), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/consultarListaMunicipioAditivo/{idFormulario}/{protocolo}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarListaMunicipioAditivo(@PathVariable("idFormulario") Long idFormulario, @PathVariable("protocolo") String protocolo) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.listarMunicipiosAditivo(idFormulario, protocolo), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/consultarListaAditivoProtocolo/{idFormulario}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarListaAditivoAgencia(@PathVariable("idFormulario") Long idFormulario) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.listarAditicoProtocoloPorFormulario(idFormulario), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@DeleteMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<?> deletarAditivoAgencia(@PathVariable("id") Long id) {
		try {
			aditivoAgenciaService.deletarAditivoAgencia(id);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	
	@PostMapping(path = "/salvarQuestionarioProtocolo", consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> salvarQuestionarioProtocolo(@Valid @RequestBody List<RespostaAditivoDTO> lista) {
		try {
			aditivoAgenciaService.salvarQuestionarioAditivo(lista);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PutMapping(path = "/atualizarQuestionarioProtocolo", consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> atualizarQuestionarioProtocolo(@Valid @RequestBody List<RespostaAditivoDTO> lista) {
		try {
			aditivoAgenciaService.atualizarQuestionarioAditivo(lista);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping(path = "/finalizarFormulario/{idFormulario}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> finalizarFormulario(@PathVariable("idFormulario") Long idFormulario) {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.finalizarFormularioAditivo(idFormulario), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@PostMapping(path = "/finalizarFormulariosmsru/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> finalizarFormularioSmsru(@PathVariable long id)  {
		try {
			return new ResponseEntity<>(aditivoAgenciaService.finalizarFormularioSmsru(id), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

}


// Fim do arquivo: AditivoAgenciaResource.java

// Arquivo: AgenciaReguladoraResource.java
// Caminho: \br\gov\ana\sarsb\resource\AgenciaReguladoraResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.service.AgenciaReguladoraService;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@RestController
@RequestMapping(path = "/agenciaReguladora")
public class AgenciaReguladoraResource {
	
	@Autowired
	private AgenciaReguladoraService agenciaReguladoraService;



	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> salvarAgencia(@Valid @RequestBody AgenciaReguladoraDTO agenciaReguladoraDTO) {
		try {
			agenciaReguladoraService.criarAgencia(agenciaReguladoraDTO);
			return new ResponseEntity<>(HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> atualizarAgencia(@Valid @RequestBody AgenciaReguladoraDTO agenciaReguladoraDTO) {
		try {
			agenciaReguladoraService.atualizarAgencia(agenciaReguladoraDTO);

			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarAgencia(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(agenciaReguladoraService.recuperarAgencia(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/agenciaReguladoraJaExiste/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> agenciaReguladoraJaExiste(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(agenciaReguladoraService.agenciaReguladoraJaExiste(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PutMapping(path = "/ativar/{hash}")
    @ApiOperation(value = "Ativar cadastro de nova Entidade reguladora no sistema")
	private ResponseEntity<?> ativarNovaAgenciaReguladora(@PathVariable("hash") String hash) {
		try {
			agenciaReguladoraService.ativarNovaAgenciaReguladora(hash);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
}



// Fim do arquivo: AgenciaReguladoraResource.java

// Arquivo: AtoNormativoDetalhadoResource.java
// Caminho: \br\gov\ana\sarsb\resource\AtoNormativoDetalhadoResource.java

package br.gov.ana.sarsb.resource;


import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.AtoNormativoDetalhadoDTO;
import br.gov.ana.sarsb.model.entity.AtoNormativoDetalhado;
import br.gov.ana.sarsb.service.AtoNormativoDetalhadoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/ato-normativo-detalhado")
public class AtoNormativoDetalhadoResource {
    @Autowired
    private AtoNormativoDetalhadoService service;

    @PostMapping
    public ResponseEntity<AtoNormativoDetalhado> inserir(@RequestBody AtoNormativoDetalhadoDTO dto) {
        return ResponseEntity.ok(service.salvar(dto));
    }

    @PutMapping("/{id}")
    public ResponseEntity<AtoNormativoDetalhado> atualizar(@PathVariable Long id, @RequestBody AtoNormativoDetalhadoDTO dto) {
        return ResponseEntity.ok(service.atualizar(id, dto));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> excluir(@PathVariable Long id) {
        service.excluirLogicamente(id);
        return ResponseEntity.noContent().build();
    }



    @GetMapping("/por-id-agr/{idAgr}")
    public List<AtoNormativoDetalhado> buscarPorIdAgr(@PathVariable Long idAgr) {
        return service.buscarPorIdAgr(idAgr);
    }




}


// Fim do arquivo: AtoNormativoDetalhadoResource.java

// Arquivo: AtoNormativoEriResource.java
// Caminho: \br\gov\ana\sarsb\resource\AtoNormativoEriResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.entity.AtoNormativoEri;
import br.gov.ana.sarsb.service.AtoNormativoService;
import br.gov.ana.sarsb.service.FileStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;

@RestController
@RequestMapping(path = "/atoNormativo")
public class AtoNormativoEriResource {

    @Autowired
    private AtoNormativoService atoNormativoService;


    @Autowired
    private FileStorageService fileStorageService;

    @PostMapping()
    public ResponseEntity<?> salvarAtoNormativo(@Valid @RequestBody AtoNormativoEriDTO atoNormativoEriDTO) {
        try {
            AtoNormativoEri ato = atoNormativoService.salvarAtoNormativo(atoNormativoEriDTO);
            return new ResponseEntity<>(ato, HttpStatus.CREATED);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> atualizarAtoNormativo(@Valid @RequestBody AtoNormativoEriDTO atoNormativoEriDTO) {
        try {
            atoNormativoService.atualizarAtoNormativo(atoNormativoEriDTO);
            return new ResponseEntity<>(Boolean.TRUE, HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarAtoNormativo(@PathVariable("id") Long id) {
        try {
            return new ResponseEntity<>(atoNormativoService.recuperarAtoNormativo(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping(path = "/listaAtosNormativosEri", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listaAtosNormativosEri() {
        try {
            return new ResponseEntity<>(atoNormativoService.listaAtosNormativosEri(), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/consultarAtoNormativoPorAgencia/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarAtoNormativoPorAgenciaReguladora(@PathVariable("id") Long id) {
        try {
            return new ResponseEntity<>(atoNormativoService.consultarAtoNormativoPorAgenciaReguladora(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping(path = "/consultarAtoNormativoPorAno/{ano}/{idEri}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarAtoNormativoPorAno(@PathVariable("ano") Long ano, @PathVariable("idEri") Long idEri) {
        try {
            return new ResponseEntity<>(atoNormativoService.consultarAtoNormativoPorAnoEri(ano, idEri), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping("/downloadAto/{formulario}/bucket/{id}/{cnpj}")
    public ResponseEntity<?> downloadFileS3AtoNormativo( @PathVariable("formulario") Long formulario, @PathVariable("id") Long id, @PathVariable("cnpj") String cnpj,
                                                        HttpServletRequest request) {
        try {
            String nomeArquivoAtualizado = atoNormativoService.consultarNomeArquivoAtoNormativo(id);
            return fileStorageService.loadS3(nomeArquivoAtualizado, cnpj, formulario);
        } catch (IOException e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }

    }









}


// Fim do arquivo: AtoNormativoEriResource.java

// Arquivo: AtualizarDadosMunicipioRequest.java
// Caminho: \br\gov\ana\sarsb\resource\AtualizarDadosMunicipioRequest.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunEsgotoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunAguaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoDTO;

import java.util.List;

public class AtualizarDadosMunicipioRequest {
    private List<MonitoramentoUniversalizacaoMunAguaDTO> agua;
    private List<MonitoramentoUniversalizacaoMunEsgotoDTO> esgoto;
    private List<MunicipiosUniversalizacaoDTO> dadosGerais; // Updated to match JSON

    // Getters and Setters

    public List<MonitoramentoUniversalizacaoMunAguaDTO> getAgua() {
        return agua;
    }

    public void setAgua(List<MonitoramentoUniversalizacaoMunAguaDTO> agua) {
        this.agua = agua;
    }

    public List<MonitoramentoUniversalizacaoMunEsgotoDTO> getEsgoto() {
        return esgoto;
    }

    public void setEsgoto(List<MonitoramentoUniversalizacaoMunEsgotoDTO> esgoto) {
        this.esgoto = esgoto;
    }

    public List<MunicipiosUniversalizacaoDTO> getDadosGerais() {
        return dadosGerais;
    }

    public void setDadosGerais(List<MunicipiosUniversalizacaoDTO> dadosGerais) {
        this.dadosGerais = dadosGerais;
    }

    public List<MunicipiosUniversalizacaoDTO> getDadosgerais() {
        return dadosGerais;
    }
}


// Fim do arquivo: AtualizarDadosMunicipioRequest.java

// Arquivo: AtualizarDadosPrestadorUniversalizacaoRequest.java
// Caminho: \br\gov\ana\sarsb\resource\AtualizarDadosPrestadorUniversalizacaoRequest.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoPrtAguaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoPrtEsgDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PrestadorUniversalizacaoDTO;

import java.util.List;

public class AtualizarDadosPrestadorUniversalizacaoRequest {
    private List<MonitoramentoUniversalizacaoPrtAguaDTO> agua;
    private List<MonitoramentoUniversalizacaoPrtEsgDTO> esgoto;
    private List<PrestadorUniversalizacaoDTO> dadosGerais; // Updated to match JSON

    // Getters and Setters

    public List<MonitoramentoUniversalizacaoPrtAguaDTO> getAgua() {
        return agua;
    }

    public void setAgua(List<MonitoramentoUniversalizacaoPrtAguaDTO> agua) {
        this.agua = agua;
    }

    public List<MonitoramentoUniversalizacaoPrtEsgDTO> getEsgoto() {
        return esgoto;
    }

    public void setEsgoto(List<MonitoramentoUniversalizacaoPrtEsgDTO> esgoto) {
        this.esgoto = esgoto;
    }

    public List<PrestadorUniversalizacaoDTO> getDadosGerais() {
        return dadosGerais;
    }

    public void setDadosGerais(List<PrestadorUniversalizacaoDTO> dadosGerais) {
        this.dadosGerais = dadosGerais;
    }
}


// Fim do arquivo: AtualizarDadosPrestadorUniversalizacaoRequest.java

// Arquivo: CadastranteResource.java
// Caminho: \br\gov\ana\sarsb\resource\CadastranteResource.java

package br.gov.ana.sarsb.resource;

import javax.validation.Valid;

import br.gov.ana.sarsb.model.entity.Cadastrante;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.CadastranteDTO;
import br.gov.ana.sarsb.service.CadastranteService;









@RestController
@RequestMapping(path = "/cadastrante")
public class CadastranteResource {
	
	@Autowired
	private CadastranteService cadastranteService;

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> salvarCadastrante(@Valid @RequestBody CadastranteDTO cadastranteDTO) {
		try {
			cadastranteService.salvarCadastrante(cadastranteDTO);
			return new ResponseEntity<>(HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

    @PutMapping(path = "/{codigomunicipio}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> atualizarOuCriarCadastrante(@PathVariable("codigomunicipio") long codigomunicipio, @Valid @RequestBody CadastranteDTO cadastranteDTO) {
        try {
            CadastranteDTO cadastranteExistente = cadastranteService.recuperarCadastranteid(codigomunicipio);
            if (cadastranteExistente.getId() == null) {
                CadastranteDTO novoCadastrante = new CadastranteDTO();

                novoCadastrante.setPrefeitura(cadastranteDTO.getPrefeitura());
                novoCadastrante.setNome(cadastranteDTO.getNome());
                novoCadastrante.setCpf(cadastranteDTO.getCpf());
                novoCadastrante.setCargo(cadastranteDTO.getCargo());
                novoCadastrante.setEmail(cadastranteDTO.getEmail());
                novoCadastrante.setTelefone(cadastranteDTO.getTelefone());
                novoCadastrante.setPossuiVinculoPrefeitura(cadastranteDTO.getPossuiVinculoPrefeitura());
                novoCadastrante.setDepartamento(cadastranteDTO.getDepartamento());
                cadastranteService.salvarCadastrante(novoCadastrante);
                return ResponseEntity.ok().build();
            }

            cadastranteExistente.setNome(cadastranteDTO.getNome());
            cadastranteExistente.setCpf(cadastranteDTO.getCpf());
            cadastranteExistente.setCargo(cadastranteDTO.getCargo());
            cadastranteExistente.setEmail(cadastranteDTO.getEmail());
            cadastranteExistente.setTelefone(cadastranteDTO.getTelefone());
            cadastranteExistente.setPossuiVinculoPrefeitura(cadastranteDTO.getPossuiVinculoPrefeitura());
            cadastranteExistente.setDepartamento(cadastranteDTO.getDepartamento());

            cadastranteService.alterarCadastrante(cadastranteExistente);

            return ResponseEntity.ok().build();
        } catch (NegocioException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }








    @GetMapping("/{codigomunicipio}")

	public ResponseEntity<?> getCadastrante(@PathVariable("codigomunicipio") long codigomunicipio) {
		try {
			CadastranteDTO cadastranteDTO = cadastranteService.recuperarCadastranteid(codigomunicipio);
			return ResponseEntity.ok(cadastranteDTO);
		} catch (NegocioException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
		}
	}
}
	



// Fim do arquivo: CadastranteResource.java

// Arquivo: ConformidadeEntidadeResource.java
// Caminho: \br\gov\ana\sarsb\resource\ConformidadeEntidadeResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.ConformidadeEntidadeDTO;
import br.gov.ana.sarsb.service.ConformidadeEntidadeService;
import br.gov.ana.sarsb.service.ConformidadeServicoService;
import br.gov.ana.sarsb.service.DocumentoCondicoesGeraisService;
import br.gov.ana.sarsb.service.FileStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;

@RestController
@RequestMapping(path = "/conformidadeEntidade")
@PreAuthorize("isAuthenticated()")
public class ConformidadeEntidadeResource {

    @Autowired
    ConformidadeEntidadeService conformidadeEntidadeService;

    @Autowired
    DocumentoCondicoesGeraisService documentoCondicoesGeraisService;

    @Autowired
    private FileStorageService fileStorageService;

    @Autowired
    private ConformidadeServicoService conformidadeServicoService;

    @GetMapping(path = "/listarConformidades/{idEri}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listarConformidadesPorEri(@PathVariable("idEri") Long idEri) {
        try {
            return new ResponseEntity<>(conformidadeEntidadeService.listarConformidadesPorEri(idEri), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping(path = "/listarConformidades/{idEri}/{ano}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listarConformidadesPorEriAno(@PathVariable("idEri") Long idEri, @PathVariable("ano") Long ano) {
        try {
            return new ResponseEntity<>(conformidadeEntidadeService.listarConformidadesPorEriAno(idEri, ano), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarConformidadePorId(@PathVariable("id") Long id) {
        try {
            return new ResponseEntity<>(conformidadeEntidadeService.consultarConformidadePorId(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> atualizarAtoNormativo(@Valid @RequestBody ConformidadeEntidadeDTO conformidadeEntidade) {
        try {
            conformidadeEntidadeService.atualizarConformidade(conformidadeEntidade);
            return new ResponseEntity<>(Boolean.TRUE, HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping("/download/{formulario}/bucket/{id}/{cnpj}/{nomeArquivo}")
    public ResponseEntity<?> downloadFileS3( @PathVariable("formulario") Long formulario, @PathVariable("id") Long id,
                                             @PathVariable("cnpj") String cnpj, @PathVariable("nomeArquivo") String nomeArquivo,
                                                         HttpServletRequest request) {
        try {
            return fileStorageService.loadS3(nomeArquivo, cnpj, formulario);
        } catch (IOException e){
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }

    }

    @PostMapping(path = "/salvar", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> salvarQuestionarioProtocolo(@Valid @RequestBody ConformidadeEntidadeDTO conformidadeEntidade) {
        try {
            conformidadeEntidadeService.salvarConformidade(conformidadeEntidade);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/validar-replica-conformidade/{idConformidade}/{uf}/{ufDesc}/{idAgr}/{ano}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> validarReplicaConformidade(@PathVariable("idConformidade") Long idConformidade,
                                                        @PathVariable("uf") String uf,
                                                        @PathVariable("ufDesc") String ufDesc,
                                                        @PathVariable("idAgr") Long idAgr,
                                                        @PathVariable("ano") Long ano
                                                        ) {
        try {
            return new ResponseEntity<>(conformidadeEntidadeService.isReplicacaoValida(idConformidade, uf,
                    ufDesc, idAgr, ano), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

}


// Fim do arquivo: ConformidadeEntidadeResource.java

// Arquivo: ConformidadeServicoResource.java
// Caminho: \br\gov\ana\sarsb\resource\ConformidadeServicoResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.FiltroConformidadeServicoDTO;
import br.gov.ana.sarsb.service.ConformidadeServicoService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.text.ParseException;
import java.util.List;

@RestController
@RequestMapping(path = "/conformidade-servico")
@PreAuthorize("isAuthenticated()")
public class ConformidadeServicoResource {

    private final ConformidadeServicoService conformidadeServicoService;

    public ConformidadeServicoResource(ConformidadeServicoService conformidadeServicoService) {
        this.conformidadeServicoService = conformidadeServicoService;
    }

    @GetMapping(path = "/listar", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listar() {
        List<ConformidadeServicoDTO> conformidadeServicos = conformidadeServicoService.findAll();
        return ResponseEntity.ok(conformidadeServicos);
    }

    @GetMapping(path = "/listar/{idAgencia}/{anoColeta}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listarPorAgenciaEAnoColeta(@PathVariable("idAgencia") Long idAgencia,
                                                        @PathVariable("anoColeta") Long anoColeta
    ) {
        try {
            return new ResponseEntity<>(conformidadeServicoService.findAllByAgenciaReguladoraIdAndAnoColeta(idAgencia, anoColeta), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deletar(@PathVariable("id") Long id) {
        try {
            conformidadeServicoService.deleteById(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping("/pesquisar")
    public ResponseEntity<List<ConformidadeServicoDTO>> pesquisar(
            @RequestBody FiltroConformidadeServicoDTO filtro) {

        List<ConformidadeServicoDTO> conformidadeServicoDTOS = conformidadeServicoService.pesquisar(filtro);
        return new ResponseEntity<>(conformidadeServicoDTOS, HttpStatus.OK);
    }

    @PostMapping("/cadastrarConformidade")
    public ResponseEntity<ConformidadeEntidadeServicosDTO> salvarConformidade(@RequestBody ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO) {
        try {
            conformidadeServicoService.salvarConformidade(conformidadeEntidadeServicosDTO);
            return new ResponseEntity<>(HttpStatus.CREATED);
        } catch (NegocioException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @GetMapping(path = "/listarConformidadePorId/{id}/{ano}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listarPorAgenciaAnoColeta(@PathVariable("id") Long id,
                                                       @PathVariable("ano") Long ano) {
        try {
            return new ResponseEntity<>(conformidadeServicoService.buscarConformidadePorId(id, ano), HttpStatus.OK);
        } catch (NegocioException | ParseException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> atualizarConformidade(@Valid @RequestBody ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO) {
        try {
            conformidadeServicoService.atualizarConformidade(conformidadeEntidadeServicosDTO);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/existeConformidadePorMuniUf/{municipio}/{uf}/{idAgencia}/{ano}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> existeConformidadePorMuniUf(@PathVariable("municipio") String municipio, @PathVariable("uf") String uf, @PathVariable("idAgencia") Long idAgencia, @PathVariable("ano") Long ano) {
        try {
            return new ResponseEntity<>(conformidadeServicoService.existeConformidadePorMuniUf(municipio, uf, idAgencia, ano), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping("/finalizar-preenchimento")
    public ResponseEntity<?> finalizarConformidade( @RequestBody List<ConformidadeServicoDTO> listaConformidades) {
        try {
            conformidadeServicoService.finalizarConformidade(listaConformidades);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping(path = "/existePreenchimentoFinalizado/{ano}/{idAgencia}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> existePreenchimentoFinalizado(@PathVariable("ano") Long ano, @PathVariable("idAgencia") Long idAgencia) {
        try {
            return new ResponseEntity<>(conformidadeServicoService.existePreenchimentoFinalizado(ano, idAgencia), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping("/replicar-conformidade")
    public ResponseEntity<ConformidadeEntidadeServicosDTO> replicarConformidade(@RequestBody ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO) {
        try {
            conformidadeServicoService.replicarConformidade(conformidadeEntidadeServicosDTO);
            return new ResponseEntity<>(HttpStatus.CREATED);
        } catch (NegocioException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @PostMapping("/habilitar-preenchimento")
    public ResponseEntity<?> habilitarPreenchimento( @RequestBody List<ConformidadeServicoDTO> listaConformidades) {
        try {
            conformidadeServicoService.habilitarPreenchimento(listaConformidades);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }




    @GetMapping(path = "/validar-municipio-importado/{idAgencia}/{anoColeta}/{codIbge}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> validarMunicipioImportado(@PathVariable("idAgencia") Long idAgencia,
                                                        @PathVariable("anoColeta") Long anoColeta,
                                                       @PathVariable("codIbge") Long codIbge) {
        try {
            return new ResponseEntity<>(conformidadeServicoService.validarMunicipioImportado(idAgencia, anoColeta, codIbge), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }



    @GetMapping(path = "/buscar-atividades/{idAgencia}/{anoColeta}/{uf}/{municipio}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> retornaAtivadadesCadastradas(@PathVariable("idAgencia") Long idAgencia,
                                                       @PathVariable("anoColeta") Long anoColeta,
                                                       @PathVariable("uf") String uf,
                                                          @PathVariable("municipio") String municipio) {
        try {
            return new ResponseEntity<>(conformidadeServicoService.retornaAtivadadesCadastradas(idAgencia, anoColeta, uf, municipio), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

}


// Fim do arquivo: ConformidadeServicoResource.java

// Arquivo: ContratoResource.java
// Caminho: \br\gov\ana\sarsb\resource\ContratoResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.*;
import br.gov.ana.sarsb.model.entity.ContratoDetalhamento;
import br.gov.ana.sarsb.service.ContratoService;
import br.gov.ana.sarsb.service.ContratoServicoAtividadeService;
import io.swagger.annotations.ApiOperation;
import io.swagger.v3.oas.annotations.Operation;
import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping(path = "/contrato")
public class ContratoResource {

    private final ContratoService contratoService;
    private final ContratoServicoAtividadeService contratoServicoAtividadeService;

    public ContratoResource(ContratoService contratoService, ContratoServicoAtividadeService contratoServicoAtividadeService) {
        this.contratoService = contratoService;
        this.contratoServicoAtividadeService = contratoServicoAtividadeService;
    }

    @GetMapping(path = "/listar/{idAgenciaReguladora}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listarContratorPor(@PathVariable("idAgenciaReguladora") Long idAgenciaReguladora) {
        try {
            return new ResponseEntity<>(contratoService.listarContratorPor(idAgenciaReguladora), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping("/pesquisar")
    public ResponseEntity<List<ContratoDTO>> pesquisar(@RequestBody FiltroContratoDTO filtro) {
        List<ContratoDTO> contratos = contratoService.pesquisarContratos(filtro);
        return new ResponseEntity<>(contratos, HttpStatus.OK);
    }

    @PostMapping(path = "/salvar", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> salvar(@RequestPart("contrato") ContratoDTO contratoDTO,
                                    @RequestPart(value = "aditivo", required = false) List<ContratoAditivoVinculadoDTO> aditivos
    ) {
        try {
            contratoDTO.setDataCadastro(LocalDateTime.now());
            ContratoDTO contrato = contratoService.salvar(contratoDTO, aditivos);
            return new ResponseEntity<>(contrato, HttpStatus.OK);
        } catch (NegocioException | IOException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/obter-sequencial/{idAgenciaReguladora}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> obterSequencial(@PathVariable("idAgenciaReguladora") Long idAgenciaReguladora) {
        try {
            String contador = String.format("%05d", contratoService.obterSequencial(idAgenciaReguladora));
            Map<String, String> response = new HashMap<>();
            response.put("sequencial", contador.concat("/" + idAgenciaReguladora));
            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping(path = "/excluir/{id}")
    public ResponseEntity<?> excluir(@PathVariable("id") Long id) {
        contratoService.deletarContrato(id);
        try {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }

    }

    @GetMapping(value = "/relatorio-xls/{idAgenciaReguladora}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    @ApiOperation("Gere um relatório XLS com base no id do contrato")
    public void gerarRelatorio(@PathVariable Long idAgenciaReguladora, HttpServletResponse response) {
        try (Workbook workbook = contratoService.gerarRelatorioXLS(idAgenciaReguladora)) {
            response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setHeader("Content-Disposition", "attachment; filename=relatorio-contratos.xlsx");

            try (OutputStream outputStream = response.getOutputStream()) {
                workbook.write(outputStream);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @PutMapping(path = "/atualizar/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> atualizar(@PathVariable Long id,
                                       @RequestPart("contrato") ContratoDTO contratoDTO,
                                       @RequestPart("aditivo") List<ContratoAditivoVinculadoDTO> aditivos) {
        try {
            contratoDTO.setId(id);
            ContratoDTO contratoAtualizado = contratoService.atualizar(id, contratoDTO, aditivos);
            return new ResponseEntity<>(contratoAtualizado, HttpStatus.OK);
        } catch (NegocioException | IOException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> obterContratoPorId(@PathVariable Long id) {
        try {
            ContratoDTO contrato = contratoService.obterContratoPorId(id);
            return new ResponseEntity<>(contrato, HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/obter-atividades")
    public ResponseEntity<List<ContratoServicoAtividadeDTO>> listarServicos() {
        List<ContratoServicoAtividadeDTO> servicos = contratoServicoAtividadeService.findAll();
        return ResponseEntity.ok(servicos);
    }

    @PostMapping("/obter-contrato-codigo-interno")
    public ResponseEntity<?> obterContratoPorCodigoInterno(@RequestBody String codigoInterno) {
        ContratoDTO contrato = contratoService.obterContratoPorCodigoInterno(codigoInterno);
        return ResponseEntity.ok(contrato);
    }


    @PostMapping("/contrato-detalhamento")
    @Operation(summary = "Salvar contrato detalhamento", description = "Salva um novo contrato detalhamento no banco de dados")
    public ResponseEntity<ContratoDetalhadoDTO> salvarContratoDetalhado(@RequestBody ContratoDetalhadoDTO contratoDetalhado) throws NegocioException {
        return ResponseEntity.ok(contratoService.salvarContratoDetalhado(contratoDetalhado));
    }

    @GetMapping("/contrato-detalhamento/{conDetIdAgr}")
    public ResponseEntity<List<ContratoDetalhadoDTO>> obterContratosPorIdAgr(@PathVariable Long conDetIdAgr) {
        List<ContratoDetalhadoDTO> contratoDetalhado = contratoService.obterContratosDetalhadosPorIdAgr(conDetIdAgr);
        return ResponseEntity.ok(contratoDetalhado);
    }

    @DeleteMapping("/contrato-detalhamento/{id}")
    @Operation(summary = "Excluir contrato logicamente", description = "Marca o contrato como excluído alterando o campo con_excluido para true")
    public ResponseEntity<Void> excluirContratoLogicamente(@PathVariable Long id) throws NegocioException {
        contratoService.excluirContratoLogicamente(id);
        return ResponseEntity.noContent().build();
    }


    @PutMapping("/contrato-detalhamento/{id}")
    public ResponseEntity<ContratoDetalhamento> atualizarDetalhado(@PathVariable Long id, @RequestBody ContratoDetalhadoDTO dto) {
        return ResponseEntity.ok(contratoService.atualizarDetalhado(id, dto));
    }



}


// Fim do arquivo: ContratoResource.java

// Arquivo: DocumentoCondicoesGeraisResource.java
// Caminho: \br\gov\ana\sarsb\resource\DocumentoCondicoesGeraisResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.service.DocumentoCondicoesGeraisService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path = "/documentoCondicoesGerais")
public class DocumentoCondicoesGeraisResource {

    @Autowired
    DocumentoCondicoesGeraisService documentoCondicoesGeraisService;

    @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarDocumentosPorId(@PathVariable("id") Long id) {
        try {
            return new ResponseEntity<>(documentoCondicoesGeraisService.consultarDocumentosPorId(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deletarDocumento(@PathVariable("id") Long id) {
        try {
            documentoCondicoesGeraisService.deletarDocumento(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
}










// Fim do arquivo: DocumentoCondicoesGeraisResource.java

// Arquivo: DocumentoNormativoEriResource.java
// Caminho: \br\gov\ana\sarsb\resource\DocumentoNormativoEriResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.service.DocumentoNormativoEriService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path = "/documentoNormativoEri")
public class DocumentoNormativoEriResource {

    @Autowired
    private DocumentoNormativoEriService documentoNormativoEriService;


    @GetMapping(path = "/listaDocumentosNormativosEri", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listaDocumentosNormativosEri() {
        try {
            return new ResponseEntity<>(documentoNormativoEriService.listaDocumentosNormativosEri(), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/{ano}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listaDocumentosPorAno(@PathVariable("ano") Long ano) {
        try {
            return new ResponseEntity<>(documentoNormativoEriService.recuperarDocumentosPorAno(ano), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/listaDocumentos/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listaDocumentosPorAtoNormativo(@PathVariable("id") Long id) {
        try {
            return new ResponseEntity<>(documentoNormativoEriService.consultarDocumentosPorAtoNormativo(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }




}


// Fim do arquivo: DocumentoNormativoEriResource.java

// Arquivo: DominioResource.java
// Caminho: \br\gov\ana\sarsb\resource\DominioResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoralistaDTO;
import br.gov.ana.sarsb.model.entity.TipoEntidadeReguladora;
import br.gov.ana.sarsb.repository.TipoEntidadeReguladoraRepository;
import br.gov.ana.sarsb.service.AgenciaReguladoraService;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.service.DominioService;

import java.util.List;

@RestController
@RequestMapping(path = "/dominio")
public class DominioResource {
	
	@Autowired
	private DominioService dominioService;
	@Autowired
	private TipoEntidadeReguladoraRepository tipoEntidadeReguladoraRepository;
	@Autowired
	private AgenciaReguladoraService agenciaReguladoraService;


	@GetMapping("/listareris")
	public ResponseEntity<List<AgenciaReguladoralistaDTO>> listareris() {
		try {
			List<AgenciaReguladoralistaDTO> entidades = agenciaReguladoraService.listareris();
			return ResponseEntity.ok(entidades);
		} catch (NegocioException e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GetMapping(path = "/listaEntidadeReguladora", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listaEntidadeReguladora() {
		try {
			return new ResponseEntity<>(dominioService.listarEntidadesReguladoras(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/criarEntidadeReguladoraPrestador")
	public ResponseEntity<?> criarEntidadeReguladora(@RequestBody TipoEntidadeReguladora tipoEntidadeReguladora) {
		try {
			TipoEntidadeReguladora novaEntidadeReguladora = new TipoEntidadeReguladora();
			novaEntidadeReguladora.setDescricao(tipoEntidadeReguladora.getDescricao());
			novaEntidadeReguladora.setCnpj(tipoEntidadeReguladora.getCnpj());
			TipoEntidadeReguladora entidadeReguladoraCriada = tipoEntidadeReguladoraRepository.save(novaEntidadeReguladora);
			return new ResponseEntity<>(entidadeReguladoraCriada, HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/listarCategoriaPrestador", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarCategoriaPrestador() {
		try {
			return new ResponseEntity<>(dominioService.listarCategoriaPrestador(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/listarAtribuicao", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listaAtribuicao() {
		try {
			return new ResponseEntity<>(dominioService.listaAtribuicao(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	
	@GetMapping(path = "/listarEtapaServico", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarEtapaServico() {
		try {
			return new ResponseEntity<>(dominioService.listarEtapaServico(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/listarSubCategoriaPrestador/{idCategoriaPrestador}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarSubCategoriaPrestador(@PathVariable("idCategoriaPrestador") Long idCategoriaPrestador) {
		try {
			return new ResponseEntity<>(dominioService.listarSubCategoriaPrestador(idCategoriaPrestador), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/listarIntrumentoLegal", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarIntrumentoLegal() {
		try {
			return new ResponseEntity<>(dominioService.listarInstrumentoLegal(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/listarTipoDocumentoArrecadacao", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarTipoDocumentoArrecadacao() {
		try {
			return new ResponseEntity<>(dominioService.listarTipoDocumentoArrecadacao(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/listarTipoAgenciaReguladora", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarTipoAgenciaReguladora() {
		try {
			return new ResponseEntity<>(dominioService.listaTipoAgenciaReguladora(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/listarTipoSetorRegulado", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarTipoSetorRegulado() {
		try {
			return new ResponseEntity<>(dominioService.listarTipoSetorRegulado(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/listarTipoServicoRegulado", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarTipoServicoRegulado() {
		try {
			return new ResponseEntity<>(dominioService.listarTipoServicoRegulado(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/listarTipoMultissetorial", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarTipoMultissetorial() {
		try {
			return new ResponseEntity<>(dominioService.listarTipoMultissetorial(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/listarTipoDocumentoPrestador", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarTipoDocumentoPrestador() {
		try {
			return new ResponseEntity<>(dominioService.listaTipoDocumentoPrestador(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/listarPerguntaDecreto/{idQuestionario}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarPerguntaDecreto(@PathVariable("idQuestionario") Long idQuestionario) {
		try {
			return new ResponseEntity<>(dominioService.listaPerguntaDecreto(idQuestionario), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/listartipoDocumentoCriacao", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listartipoDocumentoCriacao() {
		try {
			return new ResponseEntity<>(dominioService.listartipoDocumentoCriacao(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/listarparametrocobranca", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarparametrocobranca() {
		try {
			return new ResponseEntity<>(dominioService.listarparametrocobranca(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


    @GetMapping(path = "/listarcategoriassmru", produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Listar Categorias")
    public ResponseEntity<?> listarcategoriassmru() {
        try {
            return new ResponseEntity<>(dominioService.listarcategoriassmru(), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


	@GetMapping(path = "/listarvalorescobradossmru", produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Listar Valores Cobrados no SMRSU")
	public ResponseEntity<?> listarvalorescobradossmru() {
		try {
			return new ResponseEntity<>(dominioService.listarvalorescobradossmru(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/listarcobrancasocialsmru", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarcobrancasocialsmru() {
		try {
			return new ResponseEntity<>(dominioService.listarcobrancasocialsmru(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/listarTipoRegimeCobranca", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> listarTipoRegimeCobranca() {
		try {
			return new ResponseEntity<>(dominioService.listarTipoRegimeCobranca(), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	
}


// Fim do arquivo: DominioResource.java

// Arquivo: FinalizacaoPreenchimentoResource.java
// Caminho: \br\gov\ana\sarsb\resource\FinalizacaoPreenchimentoResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.FinalizacaoPreenchimentoDTO;
import br.gov.ana.sarsb.service.FinalizacaoPreenchimentoContratoService;
import br.gov.ana.sarsb.service.FinalizacaoPreenchimentoService;
import br.gov.ana.sarsb.util.RespostaValidacao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;

@RestController
@RequestMapping(path = "/finalizacao-preenchimento")
@PreAuthorize("isAuthenticated()")
public class FinalizacaoPreenchimentoResource {

    @Autowired
    private FinalizacaoPreenchimentoService service;

    @GetMapping("/validar/{anoReferencia}/{idEri}")
    public ResponseEntity<RespostaValidacao> validar(@PathVariable("anoReferencia") Long anoReferencia,
                                                     @PathVariable("idEri") Long idEri) {
        RespostaValidacao resultado = service.validar(anoReferencia, idEri);

        return ResponseEntity.ok(resultado);
    }

    @GetMapping("/verificarFinalizacao/{ano}/{idEri}")
    public ResponseEntity<?> verificarFinalizacaoPreenchimento(@PathVariable("ano") Long ano , @PathVariable("idEri") Long idEri) {
        return new ResponseEntity<>(service.validarFinalizacao(ano, idEri), HttpStatus.OK);
    }

    @DeleteMapping("/habilitarPreenchimento/{ano}/{idEri}")
    public ResponseEntity<Void> habilitarPreenchimento(@PathVariable("ano") Long ano , @PathVariable("idEri") Long idEri) {
        try {
            service.excluirFinalizacaoPreenchimento(ano, idEri);
            return ResponseEntity.noContent().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping("/finalizar-preenchimento-primeiro-ano")
    public ResponseEntity<?> finalizarPrimeiroAnoColeta(@RequestBody FinalizacaoPreenchimentoDTO dto) {
        try {
            service.finalizarPrimeiroAnoColeta(dto);
            return new ResponseEntity<>(Collections.singletonMap("message", "Preenchimento finalizado com sucesso."), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(Collections.singletonMap("message", e.getMessage()), HttpStatus.BAD_REQUEST);
        }
    }


    @DeleteMapping("/habilitarPreenchimento-primeiro-ano/{ano}/{idEri}")
    public ResponseEntity<Void> habilitarPreenchimentoPrimeiraColeta(@PathVariable("ano") Long ano , @PathVariable("idEri") Long idEri) {
        try {
            service.excluirFinalizacaoPreenchimentoPrimeiraColeta(ano, idEri);
            return ResponseEntity.noContent().build();
        } catch (IllegalArgumentException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/validar-primeira-coleta/{anoReferencia}/{idEri}")
    public ResponseEntity<RespostaValidacao> validarPrimeiraColeta(@PathVariable("anoReferencia") Long anoReferencia,
                                                     @PathVariable("idEri") Long idEri) {
        RespostaValidacao resultado = service.validarPrimeiraColeta(anoReferencia, idEri);

        return ResponseEntity.ok(resultado);
    }
}


// Fim do arquivo: FinalizacaoPreenchimentoResource.java

// Arquivo: FormularioResource.java
// Caminho: \br\gov\ana\sarsb\resource\FormularioResource.java

package br.gov.ana.sarsb.resource;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;
import br.gov.ana.sarsb.service.FormularioService;

@RestController
@RequestMapping(path = "/formulario")
@PreAuthorize("isAuthenticated()")
public class FormularioResource {

	@Autowired
	private FormularioService formularioService;

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> salvarFormulario(@Valid @RequestBody FormularioDTO formularioDTO) {
		try {
			return new ResponseEntity<>(formularioService.salvarFormulario(formularioDTO), HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/{cnpj}/{idTipoFormulario}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> recuperarFormulario(@PathVariable("cnpj") String cnpj,
			@PathVariable("idTipoFormulario") Long idTipoFormulario) {
		try {
			return new ResponseEntity<>(formularioService.recuperarFormulario(cnpj, idTipoFormulario), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

}


// Fim do arquivo: FormularioResource.java

// Arquivo: InstrumentoCobrancaMunicipioResource.java
// Caminho: \br\gov\ana\sarsb\resource\InstrumentoCobrancaMunicipioResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.model.entity.InstrumentoCobrancaMunicipio;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaMunicipioRepository;
import br.gov.ana.sarsb.service.InstrumentoCobrancaMunicipioService;
import br.gov.ana.sarsb.service.InstrumentoCobrancaMunicipioServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.persistence.Column;
import java.math.BigDecimal;
import java.util.List;

@RestController
@RequestMapping(path = "/instrumentoCobrancamunicipio")
@PreAuthorize("isAuthenticated()")
public class InstrumentoCobrancaMunicipioResource {
	
	@Autowired
	private final InstrumentoCobrancaMunicipioService instrumentoCobrancaMunicipioService;
	private final InstrumentoCobrancaMunicipioRepository instrumentoCobrancaMunicipioRepository;

	public InstrumentoCobrancaMunicipioResource(InstrumentoCobrancaMunicipioService instrumentoCobrancaMunicipioService, InstrumentoCobrancaMunicipioRepository instrumentoCobrancaMunicipioRepository) {
		this.instrumentoCobrancaMunicipioService = instrumentoCobrancaMunicipioService;
		this.instrumentoCobrancaMunicipioRepository = instrumentoCobrancaMunicipioRepository;
	}




	@GetMapping("/listar")
	public ResponseEntity<List<InstrumentoCobrancaMunicipioDTO>> listar() {
		try {
			List<InstrumentoCobrancaMunicipioDTO> entidades = instrumentoCobrancaMunicipioService.listarTodos();
			return ResponseEntity.ok(entidades);
		} catch (NegocioException e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}


	@GetMapping
	public ResponseEntity<List<InstrumentoCobrancaMunicipioDTO>> listarInstrumentosCobrancaMunicipio() {
		List<InstrumentoCobrancaMunicipioDTO> instrumentos = instrumentoCobrancaMunicipioService.listarTodos();
		return new ResponseEntity<>(instrumentos, HttpStatus.OK);
	}


    @GetMapping("/codigo-prefeitura/{codigoPrefeitura}")
    public ResponseEntity<List<InstrumentoCobrancaMunicipioDTO>> buscarPorCodigoPrefeitura(@PathVariable("codigoPrefeitura") Long codigoPrefeitura) {
        List<InstrumentoCobrancaMunicipioDTO> instrumentos = instrumentoCobrancaMunicipioService.buscarPorCodigoPrefeitura(codigoPrefeitura);
        return new ResponseEntity<>(instrumentos, HttpStatus.OK);
    }

	@GetMapping("/codigo-prefeitura-true/{codigoPrefeitura}")
	public ResponseEntity<List<InstrumentoCobrancaMunicipioServiceImpl.InstrumentoCobrancaInfo>> buscarPorCodigoPrefeituraativo(@PathVariable("codigoPrefeitura") Long codigoPrefeitura) {
		List<InstrumentoCobrancaMunicipioServiceImpl.InstrumentoCobrancaInfo> instrumentos = instrumentoCobrancaMunicipioService.findByCodigoPrefeituraquerie(codigoPrefeitura);
		return new ResponseEntity<>(instrumentos, HttpStatus.OK);
	}




	@DeleteMapping("/{id}/codigo-prefeitura/{codigoPrefeitura}")
	public ResponseEntity<?> deletarInstrumentoPorIdECodigoPrefeitura(@PathVariable("id") Long id, @PathVariable("codigoPrefeitura") Long codigoPrefeitura) {
		try {
			instrumentoCobrancaMunicipioService.deletarPorIdECodigoPrefeitura(id, codigoPrefeitura);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@PutMapping("/{id}/codigo-prefeitura/{codigoPrefeitura}")
	public ResponseEntity<?> alterarInstrumentoCobrancaMunicipio(
			@PathVariable("id") Long id,
			@PathVariable("codigoPrefeitura") Long codigoPrefeitura,
			@RequestBody InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		try {
			instrumentoCobrancaMunicipioService.alterar(id, codigoPrefeitura, instrumentoDTO);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@PutMapping("/codigo-prefeitura/{codigoPrefeitura}")
	public ResponseEntity<?> FinalizarSmsru(
			@PathVariable("codigoPrefeitura") Long codigoPrefeitura,
			@RequestBody InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		try {
			instrumentoCobrancaMunicipioService.finalizar( codigoPrefeitura, instrumentoDTO);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@PostMapping("/{id}/codigo/{codigoPrefeitura}")
	public ResponseEntity<?> alterarInstrumentoMunicipio(
			@PathVariable("id") Long id,
			@PathVariable("codigoPrefeitura") Long codigoPrefeitura,
			@RequestBody InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		try {
			instrumentoCobrancaMunicipioService.alterarDadosMunicipio(id, codigoPrefeitura, instrumentoDTO);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@PostMapping("/codigo/{codigoPrefeitura}")
	public ResponseEntity<?> AdicionarIntrumento(
			@PathVariable("codigoPrefeitura") Long codigoPrefeitura,
			@RequestBody InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		try {

			InstrumentoCobrancaMunicipio novoInstrumentoDTO = new InstrumentoCobrancaMunicipio();
			novoInstrumentoDTO.setImplementado(instrumentoDTO.getImplementado());
			novoInstrumentoDTO.setRegimeCobranca(instrumentoDTO.getRegimeCobranca());
			novoInstrumentoDTO.setCobrancaSocial(instrumentoDTO.getCobrancaSocial());
			novoInstrumentoDTO.setValorCobradoBase(instrumentoDTO.getValorCobradoBase());
			novoInstrumentoDTO.setDocumentoArrecadacao(instrumentoDTO.getDocumentoArrecadacao());
			novoInstrumentoDTO.setInstrumentoLegal(instrumentoDTO.getInstrumentoLegal());
			novoInstrumentoDTO.setParametroCobranca(instrumentoDTO.getParametroCobranca());
			novoInstrumentoDTO.setCategoriasUsuario(instrumentoDTO.getCategoriasUsuario());
			novoInstrumentoDTO.setEtapaServico(instrumentoDTO.getEtapaServico());
			novoInstrumentoDTO.setOutrosValorCobrado(instrumentoDTO.getOutrosValorCobrado());
			novoInstrumentoDTO.setCodigoPrefeitura(codigoPrefeitura);
			novoInstrumentoDTO.setOutrosValorCobrado(instrumentoDTO.getOutrosValorCobrado());
			novoInstrumentoDTO.setOutrosParamentroCobranca(instrumentoDTO.getOutrosParamentroCobranca());
			novoInstrumentoDTO.setOutrosParamentroCobrancaUsuario(instrumentoDTO.getOutrosParamentroCobrancaUsuario());
			novoInstrumentoDTO.setOutrosParamentroCobrancaSocial(instrumentoDTO.getOutrosParamentroCobrancaSocial());
			novoInstrumentoDTO.setAceiteLgpd(instrumentoDTO.getAceiteLgpd());
			novoInstrumentoDTO.setArquivo(instrumentoDTO.getArquivo());

			/** object relacionado a sustentabilidade */
			novoInstrumentoDTO.setCdSus(instrumentoDTO.getCdSus());
			novoInstrumentoDTO.setAnoExercicio(instrumentoDTO.getAnoExercicio());
			novoInstrumentoDTO.setRecRequerida(instrumentoDTO.getRecRequerida());
			novoInstrumentoDTO.setValArrecadado(instrumentoDTO.getValArrecadado());
			novoInstrumentoDTO.setValSubsTarifario(instrumentoDTO.getValSubsTarifario());
			novoInstrumentoDTO.setSubValArrecadadoAlt(instrumentoDTO.getSubValArrecadadoAlt());
			novoInstrumentoDTO.setSusVerSusten(instrumentoDTO.getSusVerSusten());
			novoInstrumentoDTO.setSusUploadDocSus(instrumentoDTO.getSusUploadDocSus());
			novoInstrumentoDTO.setSusConfVerif(instrumentoDTO.getSusConfVerif());
			novoInstrumentoDTO.setSusAceite(instrumentoDTO.getSusAceite());

			instrumentoCobrancaMunicipioRepository.save(novoInstrumentoDTO);
			return new ResponseEntity<>(HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}





	}



// Fim do arquivo: InstrumentoCobrancaMunicipioResource.java

// Arquivo: InstrumentoCobrancaResource.java
// Caminho: \br\gov\ana\sarsb\resource\InstrumentoCobrancaResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaDTO;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaTemEtapasDTO;
import br.gov.ana.sarsb.model.entity.InstrumentoCobranca;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.service.InstrumentoCobrancaService;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping(path = "/instrumentoCobranca")
@PreAuthorize("isAuthenticated()")
public class InstrumentoCobrancaResource {
	
	@Autowired
	private InstrumentoCobrancaService instrumentoCobrancaService;


	@DeleteMapping(path = "/{numeroRecibo}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> deletarInstrumentoPorNumeroRecibo(@PathVariable("numeroRecibo") Long numeroRecibo) {
		try {
			instrumentoCobrancaService.deletarPorNumeroRecibo(numeroRecibo);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}









}


// Fim do arquivo: InstrumentoCobrancaResource.java

// Arquivo: IntegracoesResource.java
// Caminho: \br\gov\ana\sarsb\resource\IntegracoesResource.java

package br.gov.ana.sarsb.resource;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import br.gov.ana.sarsb.service.integration.infoconv.DadosReceita;
import br.gov.ana.sarsb.service.integration.infoconv.InfoconvService;
import br.gov.ana.sarsb.service.integration.correios.CEP;
import br.gov.ana.sarsb.service.integration.correios.CorreiosService;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;
import br.gov.ana.sarsb.service.integration.ows.uf.UF;
import br.gov.ana.sarsb.service.integration.ows.uf.UFService;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping(path = "/integracoes")
public class IntegracoesResource {
	
	@Autowired
	private CorreiosService correiosService;
	
	@Autowired
	private UFService ufService;

	@Autowired
	private MunicipioService municipioService;

	@Autowired
	private InfoconvService InfoconvService;

	@GetMapping(path = "/cep/{cep}", produces = MediaType.APPLICATION_JSON_VALUE)
	@ApiOperation(value = "Consultar cep")
	public ResponseEntity<CEP> consultarCep(@PathVariable("cep") String cep) {
		try {
			return new ResponseEntity<>(correiosService.consultarCep(cep), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/uf", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Listar todas as Unidades da Federação (UF)")
	private List<UF> listarUfs() {
		return ufService.pesquisarUF();
	}
	
	@GetMapping(path = "/uf/consultarPorId/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Consultar Unidade da Federação (UF) por ID")
	private UF pesquisarUfPorId(@PathVariable("id") Long id) {
		return ufService.pesquisarUF(id);
	}
	
	@GetMapping(path = "/uf/consultarPorSigla/{sigla}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Consultar Unidade da Federação (UF) por Sigla")
	private UF pesquisarUfPorSigla(@PathVariable("sigla") String sigla) {
		return ufService.pesquisarUF(sigla);
	}
	
	@GetMapping(path = "/municipio/consultarPorUf/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Consultar Município por ID da UF")
	private List<Municipio> pesquisarMunicipioPorUf(@PathVariable("id") Long id) {
		return municipioService.pesquisarMunicipioPorUF(id);
	}
	
	@GetMapping(path = "/municipio/consultarPorIbge/{codigoIbge}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Consultar Município por Código IBGE")
	private Municipio pesquisarMunicipioPorIbge(@PathVariable("codigoIbge") String codigoIbge) {
		return municipioService.pesquisarMunicipioPorIBGE(codigoIbge);
	}
	
	@GetMapping(path = "/municipio/consultarPorId/{idMunicipio}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Consultar Município por ID")
	private Municipio pesquisarMunicipioPorId(@PathVariable("idMunicipio") Long idMunicipio) {
		return municipioService.pesquisarMunicipio(idMunicipio);
	}
	
	@GetMapping(path = "/municipio/consultarPorNome/{nomeMunicipio}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Consultar Município por Nome")
	private Municipio pesquisarMunicipioPorNome(@PathVariable("nomeMunicipio") String nomeMunicipio) {
		return municipioService.pesquisarMunicipioPorNome(nomeMunicipio);
	}


	@GetMapping("/cnpj")
	@ResponseBody
	public DadosReceita recuperarPorCNPJ(@RequestParam(name = "cnpj") String cnpj, @RequestParam(name = "forcarBuscaDiretoNaReceita") boolean forcarBuscaDiretoNaReceita) {
		return InfoconvService.pesquisarCpfCnpj(cnpj, forcarBuscaDiretoNaReceita);

	}

	@GetMapping("/cpf")
	@ResponseBody
	public DadosReceita pesquisarCpf(@RequestParam(name = "cpf") String cpf, @RequestParam(name = "forcarBuscaDiretoNaReceita") boolean forcarBuscaDiretoNaReceita) {
		return InfoconvService.pesquisarCpfCnpj(cpf, forcarBuscaDiretoNaReceita);
	}

}


// Fim do arquivo: IntegracoesResource.java

// Arquivo: MonitoramentoUniversalizacaoResource.java
// Caminho: \br\gov\ana\sarsb\resource\MonitoramentoUniversalizacaoResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoBlocoEstrutura;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipioUniversalizacaoRegras;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PrestadorUniversalizacaoGE02GE03;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunEsgoto;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrestador;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtEsgoto;
import br.gov.ana.sarsb.model.entity.MunicipiosUniversalizacao;
import br.gov.ana.sarsb.service.MonitoramentoUniversalizacaoService;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping(path = "/monitoramentoUniversalizacao")
public class MonitoramentoUniversalizacaoResource {

    @Autowired
    private MonitoramentoUniversalizacaoService monitoramentoUniversalizacaoService;


    @GetMapping(path = "/municipio/{agrCd}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> findMunicipioByAgenciaReguladora(@PathVariable("agrCd") Long agrCd, @RequestParam("limit") Integer limit, @RequestParam("offset") Integer offset, @RequestParam(value = "ibgeCd", required = false) Long ibgeCd) {
        try {
            return new ResponseEntity<>(monitoramentoUniversalizacaoService.findMunicipioByAgenciaReguladoraPageable(agrCd,  limit, offset, ibgeCd), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/prestador/{agrCd}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> findPrestadorByAgenciaReguladora(@PathVariable("agrCd") Long agrCd, @RequestParam("limit") Integer limit, @RequestParam("offset") Integer offset, @RequestParam(value = "ibgeCd", required = false) Long ibgeCd) {
        try {
            return new ResponseEntity<>(monitoramentoUniversalizacaoService.findPrestadorByAgenciaReguladoraPageable(agrCd, limit, offset, ibgeCd, false, false), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/buscar-erros/{agrCd}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> findErrosByAgenciaReguladora(@PathVariable("agrCd") Long agrCd) {
        try {
            return new ResponseEntity<>(monitoramentoUniversalizacaoService.findDadosByAgenciaReguladora(agrCd), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @PutMapping(path = "/atualizar-dados-municipio", consumes = "application/json")
    public ResponseEntity<?> atualizar(@RequestBody AtualizarDadosMunicipioRequest request) {
        try {
            monitoramentoUniversalizacaoService.atualizarDadosMunicipio(request.getAgua(), request.getEsgoto(),request.getDadosgerais());
            return ResponseEntity.ok("Dados atualizados com sucesso.");
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/municipio/{agrCd}/ufs-municipios", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> findUfsMunicipiosByAgenciaReguladora(@PathVariable("agrCd") Long agrCd) {
        try {
            return new ResponseEntity<>(monitoramentoUniversalizacaoService.findMunicipioByAgenciaReguladora(agrCd), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/prestador/{agrCd}/ufs-municipios", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> findUfsMunicipiosPrestadorByAgenciaReguladora(@PathVariable("agrCd") Long agrCd) {
        try {
            return new ResponseEntity<>(monitoramentoUniversalizacaoService.findPrestadorByAgenciaReguladora(agrCd, false, false), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/buscar-dados-municipio")
    public ResponseEntity<?> buscarDados(@RequestParam("munIbgeCd") Integer munIbgeCd) {
        try {
            MonitoramentoUniversalizacaoMunAgua aguaData = monitoramentoUniversalizacaoService.buscarDadosAgua(munIbgeCd);
            MonitoramentoUniversalizacaoMunEsgoto esgotoData = monitoramentoUniversalizacaoService.buscarDadosEsgoto(munIbgeCd);
            MunicipioUniversalizacaoRegras dadosgerais = monitoramentoUniversalizacaoService.buscardadosgerais(munIbgeCd);
            Map<String, Object> response = new HashMap<>();
            response.put("dadosgerais", dadosgerais);
            response.put("agua", aguaData);
            response.put("esgoto", esgotoData);

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-quantidade-indicadores")
    public ResponseEntity<?> buscarIndicadoresMunicipio(@RequestParam("agrCd") Long agrCd) {
        try {
            List<MunicipiosUniversalizacao> municipiosUniversalizacao = monitoramentoUniversalizacaoService.findMunicipioByAgenciaReguladora(agrCd);
            return new ResponseEntity<>(municipiosUniversalizacao.size(), HttpStatus.OK);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-quantidade-indicadores-contratos")
    public ResponseEntity<?> buscarIndicadoresContrato(@RequestParam("agrCd") Long agrCd, @RequestParam("regional") Boolean regional, @RequestParam("contratado") Boolean contratado) {
        try {
            List<MonitoramentoUniversalizacaoPrestador> prestadoresUniversalizacao = monitoramentoUniversalizacaoService.findPrestadorByAgenciaReguladora(agrCd, regional, contratado);
            return new ResponseEntity<>(prestadoresUniversalizacao.size(), HttpStatus.OK);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-indicadores-municipio")
    public ResponseEntity<?> buscarIndicadoresMunicipio(@RequestParam("agrCd") Long agrCd, @RequestParam("limit") Integer limit, @RequestParam("offset") Integer offset) {
        try {
            List<MunicipiosUniversalizacao> municipiosUniversalizacaos = monitoramentoUniversalizacaoService.findMunicipioByAgenciaReguladoraPageable(agrCd, limit, offset, null);
            List<ResponseEntity<?>> munIndicadores = new ArrayList<>();
            municipiosUniversalizacaos.forEach(municipiosUniversalizacao -> {
                MonitoramentoUniversalizacaoMunAgua aguaData = monitoramentoUniversalizacaoService.buscarDadosAgua(municipiosUniversalizacao.getMunIbgeCd());
                MonitoramentoUniversalizacaoMunEsgoto esgotoData = monitoramentoUniversalizacaoService.buscarDadosEsgoto(municipiosUniversalizacao.getMunIbgeCd());
                MunicipioUniversalizacaoRegras dadosgerais = monitoramentoUniversalizacaoService.buscardadosgerais(municipiosUniversalizacao.getMunIbgeCd());
                Map<String, Object> response = new HashMap<>();
                response.put("dadosgerais", dadosgerais);
                response.put("agua", aguaData);
                response.put("esgoto", esgotoData);
                munIndicadores.add(ResponseEntity.ok(response));
            });

            return new ResponseEntity<>(munIndicadores, HttpStatus.OK);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-indicadores-contratos")
    public ResponseEntity<?> buscarIndicadoresContrato(@RequestParam("agrCd") Long agrCd, @RequestParam("limit") Integer limit, @RequestParam("offset") Integer offset, @RequestParam("regional") Boolean regional, @RequestParam("contratado") Boolean contratado) {
        try {
            List<MonitoramentoUniversalizacaoPrestador> contratosUniversalizacao = monitoramentoUniversalizacaoService.findPrestadorByAgenciaReguladoraPageable(agrCd, limit, offset, null, regional, contratado);
            List<ResponseEntity<?>> prtIndicadores = new ArrayList<>();
            contratosUniversalizacao.forEach(contratoUniversalizacao -> {
                MonitoramentoUniversalizacaoPrtAgua aguaData = monitoramentoUniversalizacaoService.buscarDadosAguaPrestador(Math.toIntExact(contratoUniversalizacao.getMunicipio().getCodigoIbge()), contratoUniversalizacao.getPrtAaRef(), contratoUniversalizacao.getPrtCd());
                MonitoramentoUniversalizacaoPrtEsgoto esgotoData = monitoramentoUniversalizacaoService.buscarDadosEsgotoPrestador(Math.toIntExact(contratoUniversalizacao.getMunicipio().getCodigoIbge()), contratoUniversalizacao.getPrtAaRef(), contratoUniversalizacao.getPrtCd());
                MonitoramentoUniversalizacaoPrestador dadosGerais = monitoramentoUniversalizacaoService.buscarDadosGeraisPrestador(Math.toIntExact(contratoUniversalizacao.getMunicipio().getCodigoIbge()), contratoUniversalizacao.getPrtAaRef(), contratoUniversalizacao.getPrtCd());
                MunicipioUniversalizacaoRegras dadosMunicipio = monitoramentoUniversalizacaoService.buscardadosgerais(Math.toIntExact(contratoUniversalizacao.getMunicipio().getCodigoIbge()));
                Map<String, Object> response = new HashMap<>();
                response.put("dadosGerais", dadosGerais);
                response.put("agua", aguaData);
                response.put("esgoto", esgotoData);
                response.put("dadosMunicipio", dadosMunicipio);
                prtIndicadores.add(ResponseEntity.ok(response));
            });
            return new ResponseEntity<>(prtIndicadores, HttpStatus.OK);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-indicadores-blocos")
    public Object buscarIndicadoresBlocos(@RequestParam("agrCd") Long agrCd, @RequestParam("limit") Integer limit, @RequestParam("offset") Integer offset) {
        try {
           return monitoramentoUniversalizacaoService.findBlocosByAgenciaReguladoraPageable(agrCd, limit, offset);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-filtros-indicadores")
    public Object buscarFiltrosIndicadores(@RequestParam("agrCd") Long agrCd) {
        try {
            return monitoramentoUniversalizacaoService.findFiltrosIndicadores(agrCd);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-quantidade-blocos")
    public ResponseEntity<?> buscarQuantidadeBlocos(@RequestParam("agrCd") Long agrCd) {
        try {
            List<MonitoramentoUniversalizacaoBlocoEstrutura> monitoramentoUniversalizacaoBlocoEstrutura = monitoramentoUniversalizacaoService.findBlocoEstruturaByAgenciaReguladora(agrCd);
            return new ResponseEntity<>(monitoramentoUniversalizacaoBlocoEstrutura.size(), HttpStatus.OK);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @PutMapping(path = "/atualizar-dados-prestador", consumes = "application/json")
    public ResponseEntity<?> atualizar(@RequestBody AtualizarDadosPrestadorUniversalizacaoRequest request) {
        try {
            monitoramentoUniversalizacaoService.atualizarDadosPrestador(request.getAgua(), request.getEsgoto(),request.getDadosGerais());
            return ResponseEntity.ok("Dados atualizados com sucesso.");
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }

    @GetMapping(path = "/buscar-dados-prestador")
    public ResponseEntity<?> buscarDados(@RequestParam("munIbgeCd") Integer munIbgeCd, @RequestParam("aaRef") Integer prtAaRef, @RequestParam("cnpj") String prtCd, @RequestParam("servico") String servico) {
        try {
            MonitoramentoUniversalizacaoPrtAgua aguaData = monitoramentoUniversalizacaoService.buscarDadosAguaPrestador(munIbgeCd, prtAaRef, prtCd);
            MonitoramentoUniversalizacaoPrtEsgoto esgotoData = monitoramentoUniversalizacaoService.buscarDadosEsgotoPrestador(munIbgeCd, prtAaRef, prtCd);
            MonitoramentoUniversalizacaoPrestador dadosGerais = monitoramentoUniversalizacaoService.buscarDadosGeraisPrestador(munIbgeCd, prtAaRef, prtCd);
            PrestadorUniversalizacaoGE02GE03 totalPrestador = monitoramentoUniversalizacaoService.buscarPrtGE02GE03(munIbgeCd, servico, prtAaRef);
            Map<String, Object> response = new HashMap<>();
            response.put("dadosGerais", dadosGerais);
            response.put("agua", aguaData);
            response.put("esgoto", esgotoData);
            response.put("totais", totalPrestador);

            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.status(400).body(e.getMessage());
        }
    }
}



// Fim do arquivo: MonitoramentoUniversalizacaoResource.java

// Arquivo: ParametrosNRSResource.java
// Caminho: \br\gov\ana\sarsb\resource\ParametrosNRSResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.model.dto.agenciareguladora.parametrosNrs.ParametrosNRSDTO;
import br.gov.ana.sarsb.service.ParametrosNRSService;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping(path = "/paramentros-nrs")
public class ParametrosNRSResource {

    @Autowired
    private ParametrosNRSService parametrosNRSService;
    @GetMapping(path = "/lista", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Consultar ")
    public ResponseEntity<List<ParametrosNRSDTO>> consultarParametrosNrs() {
        try {
            return new ResponseEntity<>(parametrosNRSService.buscarTodos(), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }
}


// Fim do arquivo: ParametrosNRSResource.java

// Arquivo: PrefeituraResource.java
// Caminho: \br\gov\ana\sarsb\resource\PrefeituraResource.java

package br.gov.ana.sarsb.resource;

import javax.validation.Valid;

import br.gov.ana.sarsb.model.entity.TipoEntidadeReguladora;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.PrefeituraDTO;
import br.gov.ana.sarsb.service.PrefeituraService;

@RestController
@RequestMapping(path = "/prefeitura")
public class PrefeituraResource {

	@Autowired
	private PrefeituraService prefeituraService;
	

	@GetMapping(path = "/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> pesquisarPorCnpj(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(prefeituraService.pesquisarPorCnpj(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/{uf}/{municipio}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> pesquisarPorUfMunicipio(@PathVariable("uf") String uf, @PathVariable("municipio") String municipio){
		try {
			String cnpj = String.valueOf(prefeituraService.pesquisarPorUfMunicipio(uf, municipio));
			return new ResponseEntity<>(cnpj, HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
	}




	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> atualizarPrefeitura(@Valid @RequestBody PrefeituraDTO prefeituraDTO) {
		try {
			prefeituraService.atualizarPrefeitura(prefeituraDTO);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<?> criarPrefeitura(@Valid @RequestBody PrefeituraDTO prefeituraDTO) {
		try {
			prefeituraService.criarPrefeitura(prefeituraDTO);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	

	@GetMapping(path = "/consultarEntidadeReguladora/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarEntidadeReguladora(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(prefeituraService.pesquisarEntidadeReguladoraPorCnpj(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	
}


// Fim do arquivo: PrefeituraResource.java

// Arquivo: PrestadorResource.java
// Caminho: \br\gov\ana\sarsb\resource\PrestadorResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.model.dto.prestador.MunicipioPrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.ServicosReguladosDTO;
import br.gov.ana.sarsb.model.entity.Prestador;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.service.PrestadorService;

import java.util.Optional;
import java.util.List;

@RestController
@RequestMapping(path = "/prestador")
public class PrestadorResource {
	
	@Autowired
	private PrestadorService prestadorService;

	@GetMapping(path = "/validarSePrestadorExiste/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> validarSePrestadorExiste(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(prestadorService.prestadorJaExiste(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


    @GetMapping
    public List<Prestador> listarPrestadoresAtivos() {
        return prestadorService.findByPrestadorativoTrue();
    }


	@PostMapping("/cadastrarPrestador")
	public ResponseEntity<Prestador> criarPrestador(@RequestBody Prestador prestador) {
		try {
			prestador.setPrestadorativo(true); // seta o prestadorativo como true
			prestadorService.criarPrestador(prestador);
			return ResponseEntity.status(HttpStatus.CREATED).body(prestador);
		} catch (NegocioException e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}


	@GetMapping("/{id}")
	public ResponseEntity<Prestador> getPrestadorById(@PathVariable Long id) {
		Optional<Prestador> prestador = prestadorService.findById(id);

		if (prestador.isPresent()) {
			return ResponseEntity.ok(prestador.get());
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	@GetMapping("servicosReguladosPorCNPJ/{cnpj}")
	public ResponseEntity<List<MunicipioPrestadorDTO>> getUfPrestador(@PathVariable String cnpj) {
		List<MunicipioPrestadorDTO> ufPrestador = prestadorService.findMunicipioPrestador(cnpj);
		return ResponseEntity.ok(ufPrestador);
	}

	@GetMapping("servicosReguladosPorCNPJ/{cnpj}/{municipio}")
	public ResponseEntity<List<ServicosReguladosDTO>> get(@PathVariable String cnpj, @PathVariable String municipio) {
		List<ServicosReguladosDTO> servicosReguladosPrestador = prestadorService.findServicosReguladosPrestador(cnpj, municipio);
		return ResponseEntity.ok(servicosReguladosPrestador);
	}

	@GetMapping("servicosReguladosPorIdEri/{idAgenciaReguladora}")
	public ResponseEntity<List<MunicipioPrestadorDTO>> obterMunicipios(@PathVariable Long idAgenciaReguladora) {
		List<MunicipioPrestadorDTO> servicosReguladosPrestador = prestadorService.findServicosReguladosPorIdEri(idAgenciaReguladora);
		return ResponseEntity.ok(servicosReguladosPrestador);
	}

	@GetMapping("prestadoresPorIdEri/{idAgenciaReguladora}")
	public ResponseEntity<List<Prestador>> obterPrestadores(@PathVariable Long idAgenciaReguladora) {
		List<Prestador> prestadores = prestadorService.findPrestadoresPorIdAgReguladora(idAgenciaReguladora);
		return ResponseEntity.ok(prestadores);
	}


}


// Fim do arquivo: PrestadorResource.java

// Arquivo: ProcessoAgenciaResource.java
// Caminho: \br\gov\ana\sarsb\resource\ProcessoAgenciaResource.java

package br.gov.ana.sarsb.resource;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.ProcessoCefAgenciaDTO;
import br.gov.ana.sarsb.service.ProcessoAgenciaService;

@RestController
@RequestMapping(path = "/processoAgencia")
@PreAuthorize("isAuthenticated()")
public class ProcessoAgenciaResource {
	
	@Autowired
	private ProcessoAgenciaService processoAgenciaService;
	
	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> cadastrarProcesso(@Valid @RequestBody ProcessoCefAgenciaDTO processo) {
		try {
			return new ResponseEntity<>(processoAgenciaService.criarProcesso(processo), HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> atualizarProcesso(@Valid @RequestBody ProcessoCefAgenciaDTO processo) {
		try {
			return new ResponseEntity<>(processoAgenciaService.atualizarProcesso(processo), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/{idFormulario}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarProcessos(@PathVariable("idFormulario") Long idFormulario) {
		try {
			return new ResponseEntity<>(processoAgenciaService.consultarProcessos(idFormulario), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@DeleteMapping(path = "/{idProcesso}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> deletarProcessos(@PathVariable("idProcesso") Long idProcesso) {
		try {
			processoAgenciaService.deletarProcesso(idProcesso);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/consultarFormularioAgencia/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarFormularioAgencia(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(processoAgenciaService.criarOuConsultarFormularioAgencia(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PutMapping(path = "/finalizar/{idFormulario}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> finalizarProcesso(@PathVariable("idFormulario") Long idFormulario) {
		try {
			return new ResponseEntity<>(processoAgenciaService.finalizarProcesso(idFormulario), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

}


// Fim do arquivo: ProcessoAgenciaResource.java

// Arquivo: Produces.java
// Caminho: \br\gov\ana\sarsb\resource\Produces.java

package br.gov.ana.sarsb.resource;

public @interface Produces {
}


// Fim do arquivo: Produces.java

// Arquivo: ProtocoloIndenizacaoResource.java
// Caminho: \br\gov\ana\sarsb\resource\ProtocoloIndenizacaoResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ProtocoloIndenizacaoDTO;
import br.gov.ana.sarsb.repository.ProtocoloIndenizacaoRepository;
import br.gov.ana.sarsb.service.ProtocoloIndenizacaoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import java.util.List;

@RestController
@RequestMapping(path = "/protocolo-indenizacao")
public class ProtocoloIndenizacaoResource {

    @Autowired
    private ProtocoloIndenizacaoRepository protocoloIndenizacaoRepository;

    @Autowired
    private ProtocoloIndenizacaoService protocoloIndenizacaoService;

    @GetMapping("/lista")
    public List<ProtocoloIndenizacaoDTO> listarTodos() {
        return protocoloIndenizacaoService.findAll();
    }


//    @GetMapping()
//    public List<ProtocoloIndenizacao> listarPorIdAgr() {
//        return protocoloIndenizacaoService.findAll();
//    }

//    @GetMapping("/por-idAgr/{idAgr}")
//    public List<ProtocoloIndenizacao> buscarPorIdAgr(@PathVariable Long idAgr) {
//        return protocoloIndenizacaoService.buscarPorIdAgr(idAgr);
//    }






}


// Fim do arquivo: ProtocoloIndenizacaoResource.java

// Arquivo: ProtocoloPrestadorResource.java
// Caminho: \br\gov\ana\sarsb\resource\ProtocoloPrestadorResource.java

package br.gov.ana.sarsb.resource;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloAdicionalDTO;
import br.gov.ana.sarsb.service.ProtocoloPrestadorService;

@RestController
@RequestMapping(path = "/protocoloPrestador")
@PreAuthorize("isAuthenticated()")
public class ProtocoloPrestadorResource {
	
	@Autowired
	private ProtocoloPrestadorService protocoloPrestadorService;

	@GetMapping(path = "/carregarListaProtocoloPorAgenciaReguladora/{cnpj}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> carregarListaProtocoloPorAgenciaReguladora(@PathVariable("cnpj") String cnpj) {
		try {
			return new ResponseEntity<>(protocoloPrestadorService.carregarListaProtocoloPrestador(cnpj), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/pesquisarPor/{numeroProtocolo}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> carregarListaProtocoloPorNumeroProtocolo(@PathVariable("numeroProtocolo") String numeroProtocolo) {
		try {
			return new ResponseEntity<>(protocoloPrestadorService.consultarPorProtocolo(numeroProtocolo), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping(path = "/criarProtocoloAdicional",consumes = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<?> criarProtocoloAdicional(@Valid @RequestBody ProtocoloAdicionalDTO protocoloAdicionalDTO) {
		try {
			return new ResponseEntity<>(protocoloPrestadorService.criarProtocoloAdicional(protocoloAdicionalDTO), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@GetMapping(path = "/consultarProtocoloAdicional", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> consultarProtocoloAdicional(@RequestParam String numeroProtocolo, 
			@RequestParam String cnpjAgencia, @RequestParam String cnpjPrestador) {
		try {
			return new ResponseEntity<>(protocoloPrestadorService.consultarPorProtocoloAdicional(numeroProtocolo, cnpjAgencia, cnpjPrestador), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@DeleteMapping(path = "/excluirProtocoloAdicional/{id}", produces = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<?> criarProtocoloAdicional(@PathVariable("id") Long id) {
		try {
			protocoloPrestadorService.excluirProtocoloAdicional(id);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


}


// Fim do arquivo: ProtocoloPrestadorResource.java

// Arquivo: ProtocoloResource.java
// Caminho: \br\gov\ana\sarsb\resource\ProtocoloResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.service.ProtocoloService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.Collections;

@RestController
@RequestMapping(path = "/protocolo")
public class ProtocoloResource {

    @Autowired
    private ProtocoloService protocoloService;

    @GetMapping(path = "/consultarProtocolosPorIdAgr/{idAgr}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarProtocolosPorIdAgr(@PathVariable("idAgr") Long id) {
        try {
            return new ResponseEntity<>(protocoloService.buscarProtocolosPorIdAgr(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/consultarProtocolosCondicaoGeraisPorIdAgr/{idAgr}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarProtocolosCondicaoGeraisPorIdAgr(@PathVariable("idAgr") Long id) {
        try {
            return new ResponseEntity<>(protocoloService.buscarProtocolosCondicoesGeraisPorIDAgr(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @GetMapping(path = "/consultarProtocolosRegulacaoTarifariaPorIdAgr/{idAgr}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> consultarProtocolosRegulacaoTarifaraPorIdAgrNormas(@PathVariable("idAgr") Long id) {
        try {
            return new ResponseEntity<>(protocoloService.buscarRegulacaoTaricarPorNorma(id), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/buscar-protocolos-requisito-complementar/{idAgr}")
    public ResponseEntity<?> buscarTodosProtocolos(@PathVariable("idAgr") Long id){
        try {
            return new ResponseEntity<>(protocoloService.buscarProtocoloRequisitoComplementar(id), HttpStatus.OK);
        } catch (NegocioException | IOException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
}


// Fim do arquivo: ProtocoloResource.java

// Arquivo: RegulacaoTarifariaResource.java
// Caminho: \br\gov\ana\sarsb\resource\RegulacaoTarifariaResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.FinalizacaoRequest;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.ProtocoloRegulacaoTarifariaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaFiltroDTO;
import br.gov.ana.sarsb.model.entity.Protocolo;
import br.gov.ana.sarsb.service.ProtocoloService;
import br.gov.ana.sarsb.service.RegulacaoTarifariaService;
import io.swagger.annotations.ApiOperation;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

@RestController
@RequestMapping(path = "/regulacao-tarifaria")
public class RegulacaoTarifariaResource {

    @Autowired
    private RegulacaoTarifariaService regulacaoTarifariaService;
    @Autowired
    private ProtocoloService protocoloService;



    @GetMapping(path = "/listar/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listarContratoRegulacaoTarifaria(@PathVariable("id") Long idEntidadeReguladora) {
        try {
            return new ResponseEntity<>(regulacaoTarifariaService.buscarTodos(idEntidadeReguladora), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path = "/pesquisar", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> pesquisarContratoRegulacaoTarifaria(
            @RequestParam(required = false) Long idEntidadeReguladora,
            @RequestParam(required = false) String municipio,
            @RequestParam(required = false) String uf,
            @RequestParam(required = false) Long tipoContrato,
            @RequestParam(required = false) String codigoInternoContrato,
            @RequestParam(required = false) Long anoColeta,
            @RequestParam(required = false) Boolean isEsgotamento,
            @RequestParam(required = false) Boolean isLimpezaUrbana,
            @RequestParam(required = false) Boolean isAbastecimento,
            @RequestParam(required = false) Boolean isManejoResiduos,
            @RequestParam(required = false) Boolean isDrenagemManejo
    ) {

        try {
            RegulacaoTarifariaFiltroDTO regulacaoTarifariaFiltroDTO = new RegulacaoTarifariaFiltroDTO();
            regulacaoTarifariaFiltroDTO.setAnoColeta(anoColeta);
            regulacaoTarifariaFiltroDTO.setIdEntidadeReguladora(idEntidadeReguladora);
            regulacaoTarifariaFiltroDTO.setMunicipio(municipio);
            regulacaoTarifariaFiltroDTO.setUf(uf);
            regulacaoTarifariaFiltroDTO.setTipoContrato(tipoContrato);
            regulacaoTarifariaFiltroDTO.setCodigoInternoContrato(codigoInternoContrato);
            regulacaoTarifariaFiltroDTO.setIsEsgotamento(isEsgotamento);
            regulacaoTarifariaFiltroDTO.setIsLimpezaUrbana(isLimpezaUrbana);
            regulacaoTarifariaFiltroDTO.setIsAbastecimento(isAbastecimento);
            regulacaoTarifariaFiltroDTO.setIsManejoResiduos(isManejoResiduos);
            regulacaoTarifariaFiltroDTO.setIsDrenagemManejo(isDrenagemManejo);
            return new ResponseEntity<>(regulacaoTarifariaService.filtroContrato(regulacaoTarifariaFiltroDTO), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }

    }


    @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> buscarRegulacaoTarifariaID(@PathVariable("id") Long idRegulacaoTarifaria) {
        try {
            return new ResponseEntity<>(regulacaoTarifariaService.buscarRegulacaoTarifariaId(idRegulacaoTarifaria), HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> atualizarRegulacaoTarifaria(@RequestBody RegulacaoTarifariaDTO regulacaoTarifariaDTO) {
        try {
            regulacaoTarifariaService.atualizarRegulacaoTarifaria(regulacaoTarifariaDTO);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


    @PostMapping(path = "/salvar", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> salvarRegulacaoTarifaria(@RequestBody RegulacaoTarifariaDTO regulacaoTarifariaDTO) {
        try {
            regulacaoTarifariaService.salvarRegulacaoTarifaria(regulacaoTarifariaDTO);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    @DeleteMapping(path = "/delete/{id}")
    public ResponseEntity<?> deletarRegulacaoTarifari(@PathVariable("id") Long idRegulacaoTarifaria) {
        try {
            regulacaoTarifariaService.deletar(idRegulacaoTarifaria);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);


        }
    }

    @GetMapping(value = "/relatorio-xls/{idAgenciaReguladora}/{anoColeta}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    @ApiOperation("Gere um relatório XLS com base no id do contrato")
    public void gerarRelatorio(@PathVariable Long idAgenciaReguladora, @PathVariable Long anoColeta, HttpServletResponse response) {
        try (Workbook workbook = regulacaoTarifariaService.gerarRelatorioXLS(idAgenciaReguladora, anoColeta)) {
            response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setHeader("Content-Disposition", "attachment; filename=relatorio-contratos.xlsx");

            try (OutputStream outputStream = response.getOutputStream()) {
                workbook.write(outputStream);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @PostMapping(path = "/finalizar-preenchimento")
    public ResponseEntity<?> finalizarPreenchimento(@RequestBody FinalizacaoRequest request) {
        try {
            regulacaoTarifariaService.finalizarPreenchimento(request.getAno(), request.getIdAgencia());
            return ResponseEntity.ok(Collections.singletonMap("message", "Preenchimento finalizado com sucesso."));
        } catch (NegocioException e) {
            return ResponseEntity.badRequest().body(Collections.singletonMap("message", e.getMessage()));
        }
    }

    @PostMapping(path = "/reabilitar-preenchimento")
    public ResponseEntity<?> reabilitarPreenchimento(@RequestBody FinalizacaoRequest request) {
        try {
            regulacaoTarifariaService.reabilitarPreenchimento(request.getAno(), request.getIdAgencia());
            return ResponseEntity.ok(Collections.singletonMap("message", "Preenchimento reabilitado com sucesso."));
        } catch (NegocioException e) {
            return ResponseEntity.badRequest().body(Collections.singletonMap("message", e.getMessage()));
        }
    }

    @GetMapping(path = "/anos-disponiveis", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> listarAnosDisponiveis() {
        try {
            List<Integer> anosDisponiveis = regulacaoTarifariaService.buscarAnosDisponiveis();
            return ResponseEntity.ok(anosDisponiveis);
        } catch (NegocioException e) {
            return ResponseEntity.badRequest().body(Collections.singletonMap("message", e.getMessage()));
        }
    }

    @GetMapping("/verificar-contratos/{idAgr}/{ano}/{idContrato}")
    public ResponseEntity<?> verificarContratos(@PathVariable Long idAgr,
                                                @PathVariable Long ano,
                                                @PathVariable Long idContrato
    ) {
        try {
            Boolean isContratoRepetido = regulacaoTarifariaService.isContratoRepetido(ano, idAgr, idContrato);
            return new ResponseEntity<>(isContratoRepetido, HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }


    @GetMapping("/buscar-protocolos/{idAgr}")
    public ResponseEntity<?> consultarProtocolo(@PathVariable Long idAgr
    ) {
        try {
            List<ProtocoloRegulacaoTarifariaDTO> protocolos = protocoloService.buscarRegulacaoTaricarPorNorma(idAgr);
            return new ResponseEntity<>(protocolos, HttpStatus.OK);
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }


}

// Fim do arquivo: RegulacaoTarifariaResource.java

// Arquivo: RelatorioResource.java
// Caminho: \br\gov\ana\sarsb\resource\RelatorioResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.ConformidadeEntidade;
import br.gov.ana.sarsb.model.entity.ProtocoloConformidade;
import br.gov.ana.sarsb.service.*;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;

@RestController
@RequestMapping(path = "/relatorio")
@PreAuthorize("isAuthenticated()")
public class RelatorioResource {

	@Autowired
	private InstrumentoCobrancaService instrumentoCobrancaService;

	@Autowired
	private ProcessoAgenciaService processoAgenciaService;

	@Autowired
	private AditivoAgenciaService aditivoAgenciaService;


	@Autowired
	private RelatorioErisService relatorioErisService;

	@Autowired
	private AtoNormativoService atoNormativoService;

	@Autowired
	private ConformidadeEntidadeService conformidadeEntidadeService;

	@Autowired
	private RegulacaoTarifariaService regulacaoTarifariaService;
    @Autowired
    private AtoNormativoDetalhadoService atoNormativoDetalhadoService;
    @Autowired
    private ProtocoloIndenizacaoService protocoloIndenizacaoService;

	@Autowired
	private RequisitoComplementarService requisitoComplementarService;
	@Autowired
	private ProtocoloConformidadeService protocoloConformidadeService;
	@GetMapping(path = "/recibo-smrsu/{numeroRecibo}/{cnpj}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> gerarReciboSmrsu(@PathVariable("numeroRecibo") Long numeroRecibo,
											  @PathVariable("cnpj") String cnpj) {
		try {
			File recibo = aditivoAgenciaService.gerarReciboComprovanteSmsru(numeroRecibo, cnpj);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=recibo" + numeroRecibo + ".pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/recibo-agencia/{numeroRecibo}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> gerarReciboAgencia(@PathVariable("numeroRecibo") Long numeroRecibo) {
		try {
			File recibo = processoAgenciaService.gerarReciboComprovante(numeroRecibo);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=recibo_"+numeroRecibo+".pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/recibo-norma2/{numeroRecibo}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> gerarReciboNorma2(@PathVariable("numeroRecibo") Long numeroRecibo) {
		try {
			File recibo = aditivoAgenciaService.gerarReciboComprovante(numeroRecibo);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=recibo_"+numeroRecibo+".pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(value = "/relatorio-xls/{id_agr}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	@ApiOperation("Gere um relatório XLS com base no ID_AGR")
	public void gerarRelatorioXLS(@PathVariable Long id_agr, HttpServletResponse response) {
		try {
			Workbook workbook = relatorioErisService.gerarRelatorioXLS(id_agr,response);

			// Configurar a resposta HTTP para enviar o arquivo XLS
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			response.setHeader("Content-Disposition", "attachment; filename=relatorio.xlsx");

			// Escrever o arquivo XLS na resposta HTTP
			OutputStream outputStream = response.getOutputStream();
			workbook.write(outputStream);
			outputStream.flush(); // Certifique-se de que todos os dados sejam gravados
			outputStream.close();

			// Fechar o Workbook
			workbook.close();

			// Fechar a conexão com o banco de dados, se necessário.

		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	@GetMapping(path = "/recibo-ato-normativo/{id}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> gerarReciboAtoNormativo(@PathVariable("id") Long idAto) {
		try {
			File recibo = atoNormativoService.gerarReciboAtoNormativo(idAto);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=reciboAtoNormativo.pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping(path = "/buscar-recibo-ato-normativo/{idProtocolo}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> buscarReciboAtoNormativo(@PathVariable("idProtocolo") Long idProtocolo) {
		try {
			File recibo = atoNormativoService.baixarReciboAtoNormativo(idProtocolo);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=reciboAtoNormativo.pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/recibo-conformidade/{id}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> gerarReciboConformidade(@PathVariable("id") Long idEntidadeReguladora) {
		try {
			ProtocoloConformidade protocoloConformidade =
					protocoloConformidadeService.buscarPorIdConformidade(idEntidadeReguladora).get();

			File recibo = conformidadeEntidadeService.gerarReciboConformidade(idEntidadeReguladora);
			String nomeArquivo = "Conformidade-" + protocoloConformidade.getProtocolo().getNumeroProtocolo() + ".pdf";

			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + nomeArquivo)
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


    @GetMapping(path = "/recibo-conformidade-segundaaba/{id}/{ano}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public ResponseEntity<?> gerarReciboConformidadeSegundaAba(@PathVariable("id") Long idEntidadeReguladora,
															   @PathVariable("ano") Long ano) {
        try {
            File recibo = conformidadeEntidadeService.gerarReciboConformidadeSegundaAba(idEntidadeReguladora, ano);
            ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=reciboConformidade.pdf")
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .contentLength(recibo.length())
                    .body(resource);
        } catch (NegocioException | IOException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }


	@GetMapping(value = "/relatorio-xls-condicoes-gerais/{idAgenciaReguladora}/{ano}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	@ApiOperation("Gere um relatório XLS com base no id do contrato")
	public void gerarRelatorioXLSCondicoesGerais(@PathVariable Long idAgenciaReguladora, @PathVariable Long ano, HttpServletResponse response) {
		try {
			Workbook workbook = conformidadeEntidadeService.gerarRelatorioXLS(idAgenciaReguladora,ano,response);

			// Configurar a resposta HTTP para enviar o arquivo XLS
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			response.setHeader("Content-Disposition", "attachment; filename=relatorio.xlsx");

			// Escrever o arquivo XLS na resposta HTTP
			OutputStream outputStream = response.getOutputStream();
			workbook.write(outputStream);
			outputStream.flush(); // Certifique-se de que todos os dados sejam gravados
			outputStream.close();

			// Fechar o Workbook
			workbook.close();

			// Fechar a conexão com o banco de dados, se necessário.

		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	@GetMapping(path = "/buscar-recibo-regulacao-tarifaria/{idProtocolo}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> buscarReciboRegulacaoTarifaria(@PathVariable("idProtocolo") Long idProtocolo) {
		try {
			File recibo = regulacaoTarifariaService.gerarReciboRegulacaoTarifaria(idProtocolo);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=reciboAtoNormativo.pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@GetMapping(path = "/buscar-recibo-ato-normativo-detalhado/{idProtocolo}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> buscarReciboAtoDetalhado(@PathVariable("idProtocolo") Long idProtocolo) {
		try {
			File recibo = protocoloIndenizacaoService.gerarReciboAtoDetalhado(idProtocolo);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=reciboAtoNormativo.pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}



	@GetMapping(path = "/buscar-recibo-contrato-normativo-detalhado/{idProtocolo}", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> buscarReciboContratoDetalhado(@PathVariable("idProtocolo") Long idProtocolo) {
		try {
			File recibo = protocoloIndenizacaoService.gerarReciboContratoDetalhado(idProtocolo);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=reciboAtoNormativo.pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}



	@GetMapping(path = "/recibo-requisito-complementar", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
	public ResponseEntity<?> gerarReciboRequisitoComplementar(@RequestParam("id")  Long idEntidadeReguladora,
															  @RequestParam("ano") Long ano,
															  @RequestParam("idAgencia")  Long idAgencia
															  ) {
		try {
			File recibo = requisitoComplementarService.gerarReciboComplementar(idEntidadeReguladora, ano, idAgencia);
			ByteArrayResource resource = new ByteArrayResource(FileUtils.readFileToByteArray(recibo));
			return ResponseEntity.ok()
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=reciboConformidade.pdf")
					.contentType(MediaType.APPLICATION_OCTET_STREAM)
					.contentLength(recibo.length())
					.body(resource);
		} catch (NegocioException | IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
}


// Fim do arquivo: RelatorioResource.java

// Arquivo: RequisitoComplementarResource.java
// Caminho: \br\gov\ana\sarsb\resource\RequisitoComplementarResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.FinalizacaoRequest;
import br.gov.ana.sarsb.service.RequisitoComplementarService;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Collections;
import java.util.List;

@RestController
@RequestMapping(path = "/requisito-complementar")
@PreAuthorize("isAuthenticated()")
public class RequisitoComplementarResource {

    private final RequisitoComplementarService service;

    public RequisitoComplementarResource(RequisitoComplementarService service) {
        this.service = service;
    }

    @PutMapping(path = "/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> atualizar(@PathVariable("id") Long id,
                                       @RequestPart("requisito") RequisitoComplementarDTO requisitoComplementarDTO,
                                       @RequestPart(value = "arquivos", required = false)
                                       List<MultipartFile> arquivos) {
        try {
            requisitoComplementarDTO.setArquivos(arquivos);
            RequisitoComplementarDTO requisito = service.atualizar(id, requisitoComplementarDTO);
            return ResponseEntity.ok(requisito);
        } catch (NegocioException | IOException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @DeleteMapping(path = "/{id}")
    public ResponseEntity<?> deletar(@PathVariable("id") Long id) {
        try {
            service.deletar(id);
            return ResponseEntity.noContent().build();
        } catch (NegocioException | IOException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @GetMapping(path = "/{idAgencia}/{anoReferencia}")
    public ResponseEntity<?> listar(@PathVariable("idAgencia") Long idAgencia,
                                    @PathVariable("anoReferencia") Long anoReferencia) {
        try {
            List<RequisitoComplementarDTO> requisitos = service.listar(idAgencia, anoReferencia);
            return ResponseEntity.ok(requisitos);
        } catch (NegocioException | IOException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @GetMapping(path = "/{id}")
    public ResponseEntity<?> obterPorId(@PathVariable("id") Long id) {
        try {
            RequisitoComplementarDTO requisito = service.obterPorId(id);
            return ResponseEntity.ok(requisito);
        } catch (NegocioException | IOException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @GetMapping(path = "requisitos/{idAgencia}")
    public ResponseEntity<?> obterListaRequisitos(@PathVariable("idAgencia") Long idAgencia) {
        try {
            List<RequisitoComplementarDTO> requisitos = service.listarTodos(idAgencia);
            return ResponseEntity.ok(requisitos);
        } catch (NegocioException | IOException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @PostMapping(path = "/reabilitar-preenchimento")
    public ResponseEntity<?> reabilitarPreenchimento(@RequestBody FinalizacaoRequest request) {
        try {
            service.reabilitarPreenchimento(request.getAno(), request.getIdAgencia());
            return ResponseEntity.ok(Collections.singletonMap("message", "Preenchimento reabilitado com sucesso."));
        } catch (NegocioException e) {
            return ResponseEntity.badRequest().body(Collections.singletonMap("message", e.getMessage()));
        }
    }



}


// Fim do arquivo: RequisitoComplementarResource.java

// Arquivo: SolicitacaoAcessoResource.java
// Caminho: \br\gov\ana\sarsb\resource\SolicitacaoAcessoResource.java

package br.gov.ana.sarsb.resource;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.SolicitacaoAcessoDTO;
import br.gov.ana.sarsb.service.SolicitacaoAcessoService;

@RestController
@RequestMapping(path = "/acesso")
public class SolicitacaoAcessoResource {

	@Autowired
	private SolicitacaoAcessoService solicitacaoAcessoService;
	
	@PostMapping(path = "/solicitar", consumes = MediaType.APPLICATION_JSON_VALUE) 
	public ResponseEntity<?> criarSolicitacaoAcesso(@Valid @RequestBody SolicitacaoAcessoDTO solicitacaoAcessoDTO) {
		try {
			solicitacaoAcessoService.salvarSolicitacaoAcesso(solicitacaoAcessoDTO);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping(path = "/esqueciSenha/{cnpj}/{email}") 
	public ResponseEntity<?> esqueciSenha(@PathVariable("cnpj") String cnpj, @PathVariable("email") String email) {
		try {
			solicitacaoAcessoService.esqueciSenha(cnpj, email);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}
	
	
}


// Fim do arquivo: SolicitacaoAcessoResource.java

// Arquivo: SustentabilidadeResource.java
// Caminho: \br\gov\ana\sarsb\resource\SustentabilidadeResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.model.dto.municipio.SolicitacaoAcessoDTO;
import br.gov.ana.sarsb.model.dto.municipio.SustentabilidadeDTO;
import br.gov.ana.sarsb.model.entity.Sustentabilidade;
import br.gov.ana.sarsb.service.SolicitacaoAcessoService;
import br.gov.ana.sarsb.service.SustentabilidadeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.modelmapper.ModelMapper;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping(path = "/sustentabilidade")
public class SustentabilidadeResource {



    @Autowired
    private SustentabilidadeService sustentabilidadeService;


    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> criarSustentabilidade(@Valid @RequestBody SustentabilidadeDTO sustentabilidadeDTO) {
        try {
            Sustentabilidade sustentabilidade = sustentabilidadeService.salvar(sustentabilidadeDTO);
            return ResponseEntity.ok().body(convertToDto(sustentabilidade));
        } catch (NegocioException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
    @GetMapping("/listar/{codigoPrefeitura}")
    public ResponseEntity<List<SustentabilidadeDTO>> listar(@PathVariable("codigoPrefeitura") Long codigoPrefeitura) {
        try {
            List<SustentabilidadeDTO> entidades = sustentabilidadeService.listarTodos(codigoPrefeitura);
            return ResponseEntity.ok(entidades);
        } catch (NegocioException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @PutMapping("/alterar/{codigoSustentabilidade}")
    public ResponseEntity<?> editar(@PathVariable("codigoSustentabilidade") Long susntentabilidade, @Valid @RequestBody SustentabilidadeDTO sustentabilidadeDTO) {
        try {
            Sustentabilidade sustentabilidade =  new Sustentabilidade();

            sustentabilidade.setAnoExercicio(sustentabilidadeDTO.getAnoExercicio());
            sustentabilidade.setRecRequerida(sustentabilidadeDTO.getRecRequerida());
            sustentabilidade.setValArrecadado(sustentabilidadeDTO.getValArrecadado());
            sustentabilidade.setValSubsTarifario(sustentabilidadeDTO.getValSubsTarifario());
            sustentabilidade.setSubValArrecadadoAlt(sustentabilidadeDTO.getSubValArrecadadoAlt());
            sustentabilidade.setSusVerSusten(sustentabilidadeDTO.getSusVerSusten());
            sustentabilidade.setSusUploadDocSus(sustentabilidadeDTO.getSusUploadDocSus());
            sustentabilidade.setSusConfVerif(sustentabilidadeDTO.getSusConfVerif());
            sustentabilidade.setSusAceiteLgp(sustentabilidadeDTO.getSusAceiteLgp());
            sustentabilidadeService.alterar(susntentabilidade, null, null, sustentabilidadeDTO);
            return ResponseEntity.ok().build();
        } catch (NegocioException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }


    private SustentabilidadeDTO convertToDto(Sustentabilidade sustentabilidade) {
        ModelMapper modelMapper = new ModelMapper();
        SustentabilidadeDTO sutentabilidadeDTO = modelMapper.map(sustentabilidade, SustentabilidadeDTO.class);
        return sutentabilidadeDTO;
    }

}


// Fim do arquivo: SustentabilidadeResource.java

// Arquivo: TipoResponsavelMandatarioDTO.java
// Caminho: \br\gov\ana\sarsb\resource\TipoResponsavelMandatarioDTO.java

package br.gov.ana.sarsb.resource;

public class TipoResponsavelMandatarioDTO {
}


// Fim do arquivo: TipoResponsavelMandatarioDTO.java

// Arquivo: TipoResponsavelMandatarioResource.java
// Caminho: \br\gov\ana\sarsb\resource\TipoResponsavelMandatarioResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.TipoResponsavelMandatario;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoResponsavelMandatarioDTO;
import br.gov.ana.sarsb.repository.TipoResponsavelMandatarioRepository;
import br.gov.ana.sarsb.service.TipoResponsavelMandatarioService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController

@RequestMapping(path = "/responsavel")
public  class TipoResponsavelMandatarioResource {


	private TipoResponsavelMandatarioService TipoResponsavelMandatarioService;
	private final TipoResponsavelMandatarioRepository tipoResponsavelMandatarioRepository;

	public TipoResponsavelMandatarioResource(TipoResponsavelMandatarioRepository tipoResponsavelMandatarioRepository) {
		this.tipoResponsavelMandatarioRepository = tipoResponsavelMandatarioRepository;
	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> AdicionarMandatario(@RequestBody TipoResponsavelMandatarioDTO tipoResponsavelMandatarioDTO) {
		try {

			TipoResponsavelMandatario tipoResponsavelMandatario = new TipoResponsavelMandatario();
			tipoResponsavelMandatario.setEmailResponsavelLegal(tipoResponsavelMandatarioDTO.getEmailResponsavelLegal());
			tipoResponsavelMandatario.setTelefoneResponsavelLegal(tipoResponsavelMandatarioDTO.getTelefoneResponsavelLegal());
			tipoResponsavelMandatario.setDataFimResponsavel(tipoResponsavelMandatarioDTO.getDataFimResponsavel());
			tipoResponsavelMandatario.setDataInicioResponsavel(tipoResponsavelMandatarioDTO.getDataInicioResponsavel());
			tipoResponsavelMandatario.setNomeResponsavelLegal(tipoResponsavelMandatarioDTO.getNomeResponsavelLegal());
			tipoResponsavelMandatario.setId_agr(tipoResponsavelMandatarioDTO.getId_agr());

			tipoResponsavelMandatarioRepository.save(tipoResponsavelMandatario);
			return new ResponseEntity<>(HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

//teste
	@GetMapping
	public @ResponseBody List<TipoResponsavelMandatario> ListaresponsavelMandatorio(){
		return tipoResponsavelMandatarioRepository.findAll();
	}
	//@Query("select a FROM TipoResponsavelMandatario a WHERE a.dataFimResponsavel is null")

	@GetMapping("/{id_agr}")
	public  <TipoResponsavelMandatario> Optional<br.gov.ana.sarsb.model.entity.TipoResponsavelMandatario> Listar(@PathVariable Long id_agr){
		return tipoResponsavelMandatarioRepository.ativomandatarios(id_agr);


	}


	@PutMapping("/{id}")
	public ResponseEntity<?> AtualizarMandatario (@PathVariable Long id,  @RequestBody TipoResponsavelMandatarioDTO TipoResponsavelMandatarioDTO){
		return tipoResponsavelMandatarioRepository.findById(id)
						.map(tipoResponsavelMandatario ->{
		tipoResponsavelMandatario.setEmailResponsavelLegal(TipoResponsavelMandatarioDTO.getEmailResponsavelLegal());
		tipoResponsavelMandatario.setTelefoneResponsavelLegal(TipoResponsavelMandatarioDTO.getTelefoneResponsavelLegal());
		tipoResponsavelMandatario.setDataFimResponsavel(TipoResponsavelMandatarioDTO.getDataFimResponsavel());
		tipoResponsavelMandatario.setDataInicioResponsavel(TipoResponsavelMandatarioDTO.getDataInicioResponsavel());
		tipoResponsavelMandatario.setNomeResponsavelLegal(TipoResponsavelMandatarioDTO.getNomeResponsavelLegal());
		tipoResponsavelMandatario.setId_agr(TipoResponsavelMandatarioDTO.getId_agr());
		TipoResponsavelMandatario update = tipoResponsavelMandatarioRepository.save(tipoResponsavelMandatario);
		return ResponseEntity.ok().body(update);
						})
				.orElse(ResponseEntity.notFound().build());



		}




}


// Fim do arquivo: TipoResponsavelMandatarioResource.java

// Arquivo: TipoServicoReguladoDescricaoResource.java
// Caminho: \br\gov\ana\sarsb\resource\TipoServicoReguladoDescricaoResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDescricaoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoDTO;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDescricao;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDocumento;
import br.gov.ana.sarsb.repository.TipoServicoReguladoDescricaoRepository;
import br.gov.ana.sarsb.repository.TipoServicoReguladoDocumentoRepository;
import br.gov.ana.sarsb.service.TipoServicoReguladoDescricaoService;
import br.gov.ana.sarsb.service.TipoSubServicosReguladosService;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController

@RequestMapping(path = "/subservicos")
public  class TipoServicoReguladoDescricaoResource {

	private TipoServicoReguladoDescricaoService TipoServicoReguladoDescricaoService;
	private TipoServicoReguladoDescricaoRepository tiposervicoreguladodescricaoRepository = null;

	public TipoServicoReguladoDescricaoResource(TipoServicoReguladoDescricaoRepository TipoServicoReguladoDescricaoRepository) {
		this.tiposervicoreguladodescricaoRepository = TipoServicoReguladoDescricaoRepository;
	}

	@GetMapping
	public @ResponseBody List<TipoServicoReguladoDescricao> Listarservicos(){
		return tiposervicoreguladodescricaoRepository.findAll();
	}


	@GetMapping("/{id_agr}")
	public  List<TipoServicoReguladoDescricao>  BuscarAgencia(@PathVariable Long id_agr){
		return tiposervicoreguladodescricaoRepository.ativomandatarios(id_agr);


	}

	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> AdicionarServico(@RequestBody TipoServicoReguladoDescricaoDTO TipoServicoReguladoDescricaoDTO) {
		try {
			TipoServicoReguladoDescricao tiposervcoregulacaodescricao = new TipoServicoReguladoDescricao();
			tiposervcoregulacaodescricao.setCodigoEri(TipoServicoReguladoDescricaoDTO.getCodigoEri());
			tiposervcoregulacaodescricao.setServico_ic_agua_potavel(TipoServicoReguladoDescricaoDTO.getServico_ic_agua_potavel());
			tiposervcoregulacaodescricao.setServico_ic_distribuicao_agua_potavel(TipoServicoReguladoDescricaoDTO.getServico_ic_distribuicao_agua_potavel());
			tiposervcoregulacaodescricao.setServico_ic_coleta_esgoto(TipoServicoReguladoDescricaoDTO.getServico_ic_coleta_esgoto());
			tiposervcoregulacaodescricao.setServico_ic_tratamento_esgoto(TipoServicoReguladoDescricaoDTO.getServico_ic_tratamento_esgoto());
			tiposervcoregulacaodescricao.setServico_ic_disposicao_residuos(TipoServicoReguladoDescricaoDTO.getServico_ic_disposicao_residuos());
			tiposervcoregulacaodescricao.setServico_ic_varricao(TipoServicoReguladoDescricaoDTO.getServico_ic_varricao());
			tiposervcoregulacaodescricao.setServico_ic_capina(TipoServicoReguladoDescricaoDTO.getServico_ic_capina());
			tiposervcoregulacaodescricao.setServico_ic_rocada(TipoServicoReguladoDescricaoDTO.getServico_ic_rocada());
			tiposervcoregulacaodescricao.setServico_ic_poda(TipoServicoReguladoDescricaoDTO.getServico_ic_poda());
			tiposervcoregulacaodescricao.setServico_ic_limpeza_bueiros(TipoServicoReguladoDescricaoDTO.getServico_ic_limpeza_bueiros());
			tiposervcoregulacaodescricao.setServico_ic_limpeza_logradouros(TipoServicoReguladoDescricaoDTO.getServico_ic_limpeza_logradouros());
			tiposervcoregulacaodescricao.setServico_ic_remocao_logradouros(TipoServicoReguladoDescricaoDTO.getServico_ic_remocao_logradouros());
			tiposervcoregulacaodescricao.setServico_ic_outras(TipoServicoReguladoDescricaoDTO.getServico_ic_outras());
			tiposervcoregulacaodescricao.setServico_ds_outras(TipoServicoReguladoDescricaoDTO.getServico_ds_outras());
			tiposervcoregulacaodescricao.setServico_ic_coleta_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_coleta_manejo());
			tiposervcoregulacaodescricao.setServico_ic_transbordo_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_transbordo_manejo());
			tiposervcoregulacaodescricao.setServico_ic_transporte_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_transporte_manejo());
			tiposervcoregulacaodescricao.setServico_ic_tratamento_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_tratamento_manejo());
			tiposervcoregulacaodescricao.setServico_ic_destinacao_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_destinacao_manejo());
			tiposervcoregulacaodescricao.setServico_ic_planejamento_publico(TipoServicoReguladoDescricaoDTO.getServico_ic_planejamento_publico());
			tiposervcoregulacaodescricao.setServico_ic_administracao(TipoServicoReguladoDescricaoDTO.getServico_ic_administracao());
			tiposervcoregulacaodescricao.setServico_ic_operacao_manutencao(TipoServicoReguladoDescricaoDTO.getServico_ic_operacao_manutencao());
			tiposervicoreguladodescricaoRepository.save(tiposervcoregulacaodescricao);
			return new ResponseEntity<>(HttpStatus.CREATED);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> AtualizarServicos (@PathVariable Long id,  @RequestBody TipoServicoReguladoDescricaoDTO TipoServicoReguladoDescricaoDTO){
		return tiposervicoreguladodescricaoRepository.findById(id)
				.map(tiposervcoregulacaodescricao ->{
					tiposervcoregulacaodescricao.setCodigoEri(TipoServicoReguladoDescricaoDTO.getCodigoEri());
					tiposervcoregulacaodescricao.setServico_ic_agua_potavel(TipoServicoReguladoDescricaoDTO.getServico_ic_agua_potavel());
					tiposervcoregulacaodescricao.setServico_ic_distribuicao_agua_potavel(TipoServicoReguladoDescricaoDTO.getServico_ic_distribuicao_agua_potavel());
					tiposervcoregulacaodescricao.setServico_ic_coleta_esgoto(TipoServicoReguladoDescricaoDTO.getServico_ic_coleta_esgoto());
					tiposervcoregulacaodescricao.setServico_ic_tratamento_esgoto(TipoServicoReguladoDescricaoDTO.getServico_ic_tratamento_esgoto());
					tiposervcoregulacaodescricao.setServico_ic_disposicao_residuos(TipoServicoReguladoDescricaoDTO.getServico_ic_disposicao_residuos());
					tiposervcoregulacaodescricao.setServico_ic_varricao(TipoServicoReguladoDescricaoDTO.getServico_ic_varricao());
					tiposervcoregulacaodescricao.setServico_ic_capina(TipoServicoReguladoDescricaoDTO.getServico_ic_capina());
					tiposervcoregulacaodescricao.setServico_ic_rocada(TipoServicoReguladoDescricaoDTO.getServico_ic_rocada());
					tiposervcoregulacaodescricao.setServico_ic_poda(TipoServicoReguladoDescricaoDTO.getServico_ic_poda());
					tiposervcoregulacaodescricao.setServico_ic_limpeza_bueiros(TipoServicoReguladoDescricaoDTO.getServico_ic_limpeza_bueiros());
					tiposervcoregulacaodescricao.setServico_ic_limpeza_logradouros(TipoServicoReguladoDescricaoDTO.getServico_ic_limpeza_logradouros());
					tiposervcoregulacaodescricao.setServico_ic_remocao_logradouros(TipoServicoReguladoDescricaoDTO.getServico_ic_remocao_logradouros());
					tiposervcoregulacaodescricao.setServico_ic_outras(TipoServicoReguladoDescricaoDTO.getServico_ic_outras());
					tiposervcoregulacaodescricao.setServico_ds_outras(TipoServicoReguladoDescricaoDTO.getServico_ds_outras());
					tiposervcoregulacaodescricao.setServico_ic_coleta_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_coleta_manejo());
					tiposervcoregulacaodescricao.setServico_ic_transbordo_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_transbordo_manejo());
					tiposervcoregulacaodescricao.setServico_ic_transporte_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_transporte_manejo());
					tiposervcoregulacaodescricao.setServico_ic_tratamento_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_tratamento_manejo());
					tiposervcoregulacaodescricao.setServico_ic_destinacao_manejo(TipoServicoReguladoDescricaoDTO.getServico_ic_destinacao_manejo());
					tiposervcoregulacaodescricao.setServico_ic_planejamento_publico(TipoServicoReguladoDescricaoDTO.getServico_ic_planejamento_publico());
					tiposervcoregulacaodescricao.setServico_ic_administracao(TipoServicoReguladoDescricaoDTO.getServico_ic_administracao());
					tiposervcoregulacaodescricao.setServico_ic_operacao_manutencao(TipoServicoReguladoDescricaoDTO.getServico_ic_operacao_manutencao());
					TipoServicoReguladoDescricao update = tiposervicoreguladodescricaoRepository.save(tiposervcoregulacaodescricao);
					return ResponseEntity.ok().body(update);
				})
				.orElse(ResponseEntity.notFound().build());



	}

	@DeleteMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> deletarServico(@PathVariable("id") Long id) {
		try {
			tiposervicoreguladodescricaoRepository.deleteById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}





}


// Fim do arquivo: TipoServicoReguladoDescricaoResource.java

// Arquivo: TipoSubServicoReguladoResource.java
// Caminho: \br\gov\ana\sarsb\resource\TipoSubServicoReguladoResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoFiltroDTO;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDocumento;
import br.gov.ana.sarsb.repository.TipoServicoReguladoDocumentoRepository;
import br.gov.ana.sarsb.service.TipoSubServicosReguladosService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController

@RequestMapping(path = "/subcategoria")
public  class TipoSubServicoReguladoResource {

	@Autowired
	private TipoSubServicosReguladosService tipoSubServicosReguladosService;
	private TipoServicoReguladoDocumentoRepository tiposubservicosreguladosRepository = null;

	public TipoSubServicoReguladoResource(TipoServicoReguladoDocumentoRepository TipoSubServicosReguladoRepository) {
		this.tiposubservicosreguladosRepository = TipoSubServicosReguladoRepository;
	}

	@GetMapping
	public @ResponseBody List<TipoServicoReguladoDocumento> Listatodosativos(){
		return tiposubservicosreguladosRepository.Listartodos();
	}


	@GetMapping("/{id_agr}")
	public  List<TipoServicoReguladoDocumento>  listarporeri(@PathVariable Long id_agr){
		return tiposubservicosreguladosRepository.ativomandatarios(id_agr);


	}


	@GetMapping("/{id_agr}/paginado")
	public Page<TipoServicoReguladoDocumento> listarPorEriPaginado(
			@PathVariable Long id_agr,
			@RequestParam(value = "pageNumber", defaultValue = "0") int page,
			@RequestParam(value = "pageSize", defaultValue = "10") int size,
			@RequestParam(value = "sort", defaultValue = "id,asc") String sort) {

		Pageable pageable = PageRequest.of(page, size, Sort.by(sort.split(",")[0])
				.ascending());

		return tiposubservicosreguladosRepository.ativomandatariosPaginado(id_agr, pageable);
	}



	@PostMapping("/{id}/{codigoServico}/{descricaoAtividade}")
	public ResponseEntity<?> cadastrarServico(@PathVariable Long id, @PathVariable Long codigoServico,  @PathVariable String descricaoAtividade,@RequestBody TipoServicoReguladoDocumentoDTO TipoServicoReguladoDocumentoDTO) {
		TipoServicoReguladoDocumento tiposervicoregultorio = new TipoServicoReguladoDocumento();
		tiposervicoregultorio.setCodigoEntidade(id);
		tiposervicoregultorio.setCodigoServico(codigoServico);
		tiposervicoregultorio.setCodigoEntidade(TipoServicoReguladoDocumentoDTO.getCodigoEntidade());
		tiposervicoregultorio.setCodigoEntidade(TipoServicoReguladoDocumentoDTO.getCodigoEntidade());
		tiposervicoregultorio.setDatainicioServico(TipoServicoReguladoDocumentoDTO.getDatainicioServico());
		tiposervicoregultorio.setDataFimServico(TipoServicoReguladoDocumentoDTO.getDataFimServico());
		tiposervicoregultorio.setDocumentoDelegacao(TipoServicoReguladoDocumentoDTO.getDocumentoDelegacao());
		tiposervicoregultorio.setCodigoPrestadornovo(TipoServicoReguladoDocumentoDTO.getCodigoPrestadornovo());
		tiposervicoregultorio.setCodigoMunicipio(TipoServicoReguladoDocumentoDTO.getCodigoMunicipio());
		tiposervicoregultorio.setUfMunicipio(TipoServicoReguladoDocumentoDTO.getUfMunicipio());
		tiposervicoregultorio.setNomeMunicipio(TipoServicoReguladoDocumentoDTO.getNomeMunicipio());
		tiposervicoregultorio.setDescricaoAtividade(descricaoAtividade);
		tiposervicoregultorio.setCodigoAtribuicao(TipoServicoReguladoDocumentoDTO.getCodigoAtribuicao());
		tiposervicoregultorio.setOutrasDescricao(TipoServicoReguladoDocumentoDTO.getOutrasDescricao());
		tiposervicoregultorio.setDataInicioPrestador(TipoServicoReguladoDocumentoDTO.getDataInicioPrestador());
		tiposervicoregultorio.setDataFimPrestador(TipoServicoReguladoDocumentoDTO.getDataFimPrestador());
		tiposervicoregultorio.setServicoExcluido(TipoServicoReguladoDocumentoDTO.getServicoExcluido());
		TipoServicoReguladoDocumento save = tiposubservicosreguladosRepository.save(tiposervicoregultorio);
		return ResponseEntity.ok().body(save);
	}
//teste

	@PutMapping("/{id}/{codigoServico}/{descricaoAtividade}")
	public ResponseEntity<?> AtualizarServicos(@PathVariable Long id, @PathVariable Long codigoServico, @PathVariable String descricaoAtividade, @RequestBody TipoServicoReguladoDocumentoDTO TipoServicoReguladoDocumentoDTO) {
		return tiposubservicosreguladosRepository.findById(id)
				.map(tiposervicoregultorio ->{
					tiposervicoregultorio.setCodigoEntidade(codigoServico);
					tiposervicoregultorio.setDescricaoAtividade(descricaoAtividade);
					tiposervicoregultorio.setDatainicioServico(TipoServicoReguladoDocumentoDTO.getDatainicioServico());
					tiposervicoregultorio.setDataFimServico(TipoServicoReguladoDocumentoDTO.getDataFimServico());
					tiposervicoregultorio.setDocumentoDelegacao(TipoServicoReguladoDocumentoDTO.getDocumentoDelegacao());
					tiposervicoregultorio.setCodigoPrestadornovo(TipoServicoReguladoDocumentoDTO.getCodigoPrestadornovo());
					tiposervicoregultorio.setCodigoMunicipio(TipoServicoReguladoDocumentoDTO.getCodigoMunicipio());
					tiposervicoregultorio.setUfMunicipio(TipoServicoReguladoDocumentoDTO.getUfMunicipio());
					tiposervicoregultorio.setNomeMunicipio(TipoServicoReguladoDocumentoDTO.getNomeMunicipio());
					tiposervicoregultorio.setCodigoAtribuicao(TipoServicoReguladoDocumentoDTO.getCodigoAtribuicao());
					tiposervicoregultorio.setOutrasDescricao(TipoServicoReguladoDocumentoDTO.getOutrasDescricao());
					tiposervicoregultorio.setDataInicioPrestador(TipoServicoReguladoDocumentoDTO.getDataInicioPrestador());
					tiposervicoregultorio.setDataFimPrestador(TipoServicoReguladoDocumentoDTO.getDataFimPrestador());
					tiposervicoregultorio.setServicoExcluido(TipoServicoReguladoDocumentoDTO.getServicoExcluido());
					TipoServicoReguladoDocumento update = tiposubservicosreguladosRepository.save(tiposervicoregultorio);
					return ResponseEntity.ok().body(update);
				})
				.orElse(ResponseEntity.notFound().build());
	}




	@DeleteMapping("/{id}/{codigoServico}/{descricaoAtividade}")
	public ResponseEntity<?> deletarServico(@PathVariable Long id, @PathVariable Long codigoServico, @PathVariable String descricaoAtividade) {
		try {
			tiposubservicosreguladosRepository.findById(id).ifPresent(tiposervicoregultorio -> {
				tiposervicoregultorio.setServicoExcluido(true);
				tiposervicoregultorio.setCodigoServico(codigoServico);
				tiposervicoregultorio.setDescricaoAtividade(descricaoAtividade);
				tiposubservicosreguladosRepository.save(tiposervicoregultorio);
			});
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}





	@PutMapping("/{id}")
	public ResponseEntity<TipoServicoReguladoDocumento> atualizarPrestador(
			@PathVariable Long id,
			@RequestBody TipoServicoReguladoDocumentoDTO dto
	) {
		Optional<TipoServicoReguladoDocumento> optional = tiposubservicosreguladosRepository.findById(id);
		if (optional.isEmpty()) {
			return ResponseEntity.notFound().build();
		}

		TipoServicoReguladoDocumento tipoServicoRegulado = optional.get();
		tipoServicoRegulado.setCodigoPrestadornovo(dto.getCodigoPrestadornovo());
		tipoServicoRegulado.setDataInicioPrestador(dto.getDataInicioPrestador());
		tipoServicoRegulado.setDataFimPrestador(dto.getDataFimPrestador());

		TipoServicoReguladoDocumento updated = tiposubservicosreguladosRepository.save(tipoServicoRegulado);
		return ResponseEntity.ok(updated);
	}

	@GetMapping("/servicoSluSmrsu/{idAgr}/{uf}/{mun}/{ano}")
	public  List<TipoServicoReguladoDocumentoDTO> listarPorEriMunicipioSluSmrsu(@PathVariable Long idAgr,
																				@PathVariable String uf,
																				@PathVariable String mun,
																				@PathVariable Long ano){
		return tipoSubServicosReguladosService.listarPorEriMunicipioSluSmrsu(idAgr, uf, mun, ano);
	}

	@GetMapping(path = "/buscar-atividades/{idAgencia}/{anoColeta}/{uf}/{municipio}", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> retornaAtivadadesCadastradas(@PathVariable("idAgencia") Long idAgencia,
														  @PathVariable("anoColeta") Long anoColeta,
														  @PathVariable("uf") String uf,
														  @PathVariable("municipio") String municipio) {
		try {
			return new ResponseEntity<>(tipoSubServicosReguladosService.retornaAtivadadesCadastradas(idAgencia, anoColeta, uf, municipio), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@PostMapping(path = "/buscar-atividades", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> buscarAtividadesPorUFMunicipioCpf(@RequestBody TipoServicoReguladoDocumentoFiltroDTO tipoServicoReguladoDocumentoFiltroDTO
														 ) {
		try {
			return new ResponseEntity<>(tipoSubServicosReguladosService.buscarAtividadesPorUFMunicipioCpf(tipoServicoReguladoDocumentoFiltroDTO), HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


}


// Fim do arquivo: TipoSubServicoReguladoResource.java

// Arquivo: UploadResource.java
// Caminho: \br\gov\ana\sarsb\resource\UploadResource.java

package br.gov.ana.sarsb.resource;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.DataImportacaoStatusDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PlanilhaUniversalizacaoDTO;
import br.gov.ana.sarsb.model.entity.TipoFormulario;

import java.io.*;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import br.gov.ana.sarsb.service.*;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping(path = "/upload")
public class UploadResource {

	@Autowired
	private InstrumentoCobrancaService instrumentoCobrancaService;

	@Autowired
	private ProcessoAgenciaService processoAgenciaService;

	@Autowired
	private ProtocoloPrestadorService protocoloPrestadorService;

	@Autowired
	private AditivoAgenciaService aditivoAgenciaService;
	@Autowired
	private FileStorageService fileStorageService;

	@Autowired
	private PlanilhaUniversalizacaoService service;

	private static final String CAMINHO_PLANILHA = "C:/temp/universalizacao.xlsx";


	@PostMapping(path = "/{formulario}/{identificador}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<?> salvarArquivo(
			@PathVariable("formulario") Long formulario,
			@PathVariable("identificador") Long identificador,
			@RequestPart("arquivo") MultipartFile arquivo) {
		try {
			if (TipoFormulario.FORMULARIO_SMRSU.getId().equals(formulario)) {
				instrumentoCobrancaService.salvarArquivo(identificador, arquivo);
			} else if (TipoFormulario.FORMULARIO_AGENCIA.getId().equals(formulario)) {
				processoAgenciaService.salvarArquivo(identificador, arquivo);
			} else if (TipoFormulario.FORMULARIO_PRESTADOR.getId().equals(formulario)) {
				protocoloPrestadorService.salvarArquivoProtocoloAdicional(identificador, arquivo);
			} else if (TipoFormulario.FORMULARIO_AGENCIA_ADITIVO.getId().equals(formulario)) {
				aditivoAgenciaService.salvarArquivo(identificador, arquivo);
			}

			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping(path = "/{formulario}/bucket/{cnpj}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<?> salvarArquivoS3(
			@PathVariable("formulario") Long formulario,
			@PathVariable("cnpj") String cnpj,
			@RequestPart("arquivo") MultipartFile arquivo) {
		try {
			fileStorageService.saveS3(arquivo, cnpj, formulario);
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}


	@GetMapping("/download/{formulario}/{identificador}/{nomeArquivo:.+}")
	public ResponseEntity<?> downloadFile(@PathVariable("nomeArquivo") String nomeArquivo,
										  @PathVariable("formulario") Long formulario, @PathVariable("identificador") String identificadorStr,
										  HttpServletRequest request) {

		Resource resource = null;
		Long identificador = Long.parseLong(identificadorStr.replaceAll("[^0-9]", ""));
		if (TipoFormulario.FORMULARIO_SMRSU.getId().equals(formulario)) {
			resource = instrumentoCobrancaService.recuperarArquivo(identificador, nomeArquivo);
		} else if (TipoFormulario.FORMULARIO_AGENCIA.getId().equals(formulario)) {
			resource = processoAgenciaService.recuperarArquivo(identificador, nomeArquivo);
		} else if (TipoFormulario.FORMULARIO_PRESTADOR.getId().equals(formulario)) {
			resource = protocoloPrestadorService.recuperarArquivo(identificador, nomeArquivo);
		} else if (TipoFormulario.FORMULARIO_AGENCIA_ADITIVO.getId().equals(formulario)) {
			resource = aditivoAgenciaService.recuperarArquivo(identificador, nomeArquivo);
		}

		if (resource != null) {
			String contentType = null;
			try {
				contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
			} catch (IOException ex) {
				ex.printStackTrace();
			}

			if (contentType == null) {
				contentType = "application/octet-stream";
			}

			return ResponseEntity.ok().contentType(MediaType.parseMediaType(contentType))
					.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
					.body(resource);
		} else {
			return ResponseEntity.badRequest().body("Erro ao baixar arquivo!");
		}

	}

	@GetMapping("/download/{formulario}/bucket/{cnpj}/{nomeArquivo:.+}")
	public ResponseEntity<?> downloadFileS3(@PathVariable("nomeArquivo") String nomeArquivo,
											@PathVariable("formulario") Long formulario, @PathVariable("cnpj") String cnpj,
											HttpServletRequest request) {
		try {
			return fileStorageService.loadS3(nomeArquivo, cnpj, formulario);
		} catch (IOException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}

	}

	@DeleteMapping(path = "/{formulario}/{identificador}/{nomeArquivo:.+}")
	public ResponseEntity<?> deletarArquivo(
			@PathVariable("formulario") Long formulario,
			@PathVariable("identificador") Long identificador,
			@PathVariable("nomeArquivo") String nomeArquivo) {
		try {
			if (TipoFormulario.FORMULARIO_SMRSU.getId().equals(formulario)) {
			} else if (TipoFormulario.FORMULARIO_AGENCIA.getId().equals(formulario)) {
				processoAgenciaService.deletarArquivo(identificador, nomeArquivo);
			}
			return new ResponseEntity<>(HttpStatus.OK);
		} catch (NegocioException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping(value = "/upload/planilha/{codAgrCd}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	public ResponseEntity<?> uploadPlanilha(
			@PathVariable("codAgrCd") Long codAgrCd,
			@RequestPart(name = "arquivo", required = true) MultipartFile arquivo) {

		if (arquivo.isEmpty()) {
			return ResponseEntity.badRequest().body("Arquivo não pode estar vazio");
		}

		try {
			service.processarEGravarExcel(arquivo, codAgrCd);
			return ResponseEntity.ok("Arquivo processado e salvo com sucesso! codAgrCd: " + codAgrCd);
		} catch (IOException e) {
			return ResponseEntity.status(500).body("Erro ao processar o arquivo: " + e.getMessage());
		}
	}

	@GetMapping("/{codAgrCd}/data-importacao")
	public Map<String, Object> obterDataImportacao(@PathVariable Long codAgrCd) {
		return service.consultarDataImportacao(codAgrCd);
	}


	@GetMapping("/relatorio/universalizacao/download/{codAgrCd}")
	public ResponseEntity<InputStreamResource> downloadPlanilha(@PathVariable("codAgrCd") Long codAgrCd) throws IOException, InvalidFormatException {
		ByteArrayOutputStream planilha = service.preencherPlanilha(codAgrCd);

		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=universalizacao.xlsx")
				.contentType(MediaType.parseMediaType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
				.body(new InputStreamResource(new ByteArrayInputStream(planilha.toByteArray())));
	}
}


// Fim do arquivo: UploadResource.java

============================================================

PACOTE 31 - [Repository] br.gov.ana.sarsb.repository
------------------------------------------------------------
Arquivos: 92 | Métodos: 0

// Arquivo: AditivoAgenciaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\AditivoAgenciaRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.AditivoAgencia;

@Repository
public interface AditivoAgenciaRepository extends JpaRepository<AditivoAgencia, Long> {
	
	/**
	 * Busca aditivos de agência por ID do formulário e protocolo.
	 * 
	 * @param idFormulario ID do formulário de aditivo da agência
	 * @param protocolo protocolo do aditivo
	 * @return lista de aditivos de agência que correspondem aos critérios de busca
	 */
	@Query(value = "SELECT a FROM AditivoAgencia a WHERE a.aditivoProtocolo.formularioAditivoAgencia.id = :idFormulario "
			+ "AND a.aditivoProtocolo.protocolo = :protocolo", nativeQuery = false)
	List<AditivoAgencia> findByFormularioAndProtocolo(Long idFormulario, String protocolo); 
	
}

// Fim do arquivo: AditivoAgenciaRepository.java

// Arquivo: AditivoMunicipioRepository.java
// Caminho: \br\gov\ana\sarsb\repository\AditivoMunicipioRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.AditivoMunicipio;

@Repository
public interface AditivoMunicipioRepository extends JpaRepository<AditivoMunicipio, Long> {
	
	@Query(value = "select distinct am.amo_cd_ibgemunicipio from public.sabta_aditivomunicipio am "
			+ "left join public.sabtb_aditivoagencia aa on aa.aag_cd = am.amo_aag_cd "
			+ "left join public.sabtb_aditivoprotocolo ap on ap.adp_cd = aa.aag_adp_cd "
			+ "where ap.adp_fao_cd = :idFormulario and ap.adp_ds_protocolo = :protocolo", nativeQuery = true)
	List<String> retornaCdIbgePorFormularioEProtocolo(Long idFormulario, String protocolo);
	
}

// Fim do arquivo: AditivoMunicipioRepository.java

// Arquivo: AditivoProtocoloRepository.java
// Caminho: \br\gov\ana\sarsb\repository\AditivoProtocoloRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.AditivoProtocoloAgencia;
import br.gov.ana.sarsb.model.entity.FormularioAditivoAgencia;

@Repository
public interface AditivoProtocoloRepository extends JpaRepository<AditivoProtocoloAgencia, Long> {
	
	@Query(value = "SELECT ap.* FROM public.sabtb_aditivoprotocolo ap "
			+ "WHERE ap.adp_fao_cd = :idFormulario AND ap.adp_ds_protocolo = :protocolo "
			+ "ORDER BY ap.adp_cd DESC LIMIT 1", nativeQuery = true)
	Optional<AditivoProtocoloAgencia> findByFormularioAndProtocolo(Long idFormulario, String protocolo);
	
	List<AditivoProtocoloAgencia> findByFormularioAditivoAgencia(FormularioAditivoAgencia formularioAditivoAgencia);
	
}

// Fim do arquivo: AditivoProtocoloRepository.java

// Arquivo: AgenciaReguladoraRepository.java
// Caminho: \br\gov\ana\sarsb\repository\AgenciaReguladoraRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.TipoAgenciaReguladora;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface AgenciaReguladoraRepository extends JpaRepository<AgenciaReguladora, Long> {
	
	Optional<AgenciaReguladora> findByCnpj(String cnpj);
	Optional<AgenciaReguladora> findByHashAtivacao(String hashAtivacao);
	
	Optional<AgenciaReguladora> pesquisaPorHash(String hashAtivacao);

	@Query("SELECT a FROM AgenciaReguladora a WHERE a.id = :codigoAgencia")
	Optional<AgenciaReguladora> findByIds(@Param("codigoAgencia") Long codigoAgencia);
}



// Fim do arquivo: AgenciaReguladoraRepository.java

// Arquivo: AgenciaTemProtocoloPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\AgenciaTemProtocoloPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.AgenciaTemProtocoloPrestador;

@Repository
public interface AgenciaTemProtocoloPrestadorRepository extends JpaRepository<AgenciaTemProtocoloPrestador, Long> {

	@Query(value = "SELECT a FROM AgenciaTemProtocoloPrestador a WHERE a.processoCefAgencia.id = :idProcesso", nativeQuery = false)
	List<AgenciaTemProtocoloPrestador> findByProcessoCefAgencia(Long idProcesso);
	
}

// Fim do arquivo: AgenciaTemProtocoloPrestadorRepository.java

// Arquivo: AtoNormativoDetalhadoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\AtoNormativoDetalhadoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.AtoNormativoDetalhadoDTO;
import br.gov.ana.sarsb.model.entity.AtoNormativoDetalhado;
import br.gov.ana.sarsb.model.entity.RegulacaoTarifaria;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface AtoNormativoDetalhadoRepository extends JpaRepository<AtoNormativoDetalhado, Long> {

    List<AtoNormativoDetalhado> findByidAgr(Long idAgr);


    @Query(value = "SELECT * FROM public.sabtb_atonormativo_detalhado ato " +
            "WHERE ato.atod_ano_coleta_id = :ano " +
            "AND ato.atod_id_agr = :agenciaId", nativeQuery = true)
    List<AtoNormativoDetalhado> findByAnoAndAgenciaId(@Param("ano") Long ano, @Param("agenciaId") Long agenciaId);
}


// Fim do arquivo: AtoNormativoDetalhadoRepository.java

// Arquivo: AtoNormativoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\AtoNormativoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.AtoNormativoEri;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface AtoNormativoRepository extends JpaRepository<AtoNormativoEri, Long> {

    @Query(value = "SELECT a.* FROM public.sabtb_atonormativoeri a "
            + "WHERE a.ato_arg_cd = :id ", nativeQuery = true)
    List<AtoNormativoEri> findByAgenciaReguladora(Long id);


    @Query(value = "SELECT a.* FROM public.sabtb_atonormativoeri a "
            + "WHERE a.ato_ano_referencia = :ano ", nativeQuery = true)
    List<AtoNormativoEri> findByAno(Long ano);


    @Query(value = "SELECT a.* FROM public.sabtb_atonormativoeri a "
            + "WHERE a.ato_ano_referencia = :ano and a.ato_arg_cd = :agencia  ", nativeQuery = true)
    AtoNormativoEri findByAnoAgencia(Long ano, Long agencia);

    @Query(value = "SELECT a.* FROM public.sabtb_atonormativoeri a "
            + "WHERE a.ato_ano_referencia = :ano " +
            "AND a.ato_possui_ato_normativo is not null " +
            "AND a.ato_arg_cd = :agencia"
            , nativeQuery = true)
    AtoNormativoEri findByAnoAndAtivo(Long ano, Long agencia);


    @Query(value = "SELECT a.* FROM public.sabtb_atonormativoeri a "
            + "WHERE a.ato_ano_referencia = :ano and a.ato_arg_cd= :idEri", nativeQuery = true)
    List<AtoNormativoEri> findByAnoAndEri(Long ano, Long idEri);

}


// Fim do arquivo: AtoNormativoRepository.java

// Arquivo: CadastranteRepository.java
// Caminho: \br\gov\ana\sarsb\repository\CadastranteRepository.java

package br.gov.ana.sarsb.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.Cadastrante;

@Repository
public interface CadastranteRepository extends JpaRepository<Cadastrante, Long> {
	
	@Query(value = "SELECT c.* FROM public.sabtb_cadastrante c "
			+ "INNER JOIN public.sabtb_prefeitura p ON p.pft_cd = c.cad_pft_cd "
			+ "WHERE p.pft_nu_cnpj = :cnpj ORDER BY c.cad_cd DESC LIMIT 1", nativeQuery = true)
	Optional<Cadastrante> findByPrefeitura(String cnpj);
	
	@Query(value = "SELECT c.* FROM public.sabtb_cadastrante c "
			+ "WHERE c.cad_nu_cpf = :cpf ORDER BY c.cad_cd DESC LIMIT 1", nativeQuery = true)
	Optional<Cadastrante> findByCpf(String cpf);


	@Query(value = "SELECT c.* FROM public.sabtb_cadastrante c "
			+ "WHERE c.cad_pft_cd = :idmunicipio ORDER BY c.cad_cd DESC LIMIT 1", nativeQuery = true)
		Optional<Cadastrante> recuperarCadastranteid(long idmunicipio);
}

// Fim do arquivo: CadastranteRepository.java

// Arquivo: CondicaoAtividadeRepository.java
// Caminho: \br\gov\ana\sarsb\repository\CondicaoAtividadeRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.CondicaoAtividade;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface CondicaoAtividadeRepository extends JpaRepository<CondicaoAtividade, Long> {
	List<CondicaoAtividade> findAllByConformidadeServicoId(Long conformidadeId);

	List<CondicaoAtividade> findAllByServicoReguladoId(Long servicoReguladoId);

	@Query(value = "select codAti.cond_cd,\n" +
			"       codAti.cond_ic_conforme,\n" +
			"       codAti.cond_serv_nome,\n" +
			"       codAti.cond_serv_prestador_cd,\n" +
			"       codAti.cond_serv_prestador_nm,\n" +
			"       codAti.cond_serv_dt_inicio,\n" +
			"       codAti.cond_serv_dt_fim,\n" +
			"       codAti.cond_tp_serv\n" +
			"from sabtb_condicoesatividades codAti\n" +
			"         inner join sabtb_conformidadeservicos sc on sc.conf_cd = codAti.cond_conf_cd\n" +
			"         inner join sabtb_servicosregulados ss on ss.servreg_cd = codAti.cond_serv_cd\n" +
			"where sc.conf_agr_cd = :agenciaReguladoraId\n" +
			"  and sc.conf_aa_coleta = :anoColeta\n" +
			"  and ss.servreg_nm_uf = :uf\n" +
			"  and ss.servreg_mun_nm = :municipio " , nativeQuery = true)
	List<CondicaoAtividade> buscarAtividadesPor(Long agenciaReguladoraId, Long anoColeta, String uf, String municipio);
}

// Fim do arquivo: CondicaoAtividadeRepository.java

// Arquivo: ConformidadeEntidadeRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ConformidadeEntidadeRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ConformidadeEntidade;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ConformidadeEntidadeRepository extends JpaRepository<ConformidadeEntidade, Long> {

    @Query(value = "SELECT a.* FROM public.sabtb_conformidadeentidade a "
            + "WHERE a.con_agr_cd = :id ", nativeQuery = true)
    List<ConformidadeEntidade> findAllByAgenciaReguladora(Long id);


    @Query(value = "SELECT a.* FROM public.sabtb_conformidadeentidade a "
            + "WHERE a.con_agr_cd = :id and a.con_aa_coleta = :ano ", nativeQuery = true)
    List<ConformidadeEntidade> findAllByAgenciaReguladoraAndYear(Long id, Long ano);



    @Query(value = "select confServico.conf_aa_coleta,\n" +
            "       sm.mun_uf,\n" +
            "       sm.mun_nm,\n" +
            "    CASE\n" +
            "        WHEN sc.cond_tp_serv = 3 THEN 'SLU'\n" +
            "        WHEN sc.cond_tp_serv = 4 THEN 'SMRSU'\n" +
            "    End as tipoServico,\n" +
            "       sc.cond_serv_nome,\n" +
            "       sc.cond_serv_prestador_nm,\n" +
            "\n" +
            "    CASE\n" +
            "        WHEN sc.cond_serv_dt_inicio IS NOT NULL AND sc.cond_serv_dt_fim IS NOT NULL THEN\n" +
            "            TO_CHAR(sc.cond_serv_dt_inicio, 'dd/MM/yyyy') || ' e ' || TO_CHAR(sc.cond_serv_dt_fim, 'dd/MM/yyyy')\n" +
            "        when sc.cond_serv_dt_inicio is not null then tO_CHAR(sc.cond_serv_dt_inicio, 'dd/MM/yyyy')\n" +
            "        when sc.cond_serv_dt_fim is not null then tO_CHAR(sc.cond_serv_dt_fim, 'dd/MM/yyyy')\n" +
            "        ELSE\n" +
            "            'Não informado'\n" +
            "    END AS DatasConcatenadas,\n" +
            "\n" +
            "     CASE\n" +
            "        WHEN sc.cond_ic_conforme = true THEN 'Sim'\n" +
            "        WHEN sc.cond_ic_conforme = false THEN 'Não'\n" +
            "    End as ConformidadeAtividades,\n" +
            "    CASE\n" +
            "        when sc.cond_ic_conforme  = true then 'Não se Aplica '\n" +
            "        WHEN sc.cond_tp_serv = 3 and confServico.conf_ds_inconformidadeslu is not null THEN confServico.conf_ds_inconformidadeslu\n" +
            "        WHEN sc.cond_tp_serv = 4 and confServico.conf_ds_inconformidadesmrsu is not null THEN confServico.conf_ds_inconformidadesmrsu\n" +
            "\n" +
            "    End as descricaoSluSmru,\n" +
            "       TO_CHAR(confServico.conf_dt_registro, 'dd/MM/yyyy'),\n" +
            "\n" +
            "    CASE\n" +
            "        WHEN s.con_ic_atendimentodiretrizes = true THEN 'Sim'\n" +
            "        WHEN s.con_ic_atendimentodiretrizes = false THEN 'Não'\n" +
            "    End as atendimentoDiretrizes,\n" +
            "\n" +
            "    CASE\n" +
            "        WHEN  s.con_ds_motivo is null  THEN 'Não se Aplica'\n" +
            "        else\n" +
            "        s.con_ds_motivo\n" +
            "    End as descricaoMotivo\n" +
            "\n" +
            "\n" +
            "from sabtb_conformidadeservicos confServico\n" +
            "left join sabtb_agenciareguladora sa on sa.agr_cd = confServico.conf_agr_cd\n" +
            "left join sabtb_condicoesatividades sc on confServico.conf_cd = sc.cond_conf_cd\n" +
            "left JOIN (\n" +
            "  select * from sabtb_conformidadeentidade conf\n" +
            "   where conf.con_agr_cd = :idAgr\n" +
            "   and conf.con_aa_coleta = :ano\n" +
            ") s ON confServico.conf_agr_cd = s.con_agr_cd\n" +
            "left join sabtb_municipio sm on confServico.conf_mun_cd = sm.mun_cd\n" +
            "where confServico.conf_agr_cd = :idAgr and  confServico.conf_aa_coleta = :ano", nativeQuery = true )
    List<Object[]> findDadosRelatorioByAgr(@Param("idAgr") Long idAgr, @Param("ano") Long ano );
}


// Fim do arquivo: ConformidadeEntidadeRepository.java

// Arquivo: ConformidadeServicoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ConformidadeServicoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.entity.ConformidadeServico;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ConformidadeServicoRepository extends JpaRepository<ConformidadeServico, Long> {
    List<ConformidadeServico> findAllByAgenciaReguladoraIdAndAnoColeta(Long agenciaReguladoraId, Long anoColeta);

    @Query("SELECT distinct c FROM ConformidadeServico c " +
            "LEFT JOIN MunicipioIBGE muni ON c.municipioIBGE.codigoIbge = muni.codigoIbge " +
            "WHERE "
            + "(:idMunicipio IS NULL OR muni.codigoIbge = :idMunicipio) AND "
            + "(:ufSigla IS NULL OR muni.Uf = :ufSigla) AND "
            + "(:anoColeta IS NULL OR c.anoColeta = :anoColeta) AND "
            + "(:servicoPrestado IS NULL OR c.tipoServico = :servicoPrestado) AND "
            + "c.agenciaReguladora.id = :idAgencia")
    List<ConformidadeServico> pesquisar(
            @Param("idAgencia") Long idAgencia,
            @Param("idMunicipio") Long idMunicipio,
            @Param("anoColeta") Long anoColeta,
            @Param("ufSigla") String ufSigla,
            @Param("servicoPrestado") String servicoPrestado
    );

    @Query(value = " SELECT CASE WHEN COUNT(sc) > 0 THEN true ELSE false END from sabtb_conformidadeservicos sc " +
            " inner join sabtb_municipio sm on sm.mun_cd = sc.conf_mun_cd " +
            " where sm.mun_nm ilike :municipio and sm.mun_uf =:uf and sc.conf_agr_cd =:idAgencia and sc.conf_aa_coleta =:ano  ", nativeQuery = true)
    Boolean existeConformidadePorMuniUf(String municipio, String uf, Long idAgencia, Long ano);


    @Query(value = " SELECT CASE WHEN COUNT(sc) > 0 THEN true ELSE false END from sabtb_conformidadeservicos sc " +
            " where sc.conf_agr_cd =:agencia and sc.conf_aa_coleta =:ano and sc.conf_ic_conforme is not null and sc.conf_dt_finalizacao is not null ", nativeQuery = true)
    Boolean existePreenchimentoFinalizado(Long ano, Long agencia);

    List<ConformidadeServico> findByAgenciaReguladoraId(Long idAgr);

    @Query(value = "select case when count(conf) > 0 then true else false end from sabtb_conformidadeservicos conf" +
            "        where conf.conf_aa_coleta = :anoColeta and conf.conf_agr_cd = :agenciaReguladoraId and conf.conf_mun_cd= :codIbge", nativeQuery = true)
    Boolean validarMunicipioImportado(Long agenciaReguladoraId, Long anoColeta, Long codIbge);

}

// Fim do arquivo: ConformidadeServicoRepository.java

// Arquivo: ContratoAditivoVinculadoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoAditivoVinculadoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ContratoAditivoVinculado;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import javax.transaction.Transactional;
import java.util.List;

@Repository
public interface ContratoAditivoVinculadoRepository extends JpaRepository<ContratoAditivoVinculado, Long> {

    List<ContratoAditivoVinculado> findAllByContratoId(Long contratoId);

    @Modifying
    @Transactional
    @Query("DELETE FROM ContratoAditivoVinculado contrato WHERE contrato.contrato.id = :contratoId")
    void deleteAllByContratoId(@Param("contratoId") Long contratoId);
}

// Fim do arquivo: ContratoAditivoVinculadoRepository.java

// Arquivo: ContratoDetalhamentoRespository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoDetalhamentoRespository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.Contrato;
import br.gov.ana.sarsb.model.entity.ContratoDetalhamento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ContratoDetalhamentoRespository extends JpaRepository<ContratoDetalhamento, Long> {


    List<ContratoDetalhamento> findByConDetIdAgr(Long conDetIdAgr);
}


// Fim do arquivo: ContratoDetalhamentoRespository.java

// Arquivo: ContratoMunicipioPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoMunicipioPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.ContratoMunicipio;

@Repository
public interface ContratoMunicipioPrestadorRepository extends JpaRepository<ContratoMunicipio, Long> {
	
	@Query(value = "FROM ContratoMunicipio c WHERE c.contratoProtolocoCef.protocoloCefPrestador.numeroProtocolo = :numeroProtocolo", nativeQuery = false)
	List<ContratoMunicipio> pesquisarPorNumeroProtocoloCefPrestador(String numeroProtocolo);
	
}

// Fim do arquivo: ContratoMunicipioPrestadorRepository.java

// Arquivo: ContratoPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.ContratoProtolocoCef;

@Repository
public interface ContratoPrestadorRepository extends JpaRepository<ContratoProtolocoCef, Long> {
	
	@Query(value = "FROM ContratoProtolocoCef c WHERE c.protocoloCefPrestador.id = :id", nativeQuery = false)
	List<ContratoProtolocoCef> pesquisarPorIdProtocoloPrestador(Long id);
	
}

// Fim do arquivo: ContratoPrestadorRepository.java

// Arquivo: ContratoRespository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoRespository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.Contrato;
import br.gov.ana.sarsb.model.entity.ContratoMatrizRisco;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ContratoRespository extends JpaRepository<Contrato, Long> {

    List<Contrato> findAllByAgenciaReguladoraIdAndStatusAtivo(Long agenciaReguladoraId, Boolean status);

    List<Contrato> findAllByCodigoInterno(String codigoInterno);


    @Query(value = "SELECT DISTINCT c FROM Contrato c "
            + "LEFT JOIN MunicipioContrato m ON c.id  = m.contrato.id  "
            + "LEFT JOIN MunicipioIBGE mu ON m.municipio.codigoIbge = mu.codigoIbge "  // Ajustando a junção com a entidade Municipio
            + "WHERE c.statusAtivo = true AND c.contratoExcuido = false AND "
            + "(:identificacao IS NULL OR c.identificacao LIKE :identificacao) AND "
            + "(:tipoPrestacao IS NULL OR c.tipoPrestacao = :tipoPrestacao) AND "
            + "(:idMunicipio IS NULL OR mu.codigoIbge = :idMunicipio) AND "
            + "(:ufSigla IS NULL OR m.uf = :ufSigla) AND "
            + "(:isAbastecimento IS NULL OR c.isAbastecimento = :isAbastecimento) AND "
            + "(:isAEsgotamento IS NULL OR c.isAEsgotamento = :isAEsgotamento) AND "
            + "(:isLimpezaUrbana IS NULL OR c.isLimpezaUrbana = :isLimpezaUrbana) AND "
            + "(:isManejoResiduos IS NULL OR c.isManejoResiduos = :isManejoResiduos) AND "
            + "(:isDrenagem IS NULL OR c.isDrenagemEManejoAguasPluviais = :isDrenagem) AND "
            + "c.agenciaReguladora.id = :idAgencia" )
    List<Contrato> pesquisar(
            @Param("identificacao") String identificacao,
            @Param("tipoPrestacao") Long tipoPrestacao,
            @Param("idAgencia") Long idAgencia,
            @Param("idMunicipio") Long idMunicipio,
            @Param("ufSigla") String ufSigla,
            @Param("isAbastecimento") Boolean isAbastecimento,
            @Param("isAEsgotamento") Boolean isAEsgotamento,
            @Param("isLimpezaUrbana") Boolean isLimpezaUrbana,
            @Param("isManejoResiduos") Boolean isManejoResiduos,
            @Param("isDrenagem") Boolean isDrenagem
    );

    Long countByAgenciaReguladoraId(Long agenciaReguladoraId);

    @Query(value = "SELECT c.con_cod_interno AS codigo_interno,\n" +
            "       c.con_iden_contrato,\n" +
            "\n" +
            "  (SELECT STRING_AGG(mu.mun_uf, ', ')\n" +
            "   FROM sabtb_municipiocontrato m\n" +
            "   INNER JOIN sabtb_municipio mu ON mu.mun_cd = m.muni_cod_ibge\n" +
            "   WHERE m.muni_con_cd = c.con_cd) AS uf,\n" +
            "\n" +
            "  (SELECT STRING_AGG(mu.mun_nm, ', ')\n" +
            "   FROM sabtb_municipiocontrato m\n" +
            "   INNER JOIN sabtb_municipio mu ON mu.mun_cd = m.muni_cod_ibge\n" +
            "   WHERE m.muni_con_cd = c.con_cd) AS municipios,\n" +
            "\n" +
            "  (SELECT STRING_AGG(CAST(mu.mun_cd AS TEXT), ', ')\n" +
            "   FROM sabtb_municipiocontrato m\n" +
            "   INNER JOIN sabtb_municipio mu ON mu.mun_cd = m.muni_cod_ibge\n" +
            "   WHERE m.muni_con_cd = c.con_cd) AS ibge,\n" +
            "       CASE\n" +
            "           WHEN c.con_tp_prestacao = 1 THEN 'Concessão'\n" +
            "           WHEN c.con_tp_prestacao = 2 THEN 'Prestação Regionalizada'\n" +
            "           WHEN c.con_tp_prestacao = 3 THEN 'Programa'\n" +
            "           WHEN c.con_tp_prestacao = 4 THEN 'Prestação Direta'\n" +
            "           ELSE 'Desconhecido' -- Caso queira tratar valores não mapeados\n" +
            "\n" +
            "       END AS descricao_prestacao,\n" +
            "\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 1\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS abastecimento_atividades,\n" +
            "\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 2\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS esgotamento_atividades,\n" +
            "\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 3\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS limpeza_urbana_atividades,\n" +
            "\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 4\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS manejo_residuos_atividades,\n" +
            "\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 5\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS drenagem_atividades,\n" +
            "       TO_CHAR(c.con_dt_assinatura, 'DD/MM/YYYY HH24:MI:SS') AS data_assinatura,\n" +
            "       sp.prt_nm_razaosocial,\n" +
            "       c.con_prazo_vigencia AS prazo_vigencia,\n" +
            "       c.con_link_internet AS link_contrato,\n" +
            "\n" +
            "  (SELECT COUNT(*)\n" +
            "   FROM sabtb_contratoaditivovinculado co\n" +
            "   WHERE co.adi_con_cd = c.con_cd) AS quantidade_aditivos_vinculados,\n" +
            "       TO_CHAR(\n" +
            "                 (SELECT max(co.adi_dt_assinatura)\n" +
            "                  FROM sabtb_contratoaditivovinculado co\n" +
            "                  WHERE co.adi_con_cd = c.con_cd), 'DD/MM/YYYY HH24:MI:SS') AS data_ultimo_aditivo,\n" +
            "       TO_CHAR(c.con_dt_atualizacao, 'DD/MM/YYYY HH24:MI:SS') AS data_atualizacao\n" +
            "FROM sabtb_contrato c\n" +
            "INNER JOIN sabtb_prestador sp ON sp.prt_cd = c.con_prt_cd\n" +
            "WHERE c.con_agr_cd = :idAgenciaReguladora \n" +
            "  AND c.con_status = TRUE\n" +
            "ORDER BY c.con_cd" , nativeQuery = true)
    List<Object[]> findDadosRelatorioByAgencia(Long idAgenciaReguladora);



    @Query(value = "\n" +
            "   SELECT  rt.reg_ano_coleta, \n" +
            "    (SELECT STRING_AGG(mu.mun_uf, ', ')   \n" +
            "                FROM sabtb_municipiocontrato m   \n" +
            "                INNER JOIN sabtb_municipio mu ON mu.mun_cd = m.muni_cod_ibge   \n" +
            "                WHERE m.muni_con_cd = c.con_cd) AS uf,\n" +
            "                (SELECT STRING_AGG(mu.mun_nm, ', ')   \n" +
            "                FROM sabtb_municipiocontrato m   \n" +
            "                INNER JOIN sabtb_municipio mu ON mu.mun_cd = m.muni_cod_ibge   \n" +
            "                WHERE m.muni_con_cd = c.con_cd) AS municipios,\n" +
            "                  CONCAT(c.con_cod_interno , '-', c.con_iden_contrato) AS con_iden_contrato, \n" +
            "                    CASE   \n" +
            "                        WHEN c.con_tp_prestacao = 1 THEN 'Concessão'   \n" +
            "                        WHEN c.con_tp_prestacao = 2 THEN 'Concessão - Prestação Regionalizada'   \n" +
            "                        WHEN c.con_tp_prestacao = 3 THEN 'Programa'   \n" +
            "                        WHEN c.con_tp_prestacao = 4 THEN 'Prestação Direta'   \n" +
            "                        ELSE 'Desconhecido'\n" +
            "                    END AS descricao_prestacao, \n" +
            "         sp.prt_nm_razaosocial, \n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 1\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS abastecimento_atividades,\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 2\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS esgotamento_atividades,\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 3\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS limpeza_urbana_atividades,\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 4\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS manejo_residuos_atividades,\n" +
            "  (SELECT STRING_AGG(act.servreg_ds_atividade, ', ')\n" +
            "   FROM sabtb_contrato_servicos_atividades_selecionadas sel\n" +
            "   INNER JOIN public.sabtb_servicosregulados act ON act.servreg_cd = sel.selecao_servreg_cd\n" +
            "   WHERE act.servreg_servr_cd = 5\n" +
            "     AND sel.selecao_con_cd = c.con_cd) AS drenagem_atividades,\n" +
            "                    TO_CHAR(c.con_dt_assinatura, 'DD/MM/YYYY HH24:MI:SS') AS data_assinatura,   \n" +
            "                    c.con_link_internet AS link_contrato ,\n" +
            "                    CASE\n" +
            "               \t\t WHEN rt.reg_per1 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per1 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per1 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per1,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per2 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per2 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per2 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per2,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per2_1 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per2_1 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per2_1 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per2_1,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per3 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per3 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per3 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per3,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per4 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per4 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per4 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per4,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per4_1 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per4_1 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per4_1 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per4_1,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per5 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per5 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per5 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per5,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per6 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per6 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per6 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per6,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per7 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per7= 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per7 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per7,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per8 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per8 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per8 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_per8,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_pe9 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_pe9 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_pe9 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "               \t\t\tEND AS reg_pe9,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per10 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per10 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per10 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "                \tEND AS reg_per10,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per11 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per11 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per11 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "                \tEND AS reg_per11,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per12 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per12 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per12 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "                \tEND AS reg_per12,\n" +
            "               \t\t\tCASE\n" +
            "               \t\t WHEN rt.reg_per13 = 'true' THEN 'Sim'\n" +
            "             \t\t\tWHEN rt.reg_per13 = 'false' THEN 'Não'\n" +
            "                \t\tWHEN rt.reg_per13 IS NULL THEN 'Não respondido'\n" +
            "                \t\tELSE 'Não'\n" +
            "                \tEND AS reg_per13\n" +
            "             FROM sabtb_contrato c  \n" +
            "             inner join sabtb_regulacaotarifaria rt on rt.reg_con_cd  = c.con_cd \n" +
            "             INNER JOIN sabtb_prestador sp ON sp.prt_cd = c.con_prt_cd   " +
            "             WHERE c.con_agr_cd = :idAgenciaReguladora and rt.reg_ano_coleta = :anoColeta " , nativeQuery = true)
    List<Object[]> findDadosRelatorioComRegulacaoByAgencia(Long idAgenciaReguladora, Long anoColeta);

    Contrato findByCodigoInternoAndStatusAtivo(String codigoInterno, Boolean statusAtivo);

    @Query(value = "SELECT MAX(CAST(SUBSTRING(con_cod_interno FROM 1 FOR POSITION('/' IN con_cod_interno) - 1) AS INTEGER)) " +
            "FROM sabtb_contrato " +
            "WHERE con_agr_cd = :agenciaReguladoraId",
            nativeQuery = true)
    Long findMaxCodInternoByAgenciaReguladora(@Param("agenciaReguladoraId") Long agenciaReguladoraId);


}


// Fim do arquivo: ContratoRespository.java

// Arquivo: ContratoServicoAtividadeRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoServicoAtividadeRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ContratoServicoAtividade;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ContratoServicoAtividadeRepository extends JpaRepository<ContratoServicoAtividade, Long> {

    @Modifying
    @Query("DELETE FROM ContratoServicoAtividade cs WHERE cs.contratoServico.id = :contratoId")
    void deleteByContratoId(@Param("contratoId") Long contratoId);

    List<ContratoServicoAtividade> findAllByContratoServicoId(Long contratoId);

    List<ContratoServicoAtividade> findAllByContratoServicoIdIn(List<Long> contratoId);


}


// Fim do arquivo: ContratoServicoAtividadeRepository.java

// Arquivo: ContratoServicoAtividadeSelecionadaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoServicoAtividadeSelecionadaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ContratoServicoAtividadeSelecionada;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import javax.transaction.Transactional;
import java.util.List;

@Repository
public interface ContratoServicoAtividadeSelecionadaRepository extends JpaRepository<ContratoServicoAtividadeSelecionada, Long> {

    @Modifying
    @Transactional
    @Query("DELETE FROM ContratoServicoAtividadeSelecionada cs WHERE cs.contrato.id = :contratoId")
    void deleteByContratoId(@Param("contratoId") Long contratoId);

    List<ContratoServicoAtividadeSelecionada> findAllByContratoId(Long contratoId);

    List<ContratoServicoAtividadeSelecionada> findAllByContratoIdIn(List<Long> contratoId);


}


// Fim do arquivo: ContratoServicoAtividadeSelecionadaRepository.java

// Arquivo: ContratoServicoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ContratoServicoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ContratoServico;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ContratoServicoRepository extends JpaRepository<ContratoServico, Long> {
}


// Fim do arquivo: ContratoServicoRepository.java

// Arquivo: DocumentoCondicoesGeraisRepository.java
// Caminho: \br\gov\ana\sarsb\repository\DocumentoCondicoesGeraisRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.DocumentoCondicoesGerais;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface DocumentoCondicoesGeraisRepository extends JpaRepository<DocumentoCondicoesGerais, Long> {

    @Query(value = "SELECT d.* FROM public.sabtb_documentocondicoes d "
            + "WHERE d.doc_con_cd = :id ", nativeQuery = true)
    List<DocumentoCondicoesGerais> consultarDocumentosPorId(Long id);
}


// Fim do arquivo: DocumentoCondicoesGeraisRepository.java

// Arquivo: DocumentoIndicadorMetaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\DocumentoIndicadorMetaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.DocumentoIndicadorMeta;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface DocumentoIndicadorMetaRepository extends JpaRepository<DocumentoIndicadorMeta, Long> {

    List<DocumentoIndicadorMeta> findAllByIdIn(List<Long> ids);
}

// Fim do arquivo: DocumentoIndicadorMetaRepository.java

// Arquivo: DocumentoMatrizRiscoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\DocumentoMatrizRiscoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.DocumentoMatrizRisco;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface DocumentoMatrizRiscoRepository extends JpaRepository<DocumentoMatrizRisco, Long> {

    List<DocumentoMatrizRisco> findAllByContratoMatrizRiscoId(Long contratoMatrizRiscoId);

    void deleteAllByContratoMatrizRiscoId(Long contratoMatrizRiscoId);
}

// Fim do arquivo: DocumentoMatrizRiscoRepository.java

// Arquivo: DocumentoNormativoEriRepository.java
// Caminho: \br\gov\ana\sarsb\repository\DocumentoNormativoEriRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.DocumentoNormativoEri;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface DocumentoNormativoEriRepository extends JpaRepository<DocumentoNormativoEri, Long> {


    @Query(value = "SELECT d.* FROM public.sabtb_documentoatonormativoeri d "
            + " inner join sabtb_atonormativoeri a on a.ato_cd = d.docato_ato_cd "
            + " where a.ato_ano_referencia  = :ano ", nativeQuery = true)
    List<DocumentoNormativoEri> findByAno(Long ano);

    @Query(value = "SELECT d.* FROM public.sabtb_documentoatonormativoeri d "
            + "where d.docato_ato_cd = :id ", nativeQuery = true)
    DocumentoNormativoEri findByAtoNormativo(Long id);


    @Query(value = "SELECT d.* FROM public.sabtb_documentoatonormativoeri d "
            + "where d.docato_ato_cd = :id ", nativeQuery = true)
    List<DocumentoNormativoEri> findDocumentosByAtoNormativo(Long id);
}


// Fim do arquivo: DocumentoNormativoEriRepository.java

// Arquivo: DocumentoPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\DocumentoPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.DocumentoPrestador;

@Repository
public interface DocumentoPrestadorRepository extends JpaRepository<DocumentoPrestador, Long> {
	
	@Query(value = "FROM DocumentoPrestador d WHERE d.formularioCefPrestador.id = :id", nativeQuery = false)
	List<DocumentoPrestador> pesquisarPorIdFormularioPrestador(Long id);
	
}

// Fim do arquivo: DocumentoPrestadorRepository.java

// Arquivo: FinalizacaoPreenchimentoContratoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\FinalizacaoPreenchimentoContratoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.FinalizacaoPreenchimentoContrato;
import br.gov.ana.sarsb.model.entity.FinalizacaoPreenchimentoContratoId;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface FinalizacaoPreenchimentoContratoRepository extends JpaRepository<FinalizacaoPreenchimentoContrato, FinalizacaoPreenchimentoContratoId> {
    List<FinalizacaoPreenchimentoContrato> findByIdFinalizacaoPreenchimento(Long idFinalizacaoPreenchimento);

    void deleteAllByIdFinalizacaoPreenchimento(Long id);

}

// Fim do arquivo: FinalizacaoPreenchimentoContratoRepository.java

// Arquivo: FinalizacaoPreenchimentoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\FinalizacaoPreenchimentoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.FinalizacaoPreenchimento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface FinalizacaoPreenchimentoRepository extends JpaRepository<FinalizacaoPreenchimento, Long> {
    List<FinalizacaoPreenchimento> findAllByAgenciaReguladoraId(Long agenciaReguladoraId);

    @Query(value = "SELECT sfp.* FROM public.sabtb_finalizacao_preenchimento sfp "
            + "WHERE sfp.ano_referencia = :ano and sfp.identificador_eri = :idEri  ", nativeQuery = true)
    List<FinalizacaoPreenchimento> existsByAgenciaReguladoraAndAnoReferencia(Long ano, Long idEri);

    @Query(value = "SELECT sfp.* FROM public.sabtb_finalizacao_preenchimento sfp "
            + "WHERE sfp.ano_referencia = :ano and sfp.identificador_eri = :idEri  ", nativeQuery = true)
    FinalizacaoPreenchimento buscarFinalizacaoPorAgenciaReguladoraEAnoReferencia(Long ano, Long idEri);

}



// Fim do arquivo: FinalizacaoPreenchimentoRepository.java

// Arquivo: FinalizacaoRegulacaoTarifariaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\FinalizacaoRegulacaoTarifariaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.FinalizacaoRegulacaoTarifaria;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface FinalizacaoRegulacaoTarifariaRepository extends JpaRepository<FinalizacaoRegulacaoTarifaria, Long> {
    boolean existsByAnoColetaAndAgenciaReguladora(Long ano, AgenciaReguladora agenciaReguladora);
    Optional<FinalizacaoRegulacaoTarifaria> findByAnoColetaAndAgenciaReguladora(Long ano, AgenciaReguladora agenciaReguladora);

}

// Fim do arquivo: FinalizacaoRegulacaoTarifariaRepository.java

// Arquivo: FinalizacaoRequisitoComplementarRepository.java
// Caminho: \br\gov\ana\sarsb\repository\FinalizacaoRequisitoComplementarRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.FinalizacaoRequisitoComplementar;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface FinalizacaoRequisitoComplementarRepository
        extends JpaRepository<FinalizacaoRequisitoComplementar, Long> {
    boolean existsByAnoColetaAndAgenciaReguladora(Long ano, AgenciaReguladora agenciaReguladora);

    Optional<FinalizacaoRequisitoComplementar> findByAnoColetaAndAgenciaReguladora(Long ano,
                                                                                   AgenciaReguladora agenciaReguladora);

}

// Fim do arquivo: FinalizacaoRequisitoComplementarRepository.java

// Arquivo: FormularioAditivoAgenciaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\FormularioAditivoAgenciaRepository.java

package br.gov.ana.sarsb.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.FormularioAditivoAgencia;

@Repository
public interface FormularioAditivoAgenciaRepository extends JpaRepository<FormularioAditivoAgencia, Long> {
	
	@Query(value = "SELECT f FROM FormularioAditivoAgencia f WHERE f.agenciaReguladora.cnpj = :cnpj", nativeQuery = false)
	Optional<FormularioAditivoAgencia> findByAgenciaReguladora(String cnpj);

	@Query(value = "SELECT MAX(f.fao_nu_recibo) FROM public.sabtb_formularioaditivo f "
			+ "WHERE substring(cast(f.fao_nu_recibo as varchar) from '[0-9]{4}$') = :ano", nativeQuery = true)
	Long pesquisarUltimoNumeroReciboPorAno(String ano);


	@Query(value = "SELECT MAX(f.fcs_nu_recibo) FROM public.sabtb_formulariocefsasb f "
			+ "WHERE substring(cast(f.fcs_nu_recibo as varchar) from '[0-9]{4}$') = :ano", nativeQuery = true)
	Long pesquisarUltimoNumeroReciboPorAnomunicipio(String ano);



	Optional<FormularioAditivoAgencia> findByNumeroRecibo(Long numeroRecibo);
		
}

// Fim do arquivo: FormularioAditivoAgenciaRepository.java

// Arquivo: FormularioAditivoSmsruRepository.java
// Caminho: \br\gov\ana\sarsb\repository\FormularioAditivoSmsruRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.FormularioAditivoAgencia;
import br.gov.ana.sarsb.model.entity.FormularioAditivoSmsru;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;
import java.util.Optional;

@Repository
public interface FormularioAditivoSmsruRepository extends JpaRepository<FormularioAditivoSmsru, Long> {

	@Query(value = " select * from public.sabtb_formulariocefsasb sf where sf.fcs_prf_cd = :id order by  fcs_cd DESC limit 1", nativeQuery = true)
	Optional<FormularioAditivoSmsru> findByMunicipio(Long id);




	@Query(value = "SELECT MAX(f.fcs_nu_recibo) FROM public.sabtb_formulariocefsasb f "
			+ "WHERE substring(cast(f.fcs_nu_recibo as varchar) from '[0-9]{4}$') = :ano", nativeQuery = true)
	Long pesquisarUltimoNumeroReciboPorAno(String ano); 
	
	Optional<FormularioAditivoSmsru> findByNumeroRecibo(Long numeroRecibo);


	@Query(value = "SELECT f FROM FormularioAditivoSmsru f WHERE f.id = :id", nativeQuery = false)
	Optional<FormularioAditivoSmsru> findByids(Long id);


    @Query(value = "SELECT MAX(f.fcs_nu_recibo) FROM public.sabtb_formulariocefsasb f "
            + "WHERE substring(cast(f.fcs_nu_recibo as varchar) from '[0-9]{4}$') = :ano", nativeQuery = true)
    Long pesquisarUltimoNumeroReciboPorAnomunicipio(String ano);
}

// Fim do arquivo: FormularioAditivoSmsruRepository.java

// Arquivo: FormularioCefAgenciaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\FormularioCefAgenciaRepository.java

package br.gov.ana.sarsb.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.FormularioCefAgencia;

@Repository
public interface FormularioCefAgenciaRepository extends JpaRepository<FormularioCefAgencia, Long> {
	
	@Query(value = "SELECT f FROM FormularioCefAgencia f WHERE f.agenciaReguladora.cnpj = :cnpj and to_char(f.dataEnvio, 'YYYY') > '2023'", nativeQuery = false)
	Optional<FormularioCefAgencia> findByAgenciaReguladora(String cnpj);
	
	@Query(value = "SELECT MAX(f.fca_nu_recibo) FROM public.sabtb_formulariocefagencia f "
			+ "WHERE substring(cast(f.fca_nu_recibo as varchar) from '[0-9]{4}$') = :ano", nativeQuery = true)
	Long pesquisarUltimoNumeroReciboPorAno(String ano); 
	
	Optional<FormularioCefAgencia> findByNumeroRecibo(Long numeroRecibo);
		
}

// Fim do arquivo: FormularioCefAgenciaRepository.java

// Arquivo: InstrumentoCobrancaMunicipioRepository.java
// Caminho: \br\gov\ana\sarsb\repository\InstrumentoCobrancaMunicipioRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.model.entity.InstrumentoCobranca;
import br.gov.ana.sarsb.model.entity.InstrumentoCobrancaMunicipio;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface InstrumentoCobrancaMunicipioRepository extends JpaRepository<InstrumentoCobrancaMunicipio, Long> {

	@Query(value = "SELECT MAX(i.isc_nu_recibo) FROM public.sabtb_instrumentocobranca i "
			+ "WHERE substring(cast(i.isc_nu_recibo as varchar) from '[0-9]{4}$') = :ano", nativeQuery = true)
	Long pesquisarUltimoNumeroReciboPorAno(String ano);

	@Query(value = "select sp.pft_nu_cnpj  from public.sabtb_instrumentocobranca si "
			+ "inner join public.sabtb_prefeitura sp on sp.pft_cd = si.isc_pft_cd "
			+ "where si.isc_nu_recibo = :numeroRecibo limit 1", nativeQuery = true)
	String recuperarCnpjPorNumeroRecibo(Long numeroRecibo);


	List<InstrumentoCobrancaMunicipio> findAll();


	List<InstrumentoCobrancaMunicipio> findByCodigoPrefeitura(Long codigoPrefeitura);

	InstrumentoCobrancaMunicipio findByIdAndCodigoPrefeitura(Long id, Long codigoPrefeitura);

	InstrumentoCobrancaMunicipio codigoPrefeitura( Long codigoPrefeitura);



	@Query(value =
			"SELECT " +
					"    iscm_ic_unicoetapassmrsu unico, " +
					"    iscm_til_cd tipo, " +
					"    iscm_parcob_cd cobranca, " +
					"    iscm_catg_cd categoria, " +
					"    STRING_AGG(DISTINCT iscm_tes_cd, ';' ORDER BY iscm_tes_cd) etapas " +
					"FROM " +
					"    public.sabtb_instrumentocobrancamunicipio " +
					"WHERE " +
					"    iscm_isc_pft_cd = :codigoPrefeitura " +
					"GROUP BY " +
					"    iscm_ic_unicoetapassmrsu, " +
					"    iscm_til_cd, " +
					"    iscm_parcob_cd, " +
					"    iscm_catg_cd",
			nativeQuery = true)
	List<Object[]> findByCodigoPrefeituraquerie(Long codigoPrefeitura);



}

// Fim do arquivo: InstrumentoCobrancaMunicipioRepository.java

// Arquivo: InstrumentoCobrancaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\InstrumentoCobrancaRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.InstrumentoCobranca;
import br.gov.ana.sarsb.model.entity.Prefeitura;

@Repository
public interface InstrumentoCobrancaRepository extends JpaRepository<InstrumentoCobranca, Long> {
	
	List<InstrumentoCobranca> findByPrefeitura(Prefeitura prefeitura);
	
	List<InstrumentoCobranca> findByNumeroRecibo(Long numeroRecibo);
	
	@Query(value = "SELECT MAX(i.fcs_nu_recibo) FROM public.sabtb_formulariocefsasb i "
			+ "WHERE substring(cast(i.fcs_nu_recibo as varchar) from '[0-9]{4}$') = :ano", nativeQuery = true)
	Long pesquisarUltimoNumeroReciboPorAno(String ano); 
	
	@Query(value = "select sp.pft_nu_cnpj  from public.sabtb_instrumentocobranca si "
			+ "inner join public.sabtb_prefeitura sp on sp.pft_cd = si.isc_pft_cd "
			+ "where si.isc_nu_recibo = :numeroRecibo limit 1", nativeQuery = true)
	String recuperarCnpjPorNumeroRecibo(Long numeroRecibo);
		
}

// Fim do arquivo: InstrumentoCobrancaRepository.java

// Arquivo: InstrumentoCobrancaTemEtapasRepository.java
// Caminho: \br\gov\ana\sarsb\repository\InstrumentoCobrancaTemEtapasRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.InstrumentoCobrancaTemEtapas;

@Repository
public interface InstrumentoCobrancaTemEtapasRepository extends JpaRepository<InstrumentoCobrancaTemEtapas, Long> {
	
	@Query(value = "SELECT t FROM InstrumentoCobrancaTemEtapas t WHERE t.instrumentoCobranca.id = :id", nativeQuery = false)
	List<InstrumentoCobrancaTemEtapas> recuperarInstrumentoCobrancaTemEtapas(Long id);	
		
}

// Fim do arquivo: InstrumentoCobrancaTemEtapasRepository.java

// Arquivo: ManifestacaoTecnicaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ManifestacaoTecnicaRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.ManifestacaoTecnica;
import br.gov.ana.sarsb.model.entity.ProcessoCefAgencia;

@Repository
public interface ManifestacaoTecnicaRepository extends JpaRepository<ManifestacaoTecnica, Long> {
	
	List<ManifestacaoTecnica> findByProcessoCefAgencia(ProcessoCefAgencia processoCefAgencia);
		
}

// Fim do arquivo: ManifestacaoTecnicaRepository.java

// Arquivo: MonitoramentoUniversalizacaoMunAguaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\MonitoramentoUniversalizacaoMunAguaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunAgua;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface MonitoramentoUniversalizacaoMunAguaRepository extends JpaRepository<MonitoramentoUniversalizacaoMunAgua, Integer> {
    Optional<MonitoramentoUniversalizacaoMunAgua> findByMunIbgeCd(Integer munIbgeCd);
}


// Fim do arquivo: MonitoramentoUniversalizacaoMunAguaRepository.java

// Arquivo: MonitoramentoUniversalizacaoMunEsgotoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\MonitoramentoUniversalizacaoMunEsgotoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunEsgoto;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface MonitoramentoUniversalizacaoMunEsgotoRepository extends JpaRepository<MonitoramentoUniversalizacaoMunEsgoto, Integer> {
    Optional<MonitoramentoUniversalizacaoMunEsgoto> findByMunIbgeCd(Integer munIbgeCd);
}


// Fim do arquivo: MonitoramentoUniversalizacaoMunEsgotoRepository.java

// Arquivo: MonitoramentoUniversalizacaoMunicipioRepository.java
// Caminho: \br\gov\ana\sarsb\repository\MonitoramentoUniversalizacaoMunicipioRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoBlocoEstrutura;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoErros;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoFiltrosIndicadores;
import br.gov.ana.sarsb.model.entity.MunicipiosUniversalizacao;
import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

@Repository
public interface MonitoramentoUniversalizacaoMunicipioRepository extends JpaRepository<MunicipiosUniversalizacao, Long> {

    @Query(value = "SELECT m.* FROM public.sabtb_municipiosuniversializacao m WHERE m.aa_ref = :aaRef AND m.mun_ibge_cd = :munIbgeCd", nativeQuery = true)
    Optional<MunicipiosUniversalizacao> findByIdNative(Integer aaRef, Integer munIbgeCd);

    @Query(value = "SELECT m.*, sm.* FROM public.sabtb_municipiosuniversializacao m LEFT JOIN sabtb_municipio sm ON m.mun_ibge_cd = sm.mun_cd WHERE m.mun_agr_cd = :agrCd", nativeQuery = true)
    List<MunicipiosUniversalizacao> findByAgenciaReguladora(Long agrCd);

    @Query(value = "SELECT m.*, sm.* FROM public.sabtb_municipiosuniversializacao m LEFT JOIN sabtb_municipio sm ON m.mun_ibge_cd = sm.mun_cd WHERE m.mun_agr_cd = :agrCd LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MunicipiosUniversalizacao> findMunicipioByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset);

    @Query(value = "SELECT m.*, sm.* FROM public.sabtb_municipiosuniversializacao m LEFT JOIN sabtb_municipio sm ON m.mun_ibge_cd = sm.mun_cd WHERE m.mun_agr_cd = :agrCd and m.mun_ibge_cd = :ibgeCd LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MunicipiosUniversalizacao> findMunicipioByAgenciaReguladoraAndCodIbgePageable(Long agrCd, Integer limit, Integer offset, Long ibgeCd);

    @Query(value = "SELECT m.*, sm.* FROM public.sabtb_municipiosuniversializacao m LEFT JOIN sabtb_municipio sm ON m.mun_ibge_cd = sm.mun_cd WHERE m.mun_agr_cd = :agrCd and m.estrut_reg_agua_esg = :bloco", nativeQuery = true)
    List<MunicipiosUniversalizacao> findByAgenciaReguladoraAndEstruturaRegionalizacaoAguaEsg(Long agrCd, String bloco);

    @Query(value = "SELECT distinct m.estrut_reg_agua_esg as nome FROM public.sabtb_municipiosuniversializacao m LEFT JOIN sabtb_municipio sm ON m.mun_ibge_cd = sm.mun_cd WHERE m.mun_agr_cd = :agrCd LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MonitoramentoUniversalizacaoBlocoEstrutura> findBlocoEstruturaByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset);

    @Query(value = "SELECT distinct m.estrut_reg_agua_esg as nome FROM public.sabtb_municipiosuniversializacao m LEFT JOIN sabtb_municipio sm ON m.mun_ibge_cd = sm.mun_cd WHERE m.mun_agr_cd = :agrCd", nativeQuery = true)
    List<MonitoramentoUniversalizacaoBlocoEstrutura> findBlocoEstruturaByAgenciaReguladora(Long agrCd);

    @Query(value = "SELECT distinct (m.aaRef as anoRef, m.munNm as nome, m.munUf as uf) FROM public.sabtb_municipiosuniversializacao m  WHERE m.mun_agr_cd = :agrCd", nativeQuery = true)
    MonitoramentoUniversalizacaoFiltrosIndicadores findFiltrosIndicadores(Long agrCd);

    @Query(value = "SELECT m.* FROM public.sabtb_municipiosuniversializacao m WHERE  m.mun_ibge_cd = :munIbgeCd", nativeQuery = true)
    Optional<MunicipiosUniversalizacao> findByMunIbgeCd(Integer munIbgeCd);

    @Query(value = "SELECT m.mun_nm as nome, m.mun_erros as erros, m.mun_uf as uf FROM public.sabtb_municipiosuniversializacao m WHERE m.mun_agr_cd = :agrCd and m.mun_erros > 0", nativeQuery = true)
    List<MonitoramentoUniversalizacaoErros> findDadosByAgrCd(Long agrCd);
}


// Fim do arquivo: MonitoramentoUniversalizacaoMunicipioRepository.java

// Arquivo: MonitoramentoUniversalizacaoPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\MonitoramentoUniversalizacaoPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoErros;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoArs;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoErs;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoTotalEco;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PrestadorUniversalizacaoGE02GE03;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrestador;
import br.gov.ana.sarsb.model.entity.MunicipiosUniversalizacao;
import java.sql.ResultSet;
import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

@Repository
public interface MonitoramentoUniversalizacaoPrestadorRepository extends JpaRepository<MonitoramentoUniversalizacaoPrestador, Long> {


    @Query(value = "SELECT * FROM public.sabtb_monitoramentouniversializacao_prt m left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd WHERE m.prt_agr_cd = :agrCd", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findByAgenciaReguladora(Long agrCd);

    @Query(value = "SELECT * FROM public.sabtb_monitoramentouniversializacao_prt m left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd WHERE m.prt_agr_cd = :agrCd  and m.prt_abg = true", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findByAgenciaReguladoraRegional(Long agrCd);

    @Query(value = "SELECT * FROM public.sabtb_monitoramentouniversializacao_prt m left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd WHERE m.prt_agr_cd = :agrCd  and m.prt_ctr = true", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findByAgenciaReguladoraContratado(Long agrCd);

    @Query(value = "SELECT * FROM public.sabtb_monitoramentouniversializacao_prt m left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd WHERE m.prt_agr_cd = :agrCd LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset);

    @Query(value = "SELECT * FROM public.sabtb_monitoramentouniversializacao_prt m left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd WHERE m.prt_agr_cd = :agrCd and m.prt_mun_cd = :ibgeCd LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findByAgenciaReguladoraAndCodIbgePageable(Long agrCd, Integer limit, Integer offset, Long ibgeCd);

    @Query(value = "SELECT * FROM public.sabtb_monitoramentouniversializacao_prt m left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd WHERE m.prt_agr_cd = :agrCd and m.prt_abg = true LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findByAgenciaReguladoraPageableRegional(Long agrCd, Integer limit, Integer offset);

    @Query(value = "SELECT * FROM public.sabtb_monitoramentouniversializacao_prt m left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd WHERE m.prt_agr_cd = :agrCd and m.prt_ctr = true LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findByAgenciaReguladoraPageableContratado(Long agrCd, Integer limit, Integer offset);

    @Query(value = "SELECT * " +
               "FROM public.sabtb_monitoramentouniversializacao_prt m " +
               "left join sabtb_municipio sm on m.prt_mun_cd = sm.mun_cd " +
               "WHERE m.prt_cd IN (" +
               "    SELECT prt_cd " +
               "    FROM public.sabtb_monitoramentouniversializacao_prt " +
                "   WHERE prt_agr_cd = :agrCd " +
               "    GROUP BY prt_cd " +
               "    HAVING COUNT(DISTINCT prt_mun_cd) > 1" +
               ") " +
               "AND m.prt_agr_cd = :agrCd " +
               "LIMIT :limit OFFSET :offset", nativeQuery = true)
    List<MonitoramentoUniversalizacaoPrestador> findPrestadoresEmMaisDeUmMunicipioPageable(Long agrCd, Integer limit, Integer offset);

    Optional<MonitoramentoUniversalizacaoPrestador> findByMunicipioCodigoIbgeAndPrtAaRefAndPrtCd(Long prtMunIbgeCd, Integer prtAaRef, String prtCd);

    @Query(value = "SELECT " +
        "CASE WHEN COUNT(*) > 0 THEN SUM(COALESCE(prt_dom_abg,0)) ELSE 0 END as prtGE02, " +
        "CASE WHEN COUNT(*) > 0 THEN SUM(COALESCE(prt_pop_censo_abg,0)) ELSE 0 END as prtGE03 " +
        "FROM sabtb_monitoramentouniversializacao_prt " +
        "WHERE prt_mun_cd = :munIbgeCd " +
        "AND (prt_serv = :servico OR prt_serv = 'Água e Esgoto')" +
        "AND prt_aa_ref = :prtAaRef", nativeQuery = true)
    PrestadorUniversalizacaoGE02GE03 buscarPrtGE02GE03(Integer munIbgeCd, String servico, Integer prtAaRef);


    @Query(value = "select SUM(COALESCE(prt_ecored_urb,0) + COALESCE(prt_ecored_rur,0)) as munTotalEcored, SUM(COALESCE(prt_total_eco, 0)) as munTotalEco from sabtb_monitoramentouniversializacao_prt_agua where prt_mun_cd = :munIbgeCd group by prt_mun_cd", nativeQuery = true)
    MunicipiosUniversalizacaoTotalEco buscarTotalEcoAgua(Integer munIbgeCd);

    @Query(value = "select SUM(COALESCE(prt_ecored_urb, 0)) as munAr01, SUM(COALESCE(prt_ecored_rur, 0)) as munAr02 from sabtb_monitoramentouniversializacao_prt_agua where prt_mun_cd = :munIbgeCd group by prt_mun_cd", nativeQuery = true)
    MunicipiosUniversalizacaoArs buscarTotalAr(Integer munIbgeCd);

    @Query(value = "select SUM(COALESCE(prt_ecored_urb, 0)) as munEr01, SUM(COALESCE(prt_ecored_rur, 0)) as munEr02 from sabtb_monitoramentouniversializacao_prt_esgoto where prt_mun_cd = :munIbgeCd group by prt_mun_cd", nativeQuery = true)
    MunicipiosUniversalizacaoErs buscarTotalEr(Integer munIbgeCd);

    @Query(value = "SELECT m.prt_nm as nome, m.prt_erros as erros FROM public.sabtb_monitoramentouniversializacao_prt m WHERE m.prt_agr_cd = :agrCd and m.prt_erros > 0", nativeQuery = true)
    List<MonitoramentoUniversalizacaoErros> findDadosByAgrCd(Long agrCd);

    @Query(value = "select SUM(COALESCE(prt_ecored_urb,0) + COALESCE(prt_ecored_rur,0)) as munTotalEcored, SUM(COALESCE(prt_total_eco, 0)) as munTotalEco from sabtb_monitoramentouniversializacao_prt_esgoto where prt_mun_cd = :munIbgeCd group by prt_mun_cd", nativeQuery = true)
    MunicipiosUniversalizacaoTotalEco buscarTotalEcoEsg(Integer munIbgeCd);



}


// Fim do arquivo: MonitoramentoUniversalizacaoPrestadorRepository.java

// Arquivo: MonitoramentoUniversalizacaoPrtAguaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\MonitoramentoUniversalizacaoPrtAguaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtAgua;
import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MonitoramentoUniversalizacaoPrtAguaRepository extends JpaRepository<MonitoramentoUniversalizacaoPrtAgua, Integer> {
    Optional<MonitoramentoUniversalizacaoPrtAgua> findByPrtMunCdAndPrtAaRefAndPrtCd(Integer prtMunIbgeCd, Integer prtAaRef, String prtCd);
}


// Fim do arquivo: MonitoramentoUniversalizacaoPrtAguaRepository.java

// Arquivo: MonitoramentoUniversalizacaoPrtEsgRepository.java
// Caminho: \br\gov\ana\sarsb\repository\MonitoramentoUniversalizacaoPrtEsgRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtEsgoto;
import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MonitoramentoUniversalizacaoPrtEsgRepository extends JpaRepository<MonitoramentoUniversalizacaoPrtEsgoto, Integer> {
    Optional<MonitoramentoUniversalizacaoPrtEsgoto> findByPrtMunCdAndPrtAaRefAndPrtCd(Integer prtMunIbgeCd, Integer prtAaRef, String prtCd);
}


// Fim do arquivo: MonitoramentoUniversalizacaoPrtEsgRepository.java

// Arquivo: MunicipioContratoRespository.java
// Caminho: \br\gov\ana\sarsb\repository\MunicipioContratoRespository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.MunicipioContrato;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import javax.transaction.Transactional;
import java.util.List;

import java.util.List;
import java.util.Optional;

@Repository
public interface MunicipioContratoRespository extends JpaRepository<MunicipioContrato, Long> {
    List<MunicipioContrato> findAllByContratoId(Long contratoId);

    @Modifying
    @Transactional
    @Query("DELETE FROM MunicipioContrato mc WHERE mc.contrato.id = :contratoId")
    void deleteAllByContratoId(@Param("contratoId") Long contratoId);



    @Query(value = "select *from sabtb_municipiocontrato where  muni_con_cd = :id ", nativeQuery = true)
    List<MunicipioContrato> buscarMuniciporIdContrato(Long id);
    @Query(value = "delete from sabtb_municipiocontrato where muni_con_cd = :id", nativeQuery = true)
    void deletarMunicipioContratoId(Long id);

    @Override
    List<MunicipioContrato> findAll();
}


// Fim do arquivo: MunicipioContratoRespository.java

// Arquivo: MunicipioIbgeRepository.java
// Caminho: \br\gov\ana\sarsb\repository\MunicipioIbgeRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.MunicipioIBGE;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MunicipioIbgeRepository extends JpaRepository<MunicipioIBGE, Long> {
}

// Fim do arquivo: MunicipioIbgeRepository.java

// Arquivo: NormasDeReferenciaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\NormasDeReferenciaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.NormasDeReferencia;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface NormasDeReferenciaRepository extends JpaRepository<NormasDeReferencia, Long> {
}


// Fim do arquivo: NormasDeReferenciaRepository.java

// Arquivo: ParametroConfiguracaoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ParametroConfiguracaoRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.config.cache.ConfigSource;
import br.gov.ana.sarsb.model.entity.ParametroConfiguracao;

@Repository
public interface ParametroConfiguracaoRepository extends JpaRepository<ParametroConfiguracao, Long>, ConfigSource {
	
	ParametroConfiguracao recuperaParametroPorChave(@Param("chave") String chave);
	
	String pesquisar(@Param("chave") String chave);
	
}

// Fim do arquivo: ParametroConfiguracaoRepository.java

// Arquivo: ParametrosNRSRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ParametrosNRSRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.AditivoAgencia;
import br.gov.ana.sarsb.model.entity.ParametrosNRS;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ParametrosNRSRepository extends JpaRepository<ParametrosNRS, Long> {

	
}


// Fim do arquivo: ParametrosNRSRepository.java

// Arquivo: PerguntaDecretoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\PerguntaDecretoRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.PerguntaDecreto;

@Repository
public interface PerguntaDecretoRepository extends JpaRepository<PerguntaDecreto, Long> {
	
	@Query(value = "SELECT p FROM PerguntaDecreto p WHERE p.tipoQuestionario.id = :idQuestionario", nativeQuery = false)
	List<PerguntaDecreto> findByTipoQuestionario(Long idQuestionario);
		
}

// Fim do arquivo: PerguntaDecretoRepository.java

// Arquivo: PlanilhaUniversalizacaoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\PlanilhaUniversalizacaoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.PlanilhaUniversalizacao;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface PlanilhaUniversalizacaoRepository extends JpaRepository<PlanilhaUniversalizacao, Long> {

    Optional<PlanilhaUniversalizacao> findFirstByCodAgrCdOrderByDataImportacaoDesc(Long codAgrCd);
}


// Fim do arquivo: PlanilhaUniversalizacaoRepository.java

// Arquivo: PrefeituraRepository.java
// Caminho: \br\gov\ana\sarsb\repository\PrefeituraRepository.java

package br.gov.ana.sarsb.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.Prefeitura;

@Repository
public interface PrefeituraRepository extends JpaRepository<Prefeitura, Long> {
	
	@Query(value = "SELECT p.* FROM public.sabtb_prefeitura p WHERE p.pft_nu_cnpj = :cnpj LIMIT 1", nativeQuery = true)
	Optional<Prefeitura> findByCnpj(String cnpj);

	Optional<Prefeitura> findById(Long id);
	
}

// Fim do arquivo: PrefeituraRepository.java

// Arquivo: PrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\PrestadorRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;
import java.util.Optional;

import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDocumento;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.Prestador;

@Repository
public interface PrestadorRepository extends JpaRepository<Prestador, Long> {
	
	Optional<Prestador> findByCnpj(String cnpj);

	Optional<Prestador> findById(Long id);

	List<Prestador> findByPrestadorativoTrue();



}

// Fim do arquivo: PrestadorRepository.java

// Arquivo: ProcessoCefAgenciaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProcessoCefAgenciaRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.FormularioCefAgencia;
import br.gov.ana.sarsb.model.entity.ProcessoCefAgencia;

@Repository
public interface ProcessoCefAgenciaRepository extends JpaRepository<ProcessoCefAgencia, Long> {
	
	List<ProcessoCefAgencia> findByFormularioCefAgencia(FormularioCefAgencia formularioCefAgencia);	
		
}

// Fim do arquivo: ProcessoCefAgenciaRepository.java

// Arquivo: ProtocoloAdicionalRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloAdicionalRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.ProtocoloAdicional;

@Repository
public interface ProtocoloAdicionalRepository extends JpaRepository<ProtocoloAdicional, Long> {
	
	@Query(value = "FROM ProtocoloAdicional p WHERE p.agenciaReguladora.cnpj = :cnpj", nativeQuery = false)
	List<ProtocoloAdicional> listarProtocolosPorAgenciaReguladora(String cnpj);
	
	Optional<ProtocoloAdicional> findByProtocolo(String protocolo);	
	
	@Query(value = "FROM ProtocoloAdicional p WHERE p.protocolo = :protocolo "
			+ "AND p.agenciaReguladora.cnpj = :cnpjAgencia AND p.prestador.cnpj = :cnpjPrestador", nativeQuery = false)
	Optional<ProtocoloAdicional> pesquisarPorAgenciaEPrestador(String protocolo, String cnpjAgencia, String cnpjPrestador);	
	
	@Query(value = "FROM ProtocoloAdicional p WHERE p.protocolo = :protocolo "
			+ "AND p.agenciaReguladora.cnpj = :cnpjAgencia", nativeQuery = false)
	Optional<ProtocoloAdicional> pesquisarPorAgencia(String protocolo, String cnpjAgencia);	
	
}

// Fim do arquivo: ProtocoloAdicionalRepository.java

// Arquivo: ProtocoloAtoNormativoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloAtoNormativoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ProtocoloAtoNormativo;
import br.gov.ana.sarsb.model.entity.RascunhoCadastro;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProtocoloAtoNormativoRepository extends JpaRepository<ProtocoloAtoNormativo, Long> {


    @Query(value = "select * from sabtb_protocoloatonormativo  pa "
            + "inner join sabtb_protocolos p on p.pro_cd = pa.pr_pro_cd "
            + "WHERE p.pro_arg_cd  = :idAgr ORDER BY pro_dt_envio desc ", nativeQuery = true)
    List<ProtocoloAtoNormativo> findByIdAgr(Long idAgr);


    @Query(value = "select * from sabtb_protocoloatonormativo  pa "
            + "inner join sabtb_protocolos p on p.pro_cd = pa.pr_pro_cd "
            + "WHERE pa.pr_ato_cd = :idAto ORDER BY pro_dt_envio desc LIMIT 1", nativeQuery = true)
    Optional<ProtocoloAtoNormativo> findByIdAtoNormativo(Long idAto);








}


// Fim do arquivo: ProtocoloAtoNormativoRepository.java

// Arquivo: ProtocoloCefPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloCefPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.ProtocoloCefPrestador;

@Repository
public interface ProtocoloCefPrestadorRepository extends JpaRepository<ProtocoloCefPrestador, Long> {
	
	@Query(value = "FROM ProtocoloCefPrestador p WHERE p.agenciaReguladora.cnpj = :cnpj", nativeQuery = false)
	List<ProtocoloCefPrestador> listarProtocolosPorAgenciaReguladora(String cnpj);
	
	@Query(value = "FROM ProtocoloCefPrestador p WHERE p.numeroProtocolo = :numeroProtocolo", nativeQuery = false)
	List<ProtocoloCefPrestador> listarPorProtocolo(String numeroProtocolo);
	
	@Query(value = "SELECT * FROM public.sabtb_protocolocefprestador p WHERE p.pcf_nu_protocolo = :numeroProtocolo LIMIT 1", nativeQuery = true)
	Optional<ProtocoloCefPrestador> findByNumeroProtocolo(String numeroProtocolo);
		
}

// Fim do arquivo: ProtocoloCefPrestadorRepository.java

// Arquivo: ProtocoloConformidadeRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloConformidadeRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ProtocoloConformidade;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProtocoloConformidadeRepository extends JpaRepository<ProtocoloConformidade, Long> {


    @Query(value = "select * from sabtb_protocoloconformidadeentidade  pa "
            + "inner join sabtb_protocolos p on p.pro_cd = pa.prot_pro_cd "
            + "WHERE pa.prot_con_cd = :idConformidade ORDER BY pro_dt_envio desc LIMIT 1", nativeQuery = true)
    Optional<ProtocoloConformidade> findByConformidadeId(Long idConformidade);

    @Query(value = "select * from sabtb_protocoloconformidadeentidade  pa "
            + "inner join sabtb_protocolos p on p.pro_cd = pa.prot_pro_cd "
            + "WHERE p.pro_arg_cd = :idAgr", nativeQuery = true)
    List<ProtocoloConformidade> findByConformidadePorIdAgr(Long idAgr);


}


// Fim do arquivo: ProtocoloConformidadeRepository.java

// Arquivo: ProtocoloIndenizacaoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloIndenizacaoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ProtocoloIndenizacao;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;


@Repository
public interface ProtocoloIndenizacaoRepository extends JpaRepository<ProtocoloIndenizacao, Long> {

    List<ProtocoloIndenizacao> findByProtocoloId(Long idProtocolo);

    List<ProtocoloIndenizacao> findAll();


   // List<ProtocoloIndenizacao> findByIdArg(Long idArg);



}


// Fim do arquivo: ProtocoloIndenizacaoRepository.java

// Arquivo: ProtocoloRegulacaoTarifariaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloRegulacaoTarifariaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.ProtocoloRegulacaoTarifaria;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProtocoloRegulacaoTarifariaRepository extends JpaRepository<ProtocoloRegulacaoTarifaria, Long> {
	List<ProtocoloRegulacaoTarifaria>  findByProtocoloId(Long numProtocolo);

	List<ProtocoloRegulacaoTarifaria> findByRegulacaoTarifariaIdIn(List<Long> idRegulacaoTarifa);
}



// Fim do arquivo: ProtocoloRegulacaoTarifariaRepository.java

// Arquivo: ProtocoloRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.Protocolo;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProtocoloRepository extends JpaRepository<Protocolo, Long> {

    List<Protocolo> findByEntidadeReguladora_Id(Long id);

    Optional<Protocolo> findById(Long nuProtocolo);

    List<Protocolo> findByNormasDeRefrencia_IdAndEntidadeReguladoraId(Long normas, Long idAgenciaReguladora);

}


// Fim do arquivo: ProtocoloRepository.java

// Arquivo: ProtocoloRequisitoComplementarRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ProtocoloRequisitoComplementarRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.ProtocoloRequisitoComplementar;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ProtocoloRequisitoComplementarRepository extends JpaRepository<ProtocoloRequisitoComplementar, Long> {
    List<ProtocoloRequisitoComplementar> findByProtocoloId(Long numProtocolo);

    List<ProtocoloRequisitoComplementar> findByRequisitoComplementarIdIn(List<Long> idsRequisitosComplementar);

    ProtocoloRequisitoComplementar findByRequisitoComplementarId(Long idRequisitoComplementar);

}



// Fim do arquivo: ProtocoloRequisitoComplementarRepository.java

// Arquivo: RascunhoCadastroRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RascunhoCadastroRepository.java

package br.gov.ana.sarsb.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.RascunhoCadastro;

@Repository
public interface RascunhoCadastroRepository extends JpaRepository<RascunhoCadastro, Long> {
	
	@Query(value = "SELECT r.* FROM public.sabtb_rascunhocadastro r "
			+ "INNER JOIN public.sabtb_prefeitura p ON p.pft_cd = r.rca_pft_cd "
			+ "WHERE p.pft_nu_cnpj = :cnpj AND r.rca_tpf_cd = :tipoFormulario LIMIT 1", nativeQuery = true)
	Optional<RascunhoCadastro> findByCnpjAndTipoFormulario(String cnpj, Long tipoFormulario);
	
}

// Fim do arquivo: RascunhoCadastroRepository.java

// Arquivo: RegulacaoTarifariaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RegulacaoTarifariaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaFiltroDTO;
import br.gov.ana.sarsb.model.entity.AditivoAgencia;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.FinalizacaoRegulacaoTarifaria;
import br.gov.ana.sarsb.model.entity.RegulacaoTarifaria;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface RegulacaoTarifariaRepository extends JpaRepository<RegulacaoTarifaria, Long> {

	@Query("SELECT r FROM RegulacaoTarifaria r "
			+ "JOIN FETCH r.agenciaReguladora "
			+ "JOIN FETCH r.contrato "
			+ "WHERE r.agenciaReguladora.id = :idAgenciaReguladora ")
	List<RegulacaoTarifaria> findByRegulacaoTarifariaIdAgenciaReguladora(@Param("idAgenciaReguladora") Long idAgenciaReguladora);

	@Query("SELECT sr FROM RegulacaoTarifaria sr " +
			"JOIN FETCH sr.contrato sc " +
			"JOIN FETCH sr.agenciaReguladora ar " +
			"LEFT JOIN MunicipioContrato sm ON :#{#filtro.municipio} IS NOT NULL AND sm.contrato = sc " +
			"LEFT JOIN MunicipioIBGE s ON :#{#filtro.municipio} IS NOT NULL AND s.codigoIbge = sm.municipio.codigoIbge " +
			"WHERE (:#{#filtro.idEntidadeReguladora} IS NULL OR ar.id = :#{#filtro.idEntidadeReguladora}) " +
			"AND (:#{#filtro.municipio} IS NULL OR UPPER(s.nomeMunicipio) = :#{#filtro.municipio}) " +
			"AND (:#{#filtro.uf} IS NULL OR sm.uf = :#{#filtro.uf}) " +
			"AND (:#{#filtro.tipoContrato} IS NULL OR sc.tipoPrestacao = :#{#filtro.tipoContrato}) " +
			"AND (:#{#filtro.codigoInternoContrato} IS NULL OR sc.codigoInterno = :#{#filtro.codigoInternoContrato}) " +
			"AND (:#{#filtro.anoColeta} IS NULL OR sr.anoColeta = CAST(:#{#filtro.anoColeta} AS integer)) " +
			"AND (:#{#filtro.isEsgotamento} IS NULL OR sc.isAEsgotamento = :#{#filtro.isEsgotamento}) " +
			"AND (:#{#filtro.isLimpezaUrbana} IS NULL OR sc.isLimpezaUrbana = :#{#filtro.isLimpezaUrbana}) " +
			"AND (:#{#filtro.isAbastecimento} IS NULL OR sc.isAbastecimento = :#{#filtro.isAbastecimento}) " +
			"AND (:#{#filtro.isManejoResiduos} IS NULL OR sc.isManejoResiduos = :#{#filtro.isManejoResiduos}) " +
			"AND (:#{#filtro.isDrenagemManejo} IS NULL OR sc.isDrenagemEManejoAguasPluviais = :#{#filtro.isDrenagemManejo})")
	List<RegulacaoTarifaria> findByRegulacaoTarifariaFiltro(@Param("filtro") RegulacaoTarifariaFiltroDTO filtro);

	@Query("SELECT r FROM RegulacaoTarifaria r "
			+ "JOIN FETCH r.agenciaReguladora "
			+ "JOIN FETCH r.contrato "
			+ "WHERE r.id = :idRegulacaoTarifaria")
	RegulacaoTarifaria buscarRegulacaoTarifariaId(Long idRegulacaoTarifaria);

	@Query(value = "SELECT * FROM public.sabtb_regulacaotarifaria r " +
			"WHERE r.reg_ano_coleta = :ano " +
			"AND r.reg_agr_cd = :agenciaId", nativeQuery = true)
	List<RegulacaoTarifaria> findByAnoAndAgenciaId(@Param("ano") Long ano, @Param("agenciaId") Long agenciaId);

	List<RegulacaoTarifaria> findByFinalizacao(FinalizacaoRegulacaoTarifaria finalizacaoRegulacaoTarifaria);

	@Query("SELECT DISTINCT r.anoColeta FROM RegulacaoTarifaria r ORDER BY r.anoColeta DESC")
	List<Integer> findListaDeAnos();

	RegulacaoTarifaria findByAnoColetaAndAgenciaReguladoraIdAndContratoId(Long anoColeta,
																		  Long idAgenciaReguladora,
																		  Long idContrato);
	List<RegulacaoTarifaria> findByIdIn(List<Long> ids);

}

// Fim do arquivo: RegulacaoTarifariaRepository.java

// Arquivo: RelatorioErisRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RelatorioErisRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.AditivoAgencia;
import br.gov.ana.sarsb.model.entity.RelatorioEris;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

@Repository
public interface RelatorioErisRepository extends JpaRepository<RelatorioEris, Long> {

	@Query(value = "SELECT  agr_nu_cnpj, agr_nm, servreg_mun_nm, servreg_nm_uf, atr_ds, servr_ds, servreg_ds_atividade, " +
			"servreg_dt_inicio, servreg_dt_fim, prt_nu_cnpj, prt_nm_razaosocial, " +
			"servreg_dt_inicio_prestador, servreg_dt_fim_prestador " +
			"FROM vw_relatorio_cadastro_eris_xls z WHERE z.servreg_agr_cd = :idagr", nativeQuery = true)
	List<Object[]> findDadosRelatorioByIdAgr(@Param("idagr") Long idAgr);
}






// Fim do arquivo: RelatorioErisRepository.java

// Arquivo: RequisitoComplementarDocRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RequisitoComplementarDocRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.RequisitoComplementarDoc;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface RequisitoComplementarDocRepository extends JpaRepository<RequisitoComplementarDoc, Long> {
    List<RequisitoComplementarDoc> findAllByRequisitoComplementarId(Long idRequisitoComplementar);

    @Modifying
    @Query("DELETE FROM RequisitoComplementarDoc d WHERE d.id IN :ids")
    void deleteAllByIds(@Param("ids") List<Long> ids);
}

// Fim do arquivo: RequisitoComplementarDocRepository.java

// Arquivo: RequisitoComplementarRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RequisitoComplementarRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.FinalizacaoRequisitoComplementar;
import br.gov.ana.sarsb.model.entity.RequisitoComplementar;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface RequisitoComplementarRepository extends JpaRepository<RequisitoComplementar, Long> {
    List<RequisitoComplementar> findAllByAgenciaReguladoraIdAndAnoReferenciaOrderByAnoReferenciaDesc(Long idAgencia,
                                                                                                     Long anoReferencia);

    List<RequisitoComplementar> findAllByAgenciaReguladoraIdOrderByAnoReferenciaDesc(Long idAgencia);

    @Query(value = "SELECT * FROM public.sabtb_reqcomplementaresnr8 r " +
            "WHERE r.reg_ano_coleta = :ano " +
            "AND r.reg_agr_cd = :agenciaId", nativeQuery = true)
    List<RequisitoComplementar> findByAnoAndAgenciaId(@Param("ano") Long ano, @Param("agenciaId") Long agenciaId);

    List<RequisitoComplementar> findByFinalizacao(FinalizacaoRequisitoComplementar finalizacaoRegulacaoTarifaria);

    RequisitoComplementar findByAnoReferencia(Long ano);

    RequisitoComplementar findByAnoReferenciaAndAgenciaReguladoraId(Long ano, Long idAgencia);
}

// Fim do arquivo: RequisitoComplementarRepository.java

// Arquivo: RespostaAditivoAgenciaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RespostaAditivoAgenciaRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.RespostaAditivoAgencia;

@Repository
public interface RespostaAditivoAgenciaRepository extends JpaRepository<RespostaAditivoAgencia, Long> {
	
}

// Fim do arquivo: RespostaAditivoAgenciaRepository.java

// Arquivo: RespostaMunicipioAditivoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RespostaMunicipioAditivoRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.RespostaMunicipioAgencia;

@Repository
public interface RespostaMunicipioAditivoRepository extends JpaRepository<RespostaMunicipioAgencia, Long> {
	
}

// Fim do arquivo: RespostaMunicipioAditivoRepository.java

// Arquivo: RespostaProtocoloRepository.java
// Caminho: \br\gov\ana\sarsb\repository\RespostaProtocoloRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.AgenciaTemProtocoloPrestador;
import br.gov.ana.sarsb.model.entity.RespostaProtocolo;

@Repository
public interface RespostaProtocoloRepository extends JpaRepository<RespostaProtocolo, Long> {
	
	List<RespostaProtocolo> findByAgenciaTemProtocoloPrestador(AgenciaTemProtocoloPrestador agenciaTemProtocoloPrestador);
		
}

// Fim do arquivo: RespostaProtocoloRepository.java

// Arquivo: ServicoReguladoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\ServicoReguladoRepository.java

package br.gov.ana.sarsb.repository;


import br.gov.ana.sarsb.model.entity.ServicoRegulado;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ServicoReguladoRepository extends JpaRepository<ServicoRegulado, Long> {
}


// Fim do arquivo: ServicoReguladoRepository.java

// Arquivo: SolicitacaoAcessoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\SolicitacaoAcessoRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.SolicitacaoAcesso;

@Repository
public interface SolicitacaoAcessoRepository extends JpaRepository<SolicitacaoAcesso, Long> {
	
}

// Fim do arquivo: SolicitacaoAcessoRepository.java

// Arquivo: SustentabilidadeRepository.java
// Caminho: \br\gov\ana\sarsb\repository\SustentabilidadeRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.dto.municipio.SustentabilidadeDTO;
import br.gov.ana.sarsb.model.entity.Sustentabilidade;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface SustentabilidadeRepository extends JpaRepository<Sustentabilidade, Long> {


    @Query(value = "FROM Sustentabilidade s WHERE s.prefeitura.id = :idPrefeitura", nativeQuery = false)
    List<Sustentabilidade> listarSustentabilidadePorIdPrefeitura(Long idPrefeitura);

    @Query(value = "FROM Sustentabilidade s WHERE s.prefeitura.id = :idPrefeitura", nativeQuery = false)
    List<SustentabilidadeDTO> listarSustentabilidadeDTOPorIdPrefeitura(Long idPrefeitura);
}


// Fim do arquivo: SustentabilidadeRepository.java

// Arquivo: TipoAgenciaReguladoraRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoAgenciaReguladoraRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoAgenciaReguladora;

import java.util.Optional;

@Repository
public interface TipoAgenciaReguladoraRepository extends JpaRepository<TipoAgenciaReguladora, Long> {



    @Query("SELECT t FROM TipoAgenciaReguladora t WHERE t.id = :codigoAgencia")
    Optional<TipoAgenciaReguladora> findByIds(@Param("codigoAgencia") Long codigoAgencia);
}

// Fim do arquivo: TipoAgenciaReguladoraRepository.java

// Arquivo: TipoAtribuicaoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoAtribuicaoRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoAtribuicao;
import br.gov.ana.sarsb.model.entity.TipoCategoriaPrestador;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoAtribuicaoRepository extends JpaRepository<TipoAtribuicao, Long> {
	
}

// Fim do arquivo: TipoAtribuicaoRepository.java

// Arquivo: TipoCategoriaPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoCategoriaPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoCategoriaPrestador;

@Repository
public interface TipoCategoriaPrestadorRepository extends JpaRepository<TipoCategoriaPrestador, Long> {
	
}

// Fim do arquivo: TipoCategoriaPrestadorRepository.java

// Arquivo: TipoCategoriasSmsruRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoCategoriasSmsruRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoCategoriasSmsru;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoCategoriasSmsruRepository extends JpaRepository<TipoCategoriasSmsru, Long> {
	
}

// Fim do arquivo: TipoCategoriasSmsruRepository.java

// Arquivo: TipoCobrancaSocialSmsruRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoCobrancaSocialSmsruRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoCategoriasSmsru;
import br.gov.ana.sarsb.model.entity.TipoCobrancaSocialSmsru;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoCobrancaSocialSmsruRepository extends JpaRepository<TipoCobrancaSocialSmsru, Long> {
	
}

// Fim do arquivo: TipoCobrancaSocialSmsruRepository.java

// Arquivo: TipoDocumentoArrecadacaoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoDocumentoArrecadacaoRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoDocumentoArrecadacao;

@Repository
public interface TipoDocumentoArrecadacaoRepository extends JpaRepository<TipoDocumentoArrecadacao, Long> {
	
}

// Fim do arquivo: TipoDocumentoArrecadacaoRepository.java

// Arquivo: tipodocumentocriacaorepository.java
// Caminho: \br\gov\ana\sarsb\repository\tipodocumentocriacaorepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoDocumentoCriacao;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface tipodocumentocriacaorepository extends JpaRepository<TipoDocumentoCriacao, Long> {

}


// Fim do arquivo: tipodocumentocriacaorepository.java

// Arquivo: TipoDocumentoPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoDocumentoPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoDocumentoPrestador;

@Repository
public interface TipoDocumentoPrestadorRepository extends JpaRepository<TipoDocumentoPrestador, Long> {
	
}

// Fim do arquivo: TipoDocumentoPrestadorRepository.java

// Arquivo: TipoEntidadeReguladoraRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoEntidadeReguladoraRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;
import java.util.Optional;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoEntidadeReguladora;

@Repository
public interface TipoEntidadeReguladoraRepository extends JpaRepository<TipoEntidadeReguladora, Long> {
	
	Optional<TipoEntidadeReguladora> findByCnpj(String cnpj);

	@Query(value = "SELECT x.pft_nu_cnpj " +
			"FROM public.sabtb_prefeitura x " +
			"INNER JOIN public.sabtb_municipio sm " +
			"ON sm.mun_cd = CAST(x.pft_nu_ibgemunicipio AS bigint) " +
			"WHERE sm.mun_uf = :uf AND sm.mun_nm = :municipio", nativeQuery = true)
	List<String> findCnpjByUfAndMunicipio(@Param("uf") String uf, @Param("municipio") String municipio);

}


// Fim do arquivo: TipoEntidadeReguladoraRepository.java

// Arquivo: TipoEtapaServicoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoEtapaServicoRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoEtapaServico;

@Repository
public interface TipoEtapaServicoRepository extends JpaRepository<TipoEtapaServico, Long> {
	
}

// Fim do arquivo: TipoEtapaServicoRepository.java

// Arquivo: TipoInstrumentoLegalRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoInstrumentoLegalRepository.java

package br.gov.ana.sarsb.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoInstrumentoLegal;

@Repository
public interface TipoInstrumentoLegalRepository extends JpaRepository<TipoInstrumentoLegal, Long> {
	
}

// Fim do arquivo: TipoInstrumentoLegalRepository.java

// Arquivo: TipoMultissetorialRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoMultissetorialRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoMultissetorial;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoMultissetorialRepository extends JpaRepository<TipoMultissetorial, Long> {
}


// Fim do arquivo: TipoMultissetorialRepository.java

// Arquivo: TipoParamentoCobrancaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoParamentoCobrancaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoAtribuicao;
import br.gov.ana.sarsb.model.entity.TipoParametroCobranca;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoParamentoCobrancaRepository extends JpaRepository<TipoParametroCobranca, Long> {
	
}

// Fim do arquivo: TipoParamentoCobrancaRepository.java

// Arquivo: TipoRegimeCobrancaRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoRegimeCobrancaRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoCobrancaSocialSmsru;
import br.gov.ana.sarsb.model.entity.TipoRegimeCobranca;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoRegimeCobrancaRepository extends JpaRepository<TipoRegimeCobranca, Long> {
	
}

// Fim do arquivo: TipoRegimeCobrancaRepository.java

// Arquivo: TipoResponsavelMandatarioRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoResponsavelMandatarioRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoResponsavelMandatario;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.Optional;

public interface TipoResponsavelMandatarioRepository extends JpaRepository<TipoResponsavelMandatario, Long> {
    @Query(value = "SELECT *\n" +
            "FROM public.sabta_responsavelmandatario\n" +
            "WHERE respm_agr_cd = :id_agr\n" +
            "  AND (respm_dt_fim IS NULL OR respm_dt_fim >= CURRENT_DATE)\n" +
            "ORDER BY respm_cd DESC\n" +
            "LIMIT 1", nativeQuery = true)
    @Autowired
    Optional<TipoResponsavelMandatario> ativomandatarios(Long id_agr);



}



// Fim do arquivo: TipoResponsavelMandatarioRepository.java

// Arquivo: TipoServicoReguladoDescricaoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoServicoReguladoDescricaoRepository.java

package br.gov.ana.sarsb.repository;


import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDescricao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface TipoServicoReguladoDescricaoRepository extends JpaRepository<TipoServicoReguladoDescricao, Long> {
    @Query("select t from TipoServicoReguladoDescricao t where t.CodigoEri = :id_agr order by t.id  asc")
    @Autowired
    List<TipoServicoReguladoDescricao> ativomandatarios(Long id_agr);
}


// Fim do arquivo: TipoServicoReguladoDescricaoRepository.java

// Arquivo: TipoServicoReguladoDocumentoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoServicoReguladoDocumentoRepository.java

package br.gov.ana.sarsb.repository;


import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoFiltroDTO;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDocumento;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.List;

@Repository
public interface TipoServicoReguladoDocumentoRepository extends JpaRepository<TipoServicoReguladoDocumento, Long> {
    @Query("SELECT t FROM TipoServicoReguladoDocumento t WHERE t.CodigoEntidade=:id_agr and t.ServicoExcluido = false")
    @Autowired
    List<TipoServicoReguladoDocumento> ativomandatarios(Long id_agr);

    @Query("SELECT t FROM TipoServicoReguladoDocumento t WHERE t.ServicoExcluido = false")
    List<TipoServicoReguladoDocumento> Listartodos();

    @Modifying
    @Query("UPDATE TipoServicoReguladoDocumento t SET t.ServicoExcluido = true WHERE t.CodigoEntidade = :id")
    void deletarServico(@Param("id") Long id);

    @Query(value = " select s.* from sabtb_servicosregulados s " +
            " where servreg_servr_cd in (3,4) and servreg_agr_cd =:idAgr and servreg_nm_uf =:uf and servreg_mun_nm =:mun and servreg_d_e_l_e_t_a_d_o = false",  nativeQuery = true)
    List<TipoServicoReguladoDocumento> listarPorEriMunicipioSluSmrsu(Long idAgr, String uf, String mun);


    @Query(value = " select s.* from sabtb_servicosregulados s " +
            " inner join sabtb_condicoesatividades sc on s.servreg_cd = sc.cond_serv_cd " +
            " inner join sabtb_conformidadeservicos c on c.conf_cd = sc.cond_conf_cd " +
            " where servreg_servr_cd in (3,4) and servreg_agr_cd =:idAgr and conf_aa_coleta =:anoColeta and servreg_nm_uf =:uf and servreg_mun_nm =UPPER(:mun) and servreg_d_e_l_e_t_a_d_o = false ",  nativeQuery = true)
    List<TipoServicoReguladoDocumento> buscarAtividadesPor(Long idAgr, Long anoColeta, String uf, String mun);

    @Query("SELECT t FROM TipoServicoReguladoDocumento t WHERE t.CodigoEntidade=:idAgr and t.ServicoExcluido = false")
    Page<TipoServicoReguladoDocumento> ativomandatariosPaginado(Long idAgr, Pageable pageable);

    @Query("SELECT t FROM TipoServicoReguladoDocumento t " +
            "JOIN FETCH t.prestador r " +
            "WHERE t.CodigoEntidade = :#{#filtro.idEri} AND t.ServicoExcluido = FALSE AND t.UfMunicipio IN (:#{#filtro.uf}) " +
            "AND t.NomeMunicipio IN (:#{#filtro.municipio}) " +
            "AND (:#{#filtro.cpf} IS NULL OR :#{#filtro.cpf} = '' OR r.cnpj = :#{#filtro.cpf})")
    List<TipoServicoReguladoDocumento> buscarAtividadesPorUFMunicipioCpf(
            @Param("filtro") TipoServicoReguladoDocumentoFiltroDTO filtro
    );

}



// Fim do arquivo: TipoServicoReguladoDocumentoRepository.java

// Arquivo: TipoServicoReguladoPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoServicoReguladoPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.Prestador;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoPrestador;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface TipoServicoReguladoPrestadorRepository extends JpaRepository<TipoServicoReguladoPrestador, Long> {


    @Query(value = "select distinct t.UfMunicipio, t.NomeMunicipio, mn.codigoIbge " +
            "from TipoServicoReguladoPrestador t " +
            "left join Prestador sp " +
            "on sp.id = t.CodigoPrestador " +
            "left join MunicipioIBGE mn " +
            "on UPPER(mn.nomeMunicipio) = UPPER(t.NomeMunicipio) " +
            "and mn.Uf = t.UfMunicipio  " +
            "where sp.cnpj = :cnpj " +
            "and t.excluido = false")
    @Autowired
    List<Object[]> findMunicipiosPrestadorPorUf(String cnpj);

    @Query(value = "select distinct ss.descricao from TipoServicoReguladoPrestador t " +
            "left join Prestador sp " +
            "on sp.id = t.CodigoPrestador " +
            "left join TipoServicoRegulado ss " +
            "on ss.id = t.CodigoServico " +
            "where sp.cnpj =:cnpj " +
            "and t.NomeMunicipio = :municipio " +
            "and t.excluido = false")
    @Autowired
    List<Object[]> findServicosReguladosPrestador(String cnpj, String municipio);

    @Query(value = "select distinct mn.nomeMunicipio, mn.Uf, mn.codigoIbge from TipoServicoReguladoPrestador t left join MunicipioIBGE mn on UPPER(mn.nomeMunicipio) = UPPER(t.NomeMunicipio) and mn.Uf = t.UfMunicipio where t.CodigoEri =:idAgenciaReguladora")
    @Autowired
    List<Object[]> findMunicipiosPrestadorPorIdAgReguladora(Long idAgenciaReguladora);

    @Query(value = "select distinct sp from TipoServicoReguladoPrestador t inner join Prestador sp on sp.id = t.CodigoPrestador where t.CodigoEri =:idAgenciaReguladora")
    @Autowired
    List<Prestador> findPrestadoresPorIdAgReguladora(Long idAgenciaReguladora);
}


// Fim do arquivo: TipoServicoReguladoPrestadorRepository.java

// Arquivo: TipoServicoReguladoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoServicoReguladoRepository.java

package br.gov.ana.sarsb.repository;


import br.gov.ana.sarsb.model.entity.TipoServicoRegulado;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoServicoReguladoRepository extends JpaRepository<TipoServicoRegulado, Long> {
}


// Fim do arquivo: TipoServicoReguladoRepository.java

// Arquivo: TipoSetorReguladoRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoSetorReguladoRepository.java

package br.gov.ana.sarsb.repository;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import br.gov.ana.sarsb.model.entity.TipoSetorRegulado;

@Repository
public interface TipoSetorReguladoRepository  extends JpaRepository<TipoSetorRegulado, Long> {
}


// Fim do arquivo: TipoSetorReguladoRepository.java

// Arquivo: TipoSubCategoriaPrestadorRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoSubCategoriaPrestadorRepository.java

package br.gov.ana.sarsb.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import br.gov.ana.sarsb.model.entity.TipoCategoriaPrestador;
import br.gov.ana.sarsb.model.entity.TipoSubCategoriaPrestador;

@Repository
public interface TipoSubCategoriaPrestadorRepository extends JpaRepository<TipoSubCategoriaPrestador, Long> {
	
	List<TipoSubCategoriaPrestador> findByTipoCategoriaPrestador(TipoCategoriaPrestador tipoCategoriaPrestador);
	
}

// Fim do arquivo: TipoSubCategoriaPrestadorRepository.java

// Arquivo: TipoValoresCobradosRepository.java
// Caminho: \br\gov\ana\sarsb\repository\TipoValoresCobradosRepository.java

package br.gov.ana.sarsb.repository;

import br.gov.ana.sarsb.model.entity.TipoCategoriasSmsru;
import br.gov.ana.sarsb.model.entity.TipoValoresCobradosSmsru;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoValoresCobradosRepository extends JpaRepository<TipoValoresCobradosSmsru, Long> {
	
}

// Fim do arquivo: TipoValoresCobradosRepository.java

============================================================

PACOTE 32 - [Service] br.gov.ana.sarsb.service
------------------------------------------------------------
Arquivos: 104 | Métodos: 355

// Arquivo: AditivoAgenciaService.java
// Caminho: \br\gov\ana\sarsb\service\AditivoAgenciaService.java

package br.gov.ana.sarsb.service;

import java.io.File;
import java.util.List;

import br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo.*;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;

/**
 * Service interface for managing regulatory agency addendum operations.
 * Provides methods for creating, updating, and managing addendum forms and related data.
 */
public interface AditivoAgenciaService {
    
    /**
     * Saves a new regulatory agency addendum.
     *
     * @param aditivoAgenciaDTO the addendum data to be saved
     * @return the ID of the saved addendum
     * @throws NegocioException if business validation fails or save operation encounters an error
     */
    Long salvarAditivoAgencia(AditivoAgenciaDTO aditivoAgenciaDTO) throws NegocioException;
    
    /**
     * Updates an existing regulatory agency addendum.
     *
     * @param aditivoAgenciaDTO the addendum data with updated information
     * @return the ID of the updated addendum
     * @throws NegocioException if business validation fails or update operation encounters an error
     */
    Long atualizarAditivoAgencia(AditivoAgenciaDTO aditivoAgenciaDTO) throws NegocioException;
    
    /**
     * Retrieves a regulatory agency addendum by its ID.
     *
     * @param idAditivoAgencia the ID of the addendum to retrieve
     * @return the addendum data
     * @throws NegocioException if the addendum is not found or retrieval fails
     */
    AditivoAgenciaDTO recuperarAditivoAgencia(Long idAditivoAgencia) throws NegocioException;
    
    /**
     * Creates a new addendum form or retrieves an existing one for the specified agency.
     *
     * @param cnpjAgencia the CNPJ of the regulatory agency
     * @return the addendum form data
     * @throws NegocioException if form creation/retrieval fails or CNPJ validation fails
     */
    FormularioAditivoDTO criarOuConsultarFormularioAditivo(String cnpjAgencia) throws NegocioException;

    /**
     * Creates a new SMSRU form or retrieves an existing one for the specified municipality.
     *
     * @param codigomunicipio the municipality code
     * @return the SMSRU form data
     * @throws NegocioException if form creation/retrieval fails or municipality code is invalid
     */
    FormularioSmsruDTO criarOuConsultarFormularioSmsru(Long codigomunicipio) throws NegocioException;

    /**
     * Saves a file attachment for the specified addendum.
     *
     * @param idAditivo the ID of the addendum
     * @param arquivo the file to be saved
     * @throws NegocioException if file save operation fails or addendum is not found
     */
    void salvarArquivo(Long idAditivo, MultipartFile arquivo) throws NegocioException;
    
    /**
     * Deletes a regulatory agency addendum.
     *
     * @param idAditivo the ID of the addendum to delete
     * @throws NegocioException if deletion fails or addendum is not found
     */
    void deletarAditivoAgencia(Long idAditivo) throws NegocioException;
    
    /**
     * Retrieves a file attachment from the specified addendum.
     *
     * @param idAditivo the ID of the addendum
     * @param nomeArquivo the name of the file to retrieve
     * @return the file resource
     * @throws NegocioException if file retrieval fails or file is not found
     */
    Resource recuperarArquivo(Long idAditivo, String nomeArquivo) throws NegocioException;
    
    /**
     * Lists regulatory agency addendums by form ID and protocol.
     *
     * @param idFormulario the form ID
     * @param protocolo the protocol number
     * @return list of addendum data
     * @throws NegocioException if listing operation fails or parameters are invalid
     */
    List<AditivoAgenciaDTO> listarAditivoAgenciaPorProtocolo(Long idFormulario, String protocolo) throws NegocioException;
    
    /**
     * Lists addendum protocols by form ID.
     *
     * @param idFormulario the form ID
     * @return list of addendum protocol data
     * @throws NegocioException if listing operation fails or form is not found
     */
    List<AditivoProtocoloDTO> listarAditicoProtocoloPorFormulario(Long idFormulario) throws NegocioException;
    
    /**
     * Lists municipalities associated with an addendum by form ID and protocol.
     *
     * @param idFormulario the form ID
     * @param protocolo the protocol number
     * @return list of municipalities
     * @throws NegocioException if listing operation fails or parameters are invalid
     */
    List<Municipio> listarMunicipiosAditivo(Long idFormulario, String protocolo) throws NegocioException;
    
    /**
     * Saves questionnaire responses for an addendum.
     *
     * @param listaResposta list of questionnaire responses
     * @throws NegocioException if save operation fails or responses are invalid
     */
    void salvarQuestionarioAditivo(List<RespostaAditivoDTO> listaResposta) throws NegocioException;
    
    /**
     * Updates questionnaire responses for an addendum.
     *
     * @param listaResposta list of updated questionnaire responses
     * @throws NegocioException if update operation fails or responses are invalid
     */
    void atualizarQuestionarioAditivo(List<RespostaAditivoDTO> listaResposta) throws NegocioException;
    
    /**
     * Finalizes an addendum form.
     *
     * @param idFormulario the form ID to finalize
     * @return the ID of the finalized form
     * @throws NegocioException if finalization fails or form is not found
     */
    Long finalizarFormularioAditivo(Long idFormulario) throws NegocioException;

    /**
     * Finalizes an SMSRU form.
     *
     * @param id the form ID to finalize
     * @return the ID of the finalized form
     * @throws NegocioException if finalization fails or form is not found
     */
    Long finalizarFormularioSmsru(Long id) throws NegocioException;

    /**
     * Finalizes an SMSRU form with municipality data.
     *
     * @param idFormulario the form ID to finalize
     * @return the ID of the finalized form
     * @throws NegocioException if finalization fails or form is not found
     */
    Long finalizarFormularioSmsruWithPrefeitura(Long idFormulario) throws NegocioException;

    /**
     * Generates a receipt voucher file.
     *
     * @param numeroRecibo the receipt number
     * @return the generated receipt file
     */
    File gerarReciboComprovante(Long numeroRecibo);

    /**
     * Generates an SMSRU receipt voucher file.
     *
     * @param numeroRecibo the receipt number
     * @param cnpj the CNPJ associated with the receipt
     * @return the generated receipt file
     */
    File gerarReciboComprovanteSmsru(Long numeroRecibo, String cnpj);

}

// Fim do arquivo: AditivoAgenciaService.java

// Arquivo: AditivoAgenciaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\AditivoAgenciaServiceImpl.java

package br.gov.ana.sarsb.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo.*;
import br.gov.ana.sarsb.model.dto.municipio.*;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioSmrsuDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.*;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.mail.EmailException;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloSimplesDTO;
import br.gov.ana.sarsb.model.enums.Configuracoes;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;
import br.gov.ana.sarsb.util.Constantes;
import br.gov.ana.sarsb.util.ConverterUtil;
import br.gov.ana.sarsb.util.EmailUtil;
import br.gov.ana.sarsb.util.LogUtil;
import br.gov.ana.sarsb.util.SasbUtil;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Transactional
@Service
public class AditivoAgenciaServiceImpl implements AditivoAgenciaService {
    @Autowired
    private CadastranteRepository cadastranteRepository;

    private ConfigCache cc = ConfigCache.getInstance();
	
	@Autowired
	private FormularioAditivoAgenciaRepository formularioAditivoAgenciaRepository;

	@Autowired
	private InstrumentoCobrancaRelatorioService instrumentoCobrancaRelatorioService;
	
	@Autowired
	private AditivoAgenciaRepository aditivoAgenciaRepository;

	@Autowired
	private AditivoProtocoloRepository aditivoProtocoloRepository;
	
	@Autowired
	private AditivoMunicipioRepository aditivoMunicipioRepository;
	
	@Autowired
	private RespostaAditivoAgenciaRepository respostaAditivoAgenciaRepository;
	
	@Autowired
	private RespostaMunicipioAditivoRepository respostaMunicipioAditivoRepository;
	
	@Autowired
	private AgenciaReguladoraRepository agenciaReguladoraRepository;

	@Autowired
	private FormularioService formularioService;

	@Autowired
	private CadastranteService cadastranteService;

	@Autowired
	private FormularioAditivoSmsruRepository formularioAditivoSmsruRepository;
	
	@Autowired
	private ProtocoloPrestadorService protocoloPrestadorService;
	
	@Autowired
	private MunicipioService municipioService;

	@Autowired
	private TipoAgenciaReguladoraRepository tipoAgenciaReguladoraRepository;
	
	@Autowired
	private GerarRelatorioService gerarRelatorioService;
	
	@Autowired
	private FileStorageService fileStorageService;

	@Autowired
	private PrefeituraRepository prefeituraRepository;
	@Autowired
	private PrefeituraService prefeituraService;


	@Autowired
	private SustentabilidadeRepository sustentabilidadeRepository;

	@Override
	public Long salvarAditivoAgencia(AditivoAgenciaDTO aditivoAgenciaDTO) throws NegocioException {
		AditivoAgencia entity = new AditivoAgencia();
		try {
			BeanUtils.copyProperties(aditivoAgenciaDTO, entity);
			criarVinculoProtocoloAgencia(aditivoAgenciaDTO.getAditivoProtocolo(), entity);
			criarListaMunicipioAditivo(aditivoAgenciaDTO.getListaMunicipio(), entity);
			
			aditivoAgenciaRepository.save(entity);
			return entity.getId();
		} catch (Exception e) {
			aditivoAgenciaRepository.delete(entity);
			throw new NegocioException("Erro ao salvar aditivo!", e);
		}
	}
	
	@Override
	public AditivoAgenciaDTO recuperarAditivoAgencia(Long idAditivoAgencia) throws NegocioException {
		return null;
	}
	
	@Override
	public Long atualizarAditivoAgencia(AditivoAgenciaDTO aditivoAgenciaDTO) throws NegocioException {
		return salvarAditivoAgencia(aditivoAgenciaDTO);
	}

	@Override
	public FormularioAditivoDTO criarOuConsultarFormularioAditivo(String cnpjAgencia) throws NegocioException {
		Optional<FormularioAditivoAgencia> formularioOptional = formularioAditivoAgenciaRepository.findByAgenciaReguladora(cnpjAgencia);
		if(!formularioOptional.isPresent()) {
			Optional<AgenciaReguladora> agenciaReguladoraOptional = agenciaReguladoraRepository.findByCnpj(cnpjAgencia);
			if(agenciaReguladoraOptional.isPresent()) {
				FormularioAditivoAgencia novo = FormularioAditivoAgencia.builder().agenciaReguladora(agenciaReguladoraOptional.get()).build();
				novo = formularioAditivoAgenciaRepository.save(novo);
				return new FormularioAditivoDTO().toFormularioAditivoDTO(novo);
			}
		} else {
			return new FormularioAditivoDTO().toFormularioAditivoDTO(formularioOptional.get());
		}
		return null;
	}


	@Override
	public FormularioSmsruDTO criarOuConsultarFormularioSmsru(Long codigomunicipio) throws NegocioException {
		Optional<FormularioAditivoSmsru> formularioOptional = formularioAditivoSmsruRepository.findByMunicipio(codigomunicipio);
		if (!formularioOptional.isEmpty()) {
			// Se o formulário já existe, retornar DTO correspondente
			return new FormularioSmsruDTO().toFormularioAditivoDTO(formularioOptional.get());
		} else {
			// Se o formulário não existe, criar um novo e salvá-lo
			Optional<Prefeitura> agenciaReguladoraOptional = prefeituraRepository.findById(codigomunicipio);
			if (agenciaReguladoraOptional.isPresent()) {
				FormularioAditivoSmsru novo = FormularioAditivoSmsru.builder()
						.prefeitura(agenciaReguladoraOptional.get())
						.build();
				novo = formularioAditivoSmsruRepository.save(novo);
				return new FormularioSmsruDTO().toFormularioAditivoDTO(novo);
			} else {
				throw new NegocioException("Prefeitura não encontrada com o ID: " + codigomunicipio);
			}
		}
	}






	@Override
	public void salvarArquivo(Long idAditivo, MultipartFile arquivo) throws NegocioException {
		try {
			fileStorageService.save(arquivo, montarCaminhoArquivo(idAditivo));
		} catch (NegocioException | IOException e) {
			throw new NegocioException("erroSalvarRegistro", e);
		}
	}
	
	@Override
	public Resource recuperarArquivo(Long idAditivo, String nomeArquivo) throws NegocioException {
		try {
			return fileStorageService.load(nomeArquivo, montarCaminhoArquivo(idAditivo));
		} catch (NegocioException | IOException e) {
			throw new NegocioException("erroAoRecuperarRegistro", e);
		}
	}
	
	@Override
	public List<AditivoAgenciaDTO> listarAditivoAgenciaPorProtocolo(Long idFormulario, String protocolo) throws NegocioException {
		List<AditivoAgencia> listaAditivo = aditivoAgenciaRepository.findByFormularioAndProtocolo(idFormulario, protocolo);
		if(!listaAditivo.isEmpty()) {
			List<AditivoAgenciaDTO> listaAditivoDTO = new ArrayList<>();
			listaAditivo.forEach(a -> {
				AditivoAgenciaDTO dto = new AditivoAgenciaDTO();
				BeanUtils.copyProperties(a, dto);
				
				AditivoProtocoloDTO apDto = new AditivoProtocoloDTO();
				BeanUtils.copyProperties(a.getAditivoProtocolo(), apDto);
				apDto.setIdFormularioAditivoAgencia(a.getAditivoProtocolo().getFormularioAditivoAgencia().getId());
				dto.setAditivoProtocolo(apDto);
				
				List<AditivoMunicipioDTO> listaMunicipio = new ArrayList<>();
				a.getListaMunicipio().forEach(m -> {
					AditivoMunicipioDTO mDto = new AditivoMunicipioDTO();
					BeanUtils.copyProperties(m, mDto);

					Municipio mun = toMunicipio(m.getCodigoIbge().toString());
					mDto.setMunicipioUf(mun.getNome() + "/" + mun.getSiglaUF());
					mDto.setIdAditivoAgencia(m.getAditivoAgencia().getId());
					listaMunicipio.add(mDto);					
				});
				
				dto.setListaMunicipio(listaMunicipio);
				listaAditivoDTO.add(dto);
			});
			return listaAditivoDTO;
		}
		return Collections.emptyList();
	}
	

	@Override
	public List<AditivoProtocoloDTO> listarAditicoProtocoloPorFormulario(Long idFormulario) throws NegocioException {
		List<AditivoProtocoloAgencia> listaAditivoProtocolo = aditivoProtocoloRepository.findByFormularioAditivoAgencia(new FormularioAditivoAgencia(idFormulario));
		if(!listaAditivoProtocolo.isEmpty()) {
			List<ProtocoloSimplesDTO> listaProtocolos = protocoloPrestadorService.carregarListaProtocoloPrestador(listaAditivoProtocolo.get(0).getFormularioAditivoAgencia().getAgenciaReguladora().getCnpj());
			List<AditivoProtocoloDTO> listaAditivoProtocoloDTO = new ArrayList<>();
			listaAditivoProtocolo.forEach(p -> {
				AditivoProtocoloDTO apDto = new AditivoProtocoloDTO();
				BeanUtils.copyProperties(p, apDto);	
				apDto.setListaResposta(new ArrayList<>());
				recuperarPrestadorByProtocolos(apDto, listaProtocolos);
				
				if(!p.getListaResposta().isEmpty()) {
					p.getListaResposta().forEach(r -> {
						RespostaAditivoDTO raDto = new RespostaAditivoDTO();
						BeanUtils.copyProperties(r, raDto);	
						raDto.setIdAditivoProtocolo(r.getAditivoProtocolo().getId());
						raDto.setIdPerguntaDecreto(r.getPerguntaDecreto().getId());
						
						raDto.setListaMunicipio(new ArrayList<>());
						if(!r.getListaMunicipio().isEmpty()) {
							r.getListaMunicipio().forEach(m -> {
								RespostaMunicipioDTO rmDto =  new RespostaMunicipioDTO();
								BeanUtils.copyProperties(m, rmDto);
								
								Municipio mun = toMunicipio(m.getCodigoIbge().toString());
								rmDto.setMunicipioUf(mun.getNome() + "/" + mun.getSiglaUF());
								rmDto.setIdRespostaAditivo(r.getId());
								rmDto.setExcluido(Boolean.FALSE);
								raDto.getListaMunicipio().add(rmDto);
							});
						}
						apDto.getListaResposta().add(raDto);
					});
				}
				listaAditivoProtocoloDTO.add(apDto);
			});
			return listaAditivoProtocoloDTO;
		}
		return Collections.emptyList();
	}
	
	private void recuperarPrestadorByProtocolos(AditivoProtocoloDTO apDto, List<ProtocoloSimplesDTO> listaProtocolos) {
		Optional<ProtocoloSimplesDTO> protocoloOptional = listaProtocolos.stream().filter(f -> f.getProtocolo().equals(apDto.getProtocolo())).findFirst();
		if(protocoloOptional.isPresent()) {
			ProtocoloSimplesDTO ps = protocoloOptional.get();
			apDto.setCnpj(ps.getCnpjPrestador());
			apDto.setNomePrestador(ps.getNomePrestador());
		}
	}
	
	@Override
	public void deletarAditivoAgencia(Long idAditivo) throws NegocioException {
		try {
			deletarArquivo(idAditivo);
			aditivoAgenciaRepository.deleteById(idAditivo);
		} catch (Exception e) {
			throw new NegocioException("Erro ao deletar aditivo", e);
		}
	}
	
	@Override
	public List<Municipio> listarMunicipiosAditivo(Long idFormulario, String protocolo) throws NegocioException {
		List<String> listaCodigoIbge = aditivoMunicipioRepository.retornaCdIbgePorFormularioEProtocolo(idFormulario, protocolo);
		return listaCodigoIbge.stream().map(this::toMunicipio).collect(Collectors.toList());
	}
	
	
	
	@Override
	public void salvarQuestionarioAditivo(List<RespostaAditivoDTO> listaResposta) throws NegocioException {
		try {
			if(!listaResposta.isEmpty()) {
				listaResposta.forEach(r -> {
					RespostaAditivoAgencia raaEntity = new RespostaAditivoAgencia();
					BeanUtils.copyProperties(r, raaEntity);
					raaEntity.setPerguntaDecreto(new PerguntaDecreto(r.getIdPerguntaDecreto()));
					raaEntity.setAditivoProtocolo(new AditivoProtocoloAgencia(r.getIdAditivoProtocolo()));
					raaEntity.setListaMunicipio(new HashSet<>());
					
					if(!r.getListaMunicipio().isEmpty()) {
						r.getListaMunicipio().forEach(m -> {
							if(Boolean.FALSE.equals(m.getExcluido())) {								
								RespostaMunicipioAgencia rmaEntity = new RespostaMunicipioAgencia();
								BeanUtils.copyProperties(m, rmaEntity);
								rmaEntity.setRespostaAditivoAgencia(raaEntity);
								
								raaEntity.getListaMunicipio().add(rmaEntity);
							} else {
								respostaMunicipioAditivoRepository.deleteById(m.getId());
							}
						});
					}
					respostaAditivoAgenciaRepository.save(raaEntity);
				});
			}
		} catch (Exception e) {
			throw new NegocioException("Erro ao salvar questionario!", e);
		}
	}
	
	@Override
	public void atualizarQuestionarioAditivo(List<RespostaAditivoDTO> listaResposta) throws NegocioException {
		try {
			salvarQuestionarioAditivo(listaResposta);
		} catch (Exception e) {
			throw new NegocioException("Erro ao atualizar questionario!", e);
		}
	}

	//descomentar enviarEmailRecibo do finalizarFormularioAditivo

	@Override
	public Long finalizarFormularioAditivo(Long idFormulario) throws NegocioException {
		try {			
			FormularioAditivoAgencia formularioSalvo = formularioAditivoAgenciaRepository.getById(idFormulario);
			formularioSalvo.setDataEnvio(new Date());
			formularioSalvo.setNumeroRecibo(SasbUtil.gerarNumeroRecibo(formularioAditivoAgenciaRepository
					.pesquisarUltimoNumeroReciboPorAno(String.valueOf(LocalDate.now().getYear()))));
			formularioAditivoAgenciaRepository.save(formularioSalvo);
			//enviarEmailRecibo(formularioSalvo.getAgenciaReguladora(), gerarReciboComprovante(formularioSalvo.getNumeroRecibo()));
			return formularioSalvo.getNumeroRecibo();
		} catch (Exception e) {
			throw new NegocioException(LogUtil.messageToJson(e.getMessage()));
		}		
	}


    @Override
    public Long finalizarFormularioSmsru(Long id) throws NegocioException {
        try {
            FormularioAditivoSmsru formularioSalvo = formularioAditivoSmsruRepository.getById(id);
            formularioSalvo.setDataEnvio(new Date());
            formularioSalvo.setNumeroRecibo(SasbUtil.gerarNumeroReciboMunicipio(formularioAditivoSmsruRepository
                    .pesquisarUltimoNumeroReciboPorAnomunicipio(String.valueOf(LocalDate.now().getYear()))));
            formularioAditivoSmsruRepository.save(formularioSalvo);

            Prefeitura prefeitura = formularioSalvo.getPrefeitura();
						CadastranteDTO cadastrante = cadastranteService.recuperarCadastranteid(prefeitura.getId());
            if (prefeitura != null) {
								File recibo = gerarReciboComprovanteSmsru(formularioSalvo.getNumeroRecibo(), prefeitura.getCnpj());
                //enviarEmailReciboSmsru(prefeitura, recibo);
								//enviarEmailReciboSmsruCadastrante(cadastrante, recibo);
            }

            return formularioSalvo.getNumeroRecibo();
        } catch (Exception e) {
            throw new NegocioException(LogUtil.messageToJson(e.getMessage()));
        }
    }

	@Override
	public Long finalizarFormularioSmsruWithPrefeitura(Long idFormulario) throws NegocioException {
		try {
			FormularioAditivoSmsru formularioSalvo = formularioAditivoSmsruRepository.getById(idFormulario);
			formularioSalvo.setDataEnvio(new Date());
			formularioSalvo.setNumeroRecibo(SasbUtil.gerarNumeroRecibo(formularioAditivoAgenciaRepository
					.pesquisarUltimoNumeroReciboPorAno(String.valueOf(LocalDate.now().getYear()))));
			formularioAditivoSmsruRepository.save(formularioSalvo);

			// Obter a prefeitura associada ao formulário
			Prefeitura prefeitura = formularioSalvo.getPrefeitura();
			Cadastrante cadastrante = new Cadastrante();

			// Verificar se a prefeitura é válida (pode ser nula, dependendo da lógica do seu sistema)
			if (prefeitura != null) {
				// Enviar o e-mail com o número do recibo, passando o objeto Prefeitura diretamente
				//enviarEmailReciboSmsru(prefeitura, gerarReciboComprovanteSmsru(formularioSalvo.getNumeroRecibo(), prefeitura.getCnpj()));

			} else {
				// Caso a prefeitura seja nula, você pode tomar alguma ação aqui
				// Por exemplo, lançar uma exceção ou enviar uma notificação
			}

			return formularioSalvo.getNumeroRecibo();
		} catch (Exception e) {
			throw new NegocioException(LogUtil.messageToJson(e.getMessage()));
		}
	}


	@Override
	public File gerarReciboComprovante(Long numeroRecibo) {
		String numeroReciboFormatado = ConverterUtil
				.aplicaMascaraNumeroRecibo(StringUtils.leftPad(numeroRecibo.toString(), 9, "0"));
		Optional<FormularioAditivoAgencia> formularioOptional = formularioAditivoAgenciaRepository.findByNumeroRecibo(numeroRecibo);
		if(formularioOptional.isPresent()) {
			FormularioAditivoAgencia formularioSalvo = formularioOptional.get();
			ReciboDTO recibo = ReciboDTO.builder()
					.cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(formularioSalvo.getAgenciaReguladora().getCnpj()))
					.dataRegistro(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(formularioSalvo.getDataEnvio()))
					.nomeTitular(formularioSalvo.getAgenciaReguladora().getNome())
					.numeroRecibo(numeroReciboFormatado)
					.build();
			gerarRelatorioService.gerarReciboAgenciaNorma2(recibo);
			return recibo.getRecibo();
		} else {
			throw new NegocioException(LogUtil.messageToJson("Número do recibo não foi encontrado!"));
		}
	}

	@Override
	public File gerarReciboComprovanteSmsru(Long numeroRecibo, String cnpj) {
		String numeroReciboFormatado = ConverterUtil.aplicaMascaraNumeroRecibo(StringUtils.leftPad(numeroRecibo.toString(), 9, "0"));
		Optional<FormularioAditivoSmsru> formularioOptional = formularioAditivoSmsruRepository.findByNumeroRecibo(numeroRecibo);
		if (formularioOptional.isPresent()) {
			FormularioAditivoSmsru formularioSalvo = formularioOptional.get();
			Long idPrefeitura = formularioSalvo.getPrefeitura().getId();
			Optional<Prefeitura> agenciaReguladoraOptional2 = prefeituraRepository.findById(idPrefeitura);
			String cnpjMunicipio = cnpj;
			Prefeitura prefeitura = agenciaReguladoraOptional2.get();
            FormularioSmrsuDTO formularioSmrsuDTO = new FormularioSmrsuDTO();
			FormularioDTO formularioDTO = new FormularioDTO();
            CadastranteDTO cadastranteDTO = new CadastranteDTO();
			InstrumentoCobrancaRelatorioDTO instrumentoCobrancaRelatorioDTO = new InstrumentoCobrancaRelatorioDTO();

			PrefeituraDTO prefeituraDTO = new PrefeituraDTO();
          prefeituraDTO.setId(prefeitura.getId());
          prefeituraDTO.setCnpj(prefeitura.getCnpj());
          prefeituraDTO.setCodigoIbge(prefeitura.getCodigoIbge());
          prefeituraDTO.setEmail(prefeitura.getEmail());
          prefeituraDTO.setTelefone(prefeitura.getTelefone());
          prefeituraDTO.setPossuiEntidadeReguladora(prefeitura.getPossuiEntidadeReguladora());
          prefeituraDTO.setCodigoPrestador(prefeitura.getCodigoPrestador());
          prefeituraDTO.setSigla(prefeitura.getSigla());
          prefeituraDTO.setNome(prefeitura.getNome());
          prefeituraDTO.setDescricaoOutraEntidade(prefeitura.getDescricaoOutraEntidade());
          prefeituraDTO.setPodeRetificar(prefeitura.getPodeRetificar());
          prefeituraDTO.setDesativarCronograma(prefeitura.getDesativarCronograma());
          prefeituraDTO.setArquivoAtoDelegacao(prefeitura.getArquivoAtoDelegacao());
          prefeituraDTO.setArquivoAtoDelegacaoModificado(prefeitura.getArquivoAtoDelegacaoModificado());
          prefeituraDTO.setCodigoAgencia(prefeitura.getCodigoAgencia());
          prefeituraDTO.setAceiteLgpd(prefeitura.getAceiteLgpd());
          prefeituraDTO.setPossuiEntidadeReguladora(prefeitura.getPossuiEntidadeReguladora());
			Long codigoAgencia = prefeitura.getCodigoAgencia();
			if (codigoAgencia != null) {
				Optional<AgenciaReguladora> agenciaReguladoraOptional = agenciaReguladoraRepository.findByIds(codigoAgencia);
				if (agenciaReguladoraOptional.isPresent()) {
					AgenciaReguladora agenciaReguladora = agenciaReguladoraOptional.get();
					prefeituraDTO.setAgenciaReguladora(agenciaReguladora);
				} else {

				}
			}
            Long codigoMunicipio = prefeitura.getId();
            if (codigoMunicipio != null) {
                Optional<Cadastrante> cadastranteOptional = cadastranteRepository.recuperarCadastranteid(codigoMunicipio);
                if (cadastranteOptional.isPresent()) {
                    Cadastrante cadastranteDTOs = cadastranteOptional.get();

                    cadastranteDTO.setId(cadastranteOptional.get().getId());
                    cadastranteDTO.setNome(cadastranteOptional.get().getNome());
                    cadastranteDTO.setCargo(cadastranteOptional.get().getCargo());
                    cadastranteDTO.setEmail(cadastranteOptional.get().getEmail());
                    cadastranteDTO.setTelefone(cadastranteOptional.get().getTelefone());
                    cadastranteDTO.setCpf(cadastranteOptional.get().getCpf());
                    cadastranteDTO.setEmail(cadastranteOptional.get().getEmail());
                    cadastranteDTO.setPossuiVinculoPrefeitura(cadastranteOptional.get().getPossuiVinculoPrefeitura());
                    cadastranteDTO.setDepartamento(cadastranteOptional.get().getDepartamento());
                    formularioSmrsuDTO.setCadastrante(cadastranteDTO);

                }
            }




			Long codInstrumento = prefeitura.getId();
			if (codInstrumento != null) {
				List<InstrumentoCobrancaRelatorioDTO> listaInstrumento = instrumentoCobrancaRelatorioService.getInstrumentosPorIdPrefeitura(codInstrumento);

				// Supondo que você já tenha instanciado um objeto FormularioSmrsuDTO chamado "formulario"
				formularioSmrsuDTO.setListaInstrumentoCobrancaNovo(listaInstrumento);
			}

			formularioSmrsuDTO.setPrefeitura(prefeituraDTO);
			formularioDTO.setFormularioSmrsuDTO(formularioSmrsuDTO);

			List<Sustentabilidade> listaSustentabilidade = sustentabilidadeRepository.listarSustentabilidadePorIdPrefeitura(prefeitura.getId());
//			FormularioSmrsuDTO formularioSmrsu = new FormularioSmrsuDTO();
//			formularioSmrsuDTO.setListaSustentabilidadeNovo(listaSustentabilidade);





			if (agenciaReguladoraOptional2.isPresent()) {
				Municipio mun = municipioService.pesquisarMunicipioPorIBGE(prefeituraDTO.getCodigoIbge());

				List<InstrumentoCobrancaRelatorioDTO> instrumentos = instrumentoCobrancaRelatorioService.getInstrumentosPorIdPrefeitura(idPrefeitura);

				ReciboDTO recibo = ReciboDTO.builder()
						.cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(prefeitura.getCnpj()))
						.dataRegistro(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(formularioSalvo.getDataEnvio()))
						.nomeTitular(prefeitura.getNome())
						.numeroRecibo(numeroReciboFormatado)
						.isDetalhado(true)
						.sustentabilidade(listaSustentabilidade)
						.formularioDTO(formularioDTO).municipio(mun.getNome() + "/" + mun.getSiglaUF())
						.build();

				gerarRelatorioService.gerarReciboSmrsu(recibo);
				return recibo.getRecibo();
			} else {
				throw new NegocioException(LogUtil.messageToJson("Prefeitura não encontrada para o formulário aditivo!"));
			}
		} else {
			throw new NegocioException(LogUtil.messageToJson("Número do recibo não foi encontrado!"));
		}
	}


	private void enviarEmailReciboSmsru(Prefeitura prefeitura, File recibo) throws NegocioException {
		try {
			String corpo = " Prezado(a) " + prefeitura.getNome() + ","
					+ "\n Segue em anexo o protocolo do preenchimento e envio do formulário on-line referente  a atualização do cadastro da entidade reguladora infranacional."
					+ "\n\n Atenciosamente, "
					+ "\n\n Entidade Nacional de Águas e Saneamento Básico"
					+ "\n\n Não responder a este e-mail. Ele foi enviado automaticamente pelo sistema.";

			if (StringUtils.isNotBlank(prefeitura.getEmail())) {
				EmailUtil.enviar(corpo, "Recibo do Preenchimento de Formulário", "nao-responda@ana.gov.br",
						"Agência Nacional de Águas e Saneamento Básico", recibo, prefeitura.getEmail());
			}
		} catch (EmailException e) {
			log.error(e);
		}
	}


	private void enviarEmailReciboSmsruCadastrante(CadastranteDTO cadastrante, File recibo) throws NegocioException {
		try {
			String corpo = " Prezado(a) " + cadastrante.getNome() + ","
					+ "\n Segue em anexo o protocolo do preenchimento e envio do formulário on-line referente  a atualização do cadastro da entidade reguladora infranacional."
					+ "\n\n Atenciosamente, "
					+ "\n\n Entidade Nacional de Águas e Saneamento Básico"
					+ "\n\n Não responder a este e-mail. Ele foi enviado automaticamente pelo sistema.";

			if (StringUtils.isNotBlank(cadastrante.getEmail())) {
				EmailUtil.enviar(corpo, "Recibo do Preenchimento de Formulário", "nao-responda@ana.gov.br",
						"Agência Nacional de Águas e Saneamento Básico", recibo, cadastrante.getEmail());
			}
		} catch (EmailException e) {
			log.error(e);
		}
	}


	private void enviarEmailRecibo(AgenciaReguladora agencia, File recibo) throws NegocioException {
		try {
			String corpo = " Prezado(a) " + agencia.getNome() + ","
					+ "\n Segue em anexo o protocolo do preenchimento e envio do formulário on-line referente  a atualização do cadastro da entidade reguladora infranacional."
					+ "\n\n Atenciosamente, "
					+ "\n\n Entidade Nacional de Águas e Saneamento Básico"
					+ "\n\n Não responder a este e-mail. Ele foi enviado automaticamente pelo sistema.";

			if (StringUtils.isNotBlank(agencia.getEmail())) {
				EmailUtil.enviar(corpo, "Recibo do Preenchimento de Formulário", "nao-responda@ana.gov.br",
						"Agência Nacional de Águas e Saneamento Básico", recibo, agencia.getEmail());
			}
		} catch (EmailException e) {
			log.error(e);
		}
	}
	
	private Municipio toMunicipio(String codigoIbge) {
		return municipioService.pesquisarMunicipioPorIBGE(codigoIbge);
	}
	
	private void criarVinculoProtocoloAgencia(AditivoProtocoloDTO aditivoProtocoloDTO, AditivoAgencia entity) throws NegocioException {
		Optional<AditivoProtocoloAgencia> aditivoProtocoloOptional = aditivoProtocoloRepository
				.findByFormularioAndProtocolo(aditivoProtocoloDTO.getIdFormularioAditivoAgencia(), 
						aditivoProtocoloDTO.getProtocolo());
		if(aditivoProtocoloOptional.isPresent()) {				
			entity.setAditivoProtocolo(aditivoProtocoloOptional.get());
		} else {
			criarAditivoProtocoloAgencia(aditivoProtocoloDTO, entity);
		}
	}
	
	private void criarListaMunicipioAditivo(List<AditivoMunicipioDTO> lista, AditivoAgencia aditivo) throws NegocioException {
		List<AditivoMunicipio> salvarMunicipios = new ArrayList<>();
		lista.forEach(m -> {
			if(m.getId() != null && m.getExcluido()) {
				aditivoMunicipioRepository.deleteById(m.getId());
			} else {				
				salvarMunicipios.add(toAditivoMunicipio(m, aditivo));
			}
		});
		aditivo.setListaMunicipio(salvarMunicipios);
	}
	
	private AditivoMunicipio toAditivoMunicipio(AditivoMunicipioDTO m, AditivoAgencia aditivo) {
		return AditivoMunicipio.builder()
				.id(m.getId())
				.aditivoAgencia(aditivo)
				.codigoIbge(m.getCodigoIbge())
				.agua(m.getAgua())
				.esgoto(m.getEsgoto())
				.build();
	}
	
	private void criarAditivoProtocoloAgencia(AditivoProtocoloDTO dto, AditivoAgencia aditivo) throws NegocioException {
		AditivoProtocoloAgencia entity = AditivoProtocoloAgencia.builder()
				.id(dto.getId())
				.formularioAditivoAgencia(new FormularioAditivoAgencia(dto.getIdFormularioAditivoAgencia()))
				.protocolo(dto.getProtocolo())				
				.build();
		aditivo.setAditivoProtocolo(entity);
	}
	
	private void deletarArquivo(Long idAditivo) throws IOException {
		try {
			fileStorageService.removeFilesByDirectory(montarCaminhoArquivo(idAditivo));
		} catch (IOException e) {
			throw new NegocioException("Erro ao deletar arquivo", e);
		}
	}
	
	private Path montarCaminhoArquivo(Long idAditivo) throws NegocioException {
		Optional<AditivoAgencia> aditivoOptional = aditivoAgenciaRepository.findById(idAditivo);
		if(aditivoOptional.isPresent()) {
			return Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_AGENCIA + 
					aditivoOptional.get().getAditivoProtocolo().getFormularioAditivoAgencia().getAgenciaReguladora().getCnpj() + 
						Constantes.SUB_PATH_ADITIVO_PROTOCOLO + idAditivo);			
		} else {
			throw new NegocioException("Não foi encontrado aditivo para id informado!");
		}
	}




}


// Fim do arquivo: AditivoAgenciaServiceImpl.java

// Arquivo: AgenciaReguladoraService.java
// Caminho: \br\gov\ana\sarsb\service\AgenciaReguladoraService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoralistaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoResponsavelMandatarioDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;

import java.util.List;

public interface AgenciaReguladoraService {
	
	void criarAgencia(AgenciaReguladoraDTO agenciaReguladoraDTO) throws NegocioException;
	void atualizarAgencia(AgenciaReguladoraDTO agenciaReguladoraDTO) throws NegocioException;

	default void atualizarAgencia(TipoResponsavelMandatarioDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}

	AgenciaReguladoraDTO recuperarAgencia(String cnpj) throws NegocioException;
	AgenciaReguladora carregarAgenciaReguladora(String cnpj) throws NegocioException;
	AgenciaReguladoraDTO agenciaReguladoraJaExiste(String cnpj) throws NegocioException;
	void ativarNovaAgenciaReguladora(String hash) throws NegocioException;

	List<AgenciaReguladoralistaDTO> listareris() throws NegocioException;

	}



// Fim do arquivo: AgenciaReguladoraService.java

// Arquivo: AgenciaReguladoraServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\AgenciaReguladoraServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.config.security.dto.ProfileDTO;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.exception.ServicoRemotoException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoralistaDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.TipoAgenciaReguladora;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.service.integration.sso.SegurancaIntegrationService;
import br.gov.ana.sarsb.util.EmailUtil;
import br.gov.ana.sarsb.util.Md5Util;
import org.apache.commons.mail.EmailException;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Service
public class AgenciaReguladoraServiceImpl implements AgenciaReguladoraService {
	
	private ConfigCache cc = ConfigCache.getInstance();
	
	@Autowired
	private AgenciaReguladoraRepository agenciaReguladoraRepository;

	@Autowired
	private TipoResponsavelMandatarioService TipoResponsavelMandatarioRepository;
	
	@Autowired
	private SegurancaIntegrationService segurancaIntegrationService;

	@Autowired
	private SolicitacaoAcessoService solicitacaoAcessoService;
	@Autowired
	private br.gov.ana.sarsb.repository.TipoResponsavelMandatarioRepository tipoResponsavelMandatarioRepository;

	@Override
	public void criarAgencia(AgenciaReguladoraDTO agenciaReguladoraDTO) throws NegocioException {
		try {
			AgenciaReguladora novaAgencia = new AgenciaReguladora();
			Optional<AgenciaReguladora> agenciaSalvaOptional = agenciaReguladoraRepository.findByCnpj(agenciaReguladoraDTO.getCnpj());
			if(agenciaSalvaOptional.isPresent()) {
				novaAgencia = agenciaSalvaOptional.get();
				BeanUtils.copyProperties(agenciaReguladoraDTO, novaAgencia, "id");
			} else {				
				BeanUtils.copyProperties(agenciaReguladoraDTO, novaAgencia);
			}
			novaAgencia.setAgenciaAtiva(Boolean.FALSE);
			agenciaReguladoraRepository.save(novaAgencia);		
			criarHashAtivacao(novaAgencia);
		} catch (Exception e) {
			throw new NegocioException(e);
		}
	}

	private void criarHashAtivacao(AgenciaReguladora novaAgencia) throws NegocioException {
		try {
			novaAgencia.setHashAtivacao(Md5Util.gerarHashAgenciaReguladora(novaAgencia));
			agenciaReguladoraRepository.save(novaAgencia);
			enviarEmailConfirmacaoCadastroAgencia(novaAgencia);
		} catch (Exception e) {
			throw new NegocioException(e);
		}
	}
	
	@Override
	public void ativarNovaAgenciaReguladora(String hash) throws NegocioException {
		Optional<AgenciaReguladora> agenciaOptional = agenciaReguladoraRepository.findByHashAtivacao(hash);
		if(agenciaOptional.isPresent()) {
			AgenciaReguladora agenciaSalva = agenciaOptional.get();
			if(agenciaSalva.getAgenciaAtiva()) {
				throw new NegocioException("Entidade Reguladora já ativada!");
			}
			agenciaSalva.setAgenciaAtiva(Boolean.TRUE);
			agenciaReguladoraRepository.save(agenciaSalva);
			try {
				ProfileDTO profile = segurancaIntegrationService.consultarUsuarioSemToken(agenciaSalva.getCnpj());
				if(profile == null) {
					criarUsuarioSeguranca(agenciaSalva);
				} else {
					if(!agenciaSalva.getEmail().equals(profile.getEmail())) {
						alterarUsuarioSSO(toAgenciaReguladoraDTO(agenciaSalva));
					}
					solicitacaoAcessoService.esqueciSenha(profile.getIdentificador(), agenciaSalva.getEmail());
				}
			} catch (ServicoRemotoException e) {
				throw new NegocioException("Erro ao criar usuário Segurança.");
			}
		} else {
			throw new NegocioException("Código de ativação não é válido!");
		}
	}



	@Override
	public List<AgenciaReguladoralistaDTO> listareris() throws NegocioException {
		List<AgenciaReguladora> entidades = agenciaReguladoraRepository.findAll();

		List<AgenciaReguladoralistaDTO> entidadesDTO = new ArrayList<>();
		for (AgenciaReguladora entidade : entidades) {
			AgenciaReguladoralistaDTO entidadeDTO = new AgenciaReguladoralistaDTO();
			entidadeDTO.setId(entidade.getId());
			entidadeDTO.setCnpj(entidade.getCnpj());
			entidadeDTO.setNome(entidade.getNome());
			entidadeDTO.setSigla(entidade.getSigla());
			entidadesDTO.add(entidadeDTO);
		}

		return entidadesDTO;
	}


	private void criarUsuarioSeguranca(AgenciaReguladora ag) throws ServicoRemotoException {
		try {
			segurancaIntegrationService.cadastrarUsuario(ag.getNome(), ag.getNomeResponsavel(), ag.getCnpj(), ag.getEmail());
			segurancaIntegrationService.adicaoEmGrupoSemToken(ag.getCnpj(), "AGENCIA REGULADORA - SARSB");		
		} catch (ServicoRemotoException e) {
			throw new ServicoRemotoException("Erro ao cadastrar usuário no Segurança 2");
		}		
	}
	
    private void enviarEmailConfirmacaoCadastroAgencia(AgenciaReguladora ag) throws NegocioException {
        try {
            String corpo = " Prezado(a) " + ag.getNome() + "," +
    					"\n Informamos que sua Entidade Reguladora Infranacional foi cadastrada no SASB. "
                  	  + "\n Por favor clique no link abaixo para realizar a ativação. "
                    + "\n\n " + cc.get("app.url") + "/#/ativar/agenciaReguladora/" + ag.getHashAtivacao() 
                    + "\n\n Atenciosamente, "
                    + "\n\n Agência Nacional de Águas e Saneamento Básico"
            		+ "\n\n Não responder a este e-mail. Ele foi enviado automaticamente pelo sistema.";

			if(ag.getEmail() != null){
	            EmailUtil.enviar(corpo, "Confirmação de Cadastro de Entidade Reguladora Infranacional - SASB",
	            		cc.get("email.naoresponda"),
	                    "Agência Nacional de Águas e Saneamento Básico", null, ag.getEmail());
			}
        } catch (EmailException e) {
        	throw new NegocioException("Erro ao enviar e-mail de confirmação de cadastro da Agência Reguladora!");
        }
    }

	@Override
	public AgenciaReguladoraDTO recuperarAgencia(String cnpj) throws NegocioException {
		AgenciaReguladoraDTO agenciaDto = new AgenciaReguladoraDTO();
		Optional<AgenciaReguladora> agenciaSalvaOptional = agenciaReguladoraRepository.findByCnpj(cnpj);
		if(agenciaSalvaOptional.isPresent()) {
			BeanUtils.copyProperties(agenciaSalvaOptional.get(), agenciaDto);
		} else {
			throw new NegocioException("cnpjNaoEncontrado");
		}
		return agenciaDto;
	}

	@Override
	public void atualizarAgencia(AgenciaReguladoraDTO agenciaReguladoraDTO) throws NegocioException {
		Optional<AgenciaReguladora> agenciaSalvaOptional = agenciaReguladoraRepository.findByCnpj(agenciaReguladoraDTO.getCnpj());
		if(agenciaSalvaOptional.isPresent()) {
			AgenciaReguladora agenciaSalva = agenciaSalvaOptional.get();
			BeanUtils.copyProperties(agenciaReguladoraDTO, agenciaSalva, "id");
			agenciaSalva.setAgenciaAtiva(Boolean.TRUE);
			agenciaReguladoraRepository.save(agenciaSalva);
			TipoAgenciaReguladora tipoAgenciaReguladora = agenciaSalva.getTipoAgenciaReguladora();
		 String valor = String.valueOf(tipoAgenciaReguladora.getId());





			if(!agenciaSalva.getEmail().equals(agenciaReguladoraDTO.getEmail()) ||
					!agenciaSalva.getNome().equals(agenciaReguladoraDTO.getNome())) {
				alterarUsuarioSSO(agenciaReguladoraDTO);
			}


		}

	}



	private void alterarUsuarioSSO(AgenciaReguladoraDTO agenciaReguladoraDTO) {
		ProfileDTO usuario = segurancaIntegrationService.consultarUsuarioSemToken(agenciaReguladoraDTO.getCnpj());
		segurancaIntegrationService.alterarUsuarioSemToken(usuario.getId(), 
				agenciaReguladoraDTO.getNome(), 
				agenciaReguladoraDTO.getNome(), 
				agenciaReguladoraDTO.getCnpj(), 
				agenciaReguladoraDTO.getEmail(), 
				Boolean.TRUE);
	}
	
	@Override
	public AgenciaReguladoraDTO agenciaReguladoraJaExiste(String cnpj) throws NegocioException {
		AgenciaReguladoraDTO agenciaReguladoraDTO = recuperarAgencia(cnpj);
		if (Objects.nonNull(agenciaReguladoraDTO)) {
			if (!agenciaReguladoraDTO.getAgenciaAtiva()) {
				limparDadosSensiveisAgencia(agenciaReguladoraDTO, true);
				return agenciaReguladoraDTO;
			}
		}
		limparDadosSensiveisAgencia(agenciaReguladoraDTO, false);
		return agenciaReguladoraDTO;
	}
	
	private void limparDadosSensiveisAgencia(AgenciaReguladoraDTO a, boolean limparParcial) {
		if(limparParcial) {
			limparDadosAgenciaParcial(a);		
		} else {
			limparDadosAgenciaGeral(a);
		}
	}
	
	private void limparDadosAgenciaParcial(AgenciaReguladoraDTO a) {
		a.setEmail("");
		a.setCpfResponsavel("");
		a.setNomeResponsavel("");
		a.setTelefoneResponsavel("");
		a.setEmailResponsavel("");		
	}
	
	private void limparDadosAgenciaGeral(AgenciaReguladoraDTO a) {
		limparDadosAgenciaParcial(a);
		a.setSigla("");
		a.setTelefone("");
		a.setTipoAgenciaReguladora(null);
		a.setLeiCriacao("");
		a.setUrlSite("");
		a.setDataInicioOperacao(null);
	}
	
	private AgenciaReguladoraDTO toAgenciaReguladoraDTO(AgenciaReguladora a) {
		return AgenciaReguladoraDTO.builder()
				.id(a.getId())
				.cnpj(a.getCnpj())
				.nome(a.getNome())
				.email(a.getEmail())
				.build();
	}

	@Override
	public AgenciaReguladora carregarAgenciaReguladora(String cnpj) throws NegocioException {
		Optional<AgenciaReguladora> agenciaOptional = agenciaReguladoraRepository.findByCnpj(cnpj);
		return agenciaOptional.isPresent() ? agenciaOptional.get() : null;
	}



}




// Fim do arquivo: AgenciaReguladoraServiceImpl.java

// Arquivo: AtoNormativoDetalhadoService.java
// Caminho: \br\gov\ana\sarsb\service\AtoNormativoDetalhadoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.AtoNormativoDetalhadoDTO;
import br.gov.ana.sarsb.model.entity.AtoNormativoDetalhado;

import java.io.File;
import java.util.List;

public interface AtoNormativoDetalhadoService {
    AtoNormativoDetalhado salvar(AtoNormativoDetalhadoDTO dto);
    AtoNormativoDetalhado atualizar(Long id, AtoNormativoDetalhadoDTO dto);
    void excluirLogicamente(Long id);



    List<AtoNormativoDetalhado> buscarPorIdAgr(Long idAgr);


}


// Fim do arquivo: AtoNormativoDetalhadoService.java

// Arquivo: AtoNormativoDetalhadoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\AtoNormativoDetalhadoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.AtoNormativoDetalhadoDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.repository.AtoNormativoDetalhadoRepository;
import br.gov.ana.sarsb.repository.ProtocoloIndenizacaoRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Service
public class AtoNormativoDetalhadoServiceImpl implements AtoNormativoDetalhadoService {

	public static final long REGULACAO_TARIFARIA = 4;

	@Autowired
	private AtoNormativoDetalhadoRepository atoNormativoDetalhadoRepository;

	@Autowired
	private NormasDeReferenciaService normasDeReferenciaService;

	@Autowired
	private ProtocoloService protocoloService;

	@Autowired
	private AgenciaReguladoraRepository agenciaReguladoraRepository;

	@Autowired
	private ProtocoloIndenizacaoRepository protocoloIndenizacaoRepository;

    @Autowired
    private ProtocoloIndenizacaoService protocoloIndenizacaoService;


	@Override
	public AtoNormativoDetalhado salvar(AtoNormativoDetalhadoDTO dto) {
		AtoNormativoDetalhado atoNormativoDetalhado = new AtoNormativoDetalhado();
		BeanUtils.copyProperties(dto, atoNormativoDetalhado);

		Long anoReferencia = dto.getAnoColetaReferencia().longValue();
		AgenciaReguladora agencia = agenciaReguladoraRepository.findById(dto.getIdAgr())
				.orElseThrow(() -> new RuntimeException("Agência Reguladora não encontrada"));

		Protocolo protocolo = gerarNovoProtocolo(anoReferencia, agencia, REGULACAO_TARIFARIA);


		NormasDeReferencia norma = normasDeReferenciaService.findById(REGULACAO_TARIFARIA);


		ProtocoloIndenizacao protocoloIndenizacao = montarConteudoPraSalvar(atoNormativoDetalhado, protocolo);

		System.out.println("OLHANDO " + protocoloIndenizacao);


		AtoNormativoDetalhado savedAto = atoNormativoDetalhadoRepository.save(atoNormativoDetalhado);
		protocoloIndenizacaoService.salvar(protocoloIndenizacao);

		return savedAto;
	}



	private Protocolo gerarNovoProtocolo(Long anoReferencia , AgenciaReguladora agenciaReguladora, Long norma) {
		Protocolo protocolo = new Protocolo();
		protocolo.setNumeroProtocolo("Protocolo");
		protocolo.setDataEnvio(LocalDateTime.now());
		protocolo.setNormasDeRefrencia(normasDeReferenciaService.findById(norma));
		protocolo.setEntidadeReguladora(agenciaReguladora);
		protocolo.setAnoReferencia(anoReferencia);
		protocoloService.criarProtocolo(protocolo);
		protocolo = protocoloService.gerarNumeroProtocolo(protocolo);
		protocoloService.criarProtocolo(protocolo);

		return protocolo;

	}

	@Override
	public AtoNormativoDetalhado atualizar(Long id, AtoNormativoDetalhadoDTO dto) {
		AtoNormativoDetalhado entity = atoNormativoDetalhadoRepository.findById(id)
				.orElseThrow(() -> new RuntimeException("Registro não encontrado"));
		BeanUtils.copyProperties(dto, entity, "cdAtodId");
		return atoNormativoDetalhadoRepository.save(entity);
	}



	@Override
	public void excluirLogicamente(Long id) {
		AtoNormativoDetalhado entity = atoNormativoDetalhadoRepository.findById(id)
				.orElseThrow(() -> new RuntimeException("Registro não encontrado"));
		entity.setExclusao(true);
		atoNormativoDetalhadoRepository.save(entity);
	}


	public List<AtoNormativoDetalhado> buscarPorIdAgr(Long idAgr) {
		return atoNormativoDetalhadoRepository.findByidAgr(idAgr);
	}


	private ProtocoloIndenizacao montarConteudoPraSalvar(AtoNormativoDetalhado atoNormativoDetalhado, Protocolo protocolo) {
		if (atoNormativoDetalhado == null ) {
			return null;
		}

		NormasDeReferencia norma = normasDeReferenciaService.findById(REGULACAO_TARIFARIA);

		AtoNormativoDetalhado atoNormativo = atoNormativoDetalhado;

		ProtocoloIndenizacao pi = new ProtocoloIndenizacao();
		pi.setAtoNormativoDetalhado(atoNormativo);
		pi.setProtocolo(protocolo);
		pi.setNorma(norma);
		pi.setAnoReferencia(atoNormativo.getAnoColetaReferencia());

		return pi;
	}




}




// Fim do arquivo: AtoNormativoDetalhadoServiceImpl.java

// Arquivo: AtoNormativoService.java
// Caminho: \br\gov\ana\sarsb\service\AtoNormativoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.entity.AtoNormativoEri;

import java.io.File;
import java.util.List;

public interface AtoNormativoService {

    AtoNormativoEri salvarAtoNormativo(AtoNormativoEriDTO atoNormativoEriDTO) throws NegocioException;

    void atualizarAtoNormativo(AtoNormativoEriDTO atoNormativoEriDTO) throws NegocioException;

    AtoNormativoEriDTO recuperarAtoNormativo(Long id) throws NegocioException;

    List<AtoNormativoEri> listaAtosNormativosEri() throws NegocioException;

    List<AtoNormativoEriDTO> consultarAtoNormativoPorAgenciaReguladora(Long id);

    File baixarReciboAtoNormativo(Long nuProtocolo);

    String consultarNomeArquivoAtoNormativo(Long id);

    File gerarReciboAtoNormativo(Long idAto);

    AtoNormativoEri buscarAtoNormativoValido (Long ano, Long idEri) throws NegocioException;

    List<AtoNormativoEri> consultarAtoNormativoPorAnoEEri(Long id, Long idEri);

    List<AtoNormativoEriDTO> consultarAtoNormativoPorAnoEri(Long id, Long idEri);



}



// Fim do arquivo: AtoNormativoService.java

// Arquivo: AtoNormativoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\AtoNormativoServiceImpl.java

package br.gov.ana.sarsb.service;


import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.parametrosNrs.ParametrosNRSDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.repository.AtoNormativoRepository;
import br.gov.ana.sarsb.repository.DocumentoNormativoEriRepository;
import br.gov.ana.sarsb.util.ConverterUtil;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AtoNormativoServiceImpl implements AtoNormativoService {

    public static final long NORMA_MATRIZ_RISCOS = 1l;

    @Autowired
    private AtoNormativoRepository atoNormativoRepository;

    @Autowired
    private AgenciaReguladoraRepository agenciaReguladoraRepository;

    @Autowired
    private DocumentoNormativoEriService documentoNormativoEriService;

    @Autowired
    private GerarRelatorioService gerarRelatorioService;

    @Autowired
    private DocumentoNormativoEriRepository documentoNormativoEriRepository;

    @Autowired
    private ProtocoloService protocoloService;

    @Autowired
    private NormasDeReferenciaService normasDeReferenciaService;

    @Autowired
    private ProtocoloAtoNormativoService protocoloAtoNormativoService;

    @Autowired
    private FinalizacaoPreenchimentoService finalizacaoPreenchimentoService;

    @Autowired
    private ParametrosNRSService parametrosNRSService;



    public AtoNormativoEri salvarAtoNormativo(AtoNormativoEriDTO atoNormativoEriDTO) throws NegocioException {
        try {
            AtoNormativoEri atoNormativoEri = new AtoNormativoEri();
            Optional<AgenciaReguladora> agenciaReguladora = agenciaReguladoraRepository
                    .findById(atoNormativoEriDTO.getAgenciaReguladora());
            atoNormativoEri.setEntidadeReguladora(agenciaReguladora.get());
            BeanUtils.copyProperties(atoNormativoEriDTO, atoNormativoEri);
            setarValorDocumentosNormativos(atoNormativoEriDTO, atoNormativoEri);

            Protocolo protocolo = gerarNovoProtocolo(atoNormativoEri.getAnoReferencia(), atoNormativoEri.getEntidadeReguladora(), NORMA_MATRIZ_RISCOS);

            ProtocoloAtoNormativo protocoloAtoNormativo = new ProtocoloAtoNormativo();;
            protocoloAtoNormativo.setProtocolo(protocolo);
            protocoloAtoNormativo.setAtoNormativoEri(atoNormativoEri);

            protocoloAtoNormativoService.salvar(protocoloAtoNormativo);

            atoNormativoRepository.save(atoNormativoEri);

            return atoNormativoEri;

        } catch (Exception e) {
            throw new NegocioException("Erro ao salvar o Ato Normativo do Contrato !", e);
        }
    }

    private Protocolo gerarNovoProtocolo(Long anoReferencia , AgenciaReguladora agenciaReguladora, Long norma) {
        Protocolo protocolo = new Protocolo();
        protocolo.setNumeroProtocolo("Protocolo");
        protocolo.setDataEnvio(LocalDateTime.now());
        protocolo.setNormasDeRefrencia(normasDeReferenciaService.findById(norma));
        protocolo.setEntidadeReguladora(agenciaReguladora);
        protocolo.setAnoReferencia(anoReferencia);
        protocoloService.criarProtocolo(protocolo);
        protocolo = protocoloService.gerarNumeroProtocolo(protocolo);
        protocoloService.criarProtocolo(protocolo);

        return protocolo;


    }

    public void atualizarAtoNormativo(AtoNormativoEriDTO atoNormativoEriDTO) throws NegocioException {
        Optional<AtoNormativoEri> atoNormativoEriOptional = atoNormativoRepository.findById(atoNormativoEriDTO.getId());
        if(atoNormativoEriOptional.isPresent()) {
            AtoNormativoEri atoNormativoEri = atoNormativoEriOptional.get();
            BeanUtils.copyProperties(atoNormativoEriDTO, atoNormativoEri, "id");

            setarValorDocumentosNormativos(atoNormativoEriDTO, atoNormativoEri);

            if (!atoNormativoEriDTO.getPrimeiroAnoDeColeta()) {
                Protocolo protocolo = gerarNovoProtocolo(atoNormativoEri.getAnoReferencia(), atoNormativoEri.getEntidadeReguladora(), NORMA_MATRIZ_RISCOS);

                ProtocoloAtoNormativo protocoloAtoNormativo = new ProtocoloAtoNormativo();;
                protocoloAtoNormativo.setProtocolo(protocolo);
                protocoloAtoNormativo.setAtoNormativoEri(atoNormativoEri);

                protocoloAtoNormativoService.salvar(protocoloAtoNormativo);
            }

            atoNormativoRepository.save(atoNormativoEri);

        }

    }

    private void setarValorDocumentosNormativos(AtoNormativoEriDTO atoNormativoEriDTO, AtoNormativoEri atoNormativoEri) {
        if(atoNormativoEriDTO.getDocumentosNormativosEri() != null){
            atoNormativoEriDTO.getDocumentosNormativosEri().forEach(d-> {
                d.setAtoNormativoEri(atoNormativoEri);
                d.setAceite(atoNormativoEri.getAtoAceite());
                documentoNormativoEriService.salvarDocumentoAtoNormativo(d);
            });
        }


    }

    public AtoNormativoEriDTO recuperarAtoNormativo (Long id) throws NegocioException {
        AtoNormativoEriDTO atoNormativoEriDTO = new AtoNormativoEriDTO();
        Optional<AtoNormativoEri> atoNormativoEriOptional = atoNormativoRepository.findById(id);
        if(atoNormativoEriOptional.isPresent()){
            atoNormativoEriDTO.setAgenciaReguladora(atoNormativoEriOptional.get().getEntidadeReguladora().getId());
            BeanUtils.copyProperties(atoNormativoEriOptional.get(), atoNormativoEriDTO);
        } else {
            throw new NegocioException("Ato Normativo não encontrado");
        }
        return atoNormativoEriDTO;
    }

    public List<AtoNormativoEri> listaAtosNormativosEri() throws NegocioException {
        return atoNormativoRepository.findAll().stream().sorted(Comparator.comparing(AtoNormativoEri::getId))
                .collect(Collectors.toList());
    }

    public List<AtoNormativoEriDTO>  consultarAtoNormativoPorAgenciaReguladora (Long id) throws NegocioException {

        List<AtoNormativoEri> atos =  atoNormativoRepository.findByAgenciaReguladora(id);
        List<AtoNormativoEriDTO> atosDto = new ArrayList<>();

        atos.forEach(a -> {
            AtoNormativoEriDTO atoNormativoEriDTO = new AtoNormativoEriDTO();
            BeanUtils.copyProperties(a, atoNormativoEriDTO);
            atoNormativoEriDTO.setItemFinalizado(finalizacaoPreenchimentoService.validarFinalizacao(a.getAnoReferencia(), a.getEntidadeReguladora().getId()));
            atoNormativoEriDTO.setNormaVencida(isNormaVencida(a));
            atosDto.add(atoNormativoEriDTO);

        });

        return atosDto;

    }


    public File gerarReciboAtoNormativo(Long idAto) {

        AtoNormativoEriDTO atoNormativoEri = recuperarAtoNormativo(idAto);

        Protocolo protocolo = protocoloAtoNormativoService.buscarPorIdAto(idAto).get().getProtocolo();


        AgenciaReguladora agenciaReguladora = protocolo.getEntidadeReguladora();


        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.getCnpj()))
                .dataRegistro(protocolo.getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.getNome())
                .numeroRecibo(protocolo.getNumeroProtocolo())
                .build();

        gerarRelatorioService.gerarReciboAtoNormativo(recibo, atoNormativoEri, agenciaReguladora, protocolo.getDataEnvio());

        return recibo.getRecibo();
    }

    public List<AtoNormativoEri> consultarAtoNormativoPorAno (Long ano) throws NegocioException {
        return atoNormativoRepository.findByAno(ano)
                .stream().sorted(Comparator.comparing(AtoNormativoEri::getId))
                .collect(Collectors.toList());
    }

    public String consultarNomeArquivoAtoNormativo(Long id) {
        return  documentoNormativoEriRepository.findById(id).get().getArquivo();
    }

    public File baixarReciboAtoNormativo(Long nuProtocolo) {

        Protocolo protocolo = protocoloService.buscarPorNumeroProtocolo(nuProtocolo).get();

        AtoNormativoEriDTO atoNormativoEri = recuperarAtoNormativoPorAgenciaAno(protocolo.getAnoReferencia(), protocolo.getEntidadeReguladora().getId());

        Optional<AgenciaReguladora> agenciaReguladora = agenciaReguladoraRepository
                .findById(atoNormativoEri.getAgenciaReguladora());


        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.get().getCnpj()))
                .dataRegistro(protocolo.getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.get().getNome())
                .numeroRecibo(protocolo.getNumeroProtocolo())
                .build();

        gerarRelatorioService.gerarReciboAtoNormativo(recibo, atoNormativoEri, agenciaReguladora.get(), protocolo.getDataEnvio());

        return recibo.getRecibo();
    }


    public AtoNormativoEriDTO recuperarAtoNormativoPorAgenciaAno (Long ano, Long agencia) throws NegocioException {
        AtoNormativoEriDTO atoNormativoEriDTO = new AtoNormativoEriDTO();
        AtoNormativoEri atoNormativoEri = atoNormativoRepository.findByAnoAgencia(ano, agencia);
        atoNormativoEriDTO.setAgenciaReguladora(atoNormativoEri.getEntidadeReguladora().getId());
        BeanUtils.copyProperties(atoNormativoEri, atoNormativoEriDTO);
        return atoNormativoEriDTO;
    }

    public AtoNormativoEriDTO recuperarAtoNormativoPorNuProtocolo (Long nuProtocolo){
        Optional<ProtocoloAtoNormativo> protocoloAtoNormativo = protocoloAtoNormativoService.buscarPorNuProtocolo(nuProtocolo);
        return protocoloAtoNormativo.map(protocolo -> recuperarAtoNormativo(protocolo.getId())).orElse(null);

    }

    public AtoNormativoEri buscarAtoNormativoValido (Long ano, Long idEri) throws NegocioException {
        return atoNormativoRepository.findByAnoAndAtivo(ano, idEri);
    }


    public List<AtoNormativoEri> consultarAtoNormativoPorAnoEEri (Long ano, Long eri) throws NegocioException {
        return atoNormativoRepository.findByAnoAndEri(ano, eri)
                .stream().sorted(Comparator.comparing(AtoNormativoEri::getId))
                .collect(Collectors.toList());
    }

    public List<AtoNormativoEriDTO> consultarAtoNormativoPorAnoEri(Long ano, Long idEri){
        List<AtoNormativoEri> atos =  atoNormativoRepository.findByAnoAndEri(ano, idEri);
        List<AtoNormativoEriDTO> atosDto = new ArrayList<>();

        atos.forEach(a -> {
            AtoNormativoEriDTO atoNormativoEriDTO = new AtoNormativoEriDTO();
            BeanUtils.copyProperties(a, atoNormativoEriDTO);
            atoNormativoEriDTO.setItemFinalizado(finalizacaoPreenchimentoService.validarFinalizacao(a.getAnoReferencia(), a.getEntidadeReguladora().getId()));
            atosDto.add(atoNormativoEriDTO);

        });

        return atosDto;

    }


    public boolean isNormaVencida(AtoNormativoEri atoNormativoEri) {
        List<ParametrosNRSDTO> parametrosNRSDTOS = parametrosNRSService.buscarTodos();

        return parametrosNRSDTOS.stream()
                .anyMatch(parametro ->
                        parametro.getNormasDeReferencia() != null &&
                                parametro.getNormasDeReferencia() == 1 &&
                                parametro.getAnoReferencia() != null &&
                                parametro.getAnoReferencia().equals(atoNormativoEri.getAnoReferencia()) &&
                                parametro.getVerificarDataEnvio()
                );
    }

}



// Fim do arquivo: AtoNormativoServiceImpl.java

// Arquivo: CadastranteService.java
// Caminho: \br\gov\ana\sarsb\service\CadastranteService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.CadastranteDTO;

public interface CadastranteService {
	
	void salvarCadastrante(CadastranteDTO cadastranteDTO) throws NegocioException;
	CadastranteDTO recuperarCadastrante(String cnpj) throws NegocioException;


	CadastranteDTO recuperarCadastranteid(long idmunicipio) throws NegocioException;

	void alterarCadastrante(CadastranteDTO cadastranteExistente);

}


// Fim do arquivo: CadastranteService.java

// Arquivo: CadastranteServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\CadastranteServiceImpl.java

package br.gov.ana.sarsb.service;

import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.CadastranteDTO;
import br.gov.ana.sarsb.model.entity.Cadastrante;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import br.gov.ana.sarsb.repository.CadastranteRepository;

@Service
public class CadastranteServiceImpl implements CadastranteService {

	@Autowired
	private CadastranteRepository cadastranteRepository;
	
	@Override
	public void salvarCadastrante(CadastranteDTO cadastranteDTO) throws NegocioException {
		try {
			Cadastrante cadastrante = new Cadastrante();
			BeanUtils.copyProperties(cadastranteDTO, cadastrante);
			cadastrante.setPrefeitura(new Prefeitura(cadastranteDTO.getPrefeitura().getId()));
			cadastranteRepository.save(cadastrante);
		} catch (Exception e) {
			throw new NegocioException("Erro ao salvar cadastrante", e);
		}
	}

	public void alterarCadastrante(CadastranteDTO cadastranteDTO) throws NegocioException {
		try {
			Cadastrante cadastranteExistente = cadastranteRepository.findById(cadastranteDTO.getId())
					.orElseThrow(() -> new NegocioException("Cadastrante não encontrado"));

			cadastranteExistente.setNome(cadastranteDTO.getNome());
			cadastranteExistente.setCpf(cadastranteDTO.getCpf());
			cadastranteExistente.setCargo(cadastranteDTO.getCargo());
			cadastranteExistente.setEmail(cadastranteDTO.getEmail());
			cadastranteExistente.setTelefone(cadastranteDTO.getTelefone());
			cadastranteExistente.setPossuiVinculoPrefeitura(cadastranteDTO.getPossuiVinculoPrefeitura());
			cadastranteExistente.setDepartamento(cadastranteDTO.getDepartamento());

			cadastranteRepository.save(cadastranteExistente);
		} catch (Exception e) {
			throw new NegocioException("Erro ao alterar cadastrante", e);
		}
	}





	@Override
	public CadastranteDTO recuperarCadastrante(String cnpj) throws NegocioException {
		return null;
	}


	@Override
	public CadastranteDTO recuperarCadastranteid(long idmunicipio) throws NegocioException {
		try {
			CadastranteDTO cadastranteDTO = new CadastranteDTO();
			Optional<Cadastrante> cadastranteOptional = cadastranteRepository.recuperarCadastranteid(idmunicipio);
			if(cadastranteOptional.isPresent()) {
				BeanUtils.copyProperties(cadastranteOptional.get(), cadastranteDTO);
				return cadastranteDTO;
			}
			return cadastranteDTO;
		} catch (Exception e) {
			throw new NegocioException("Erro ao recuperar cadastrante", e);
		}
	}



}


// Fim do arquivo: CadastranteServiceImpl.java

// Arquivo: CondicaoAtividadeService.java
// Caminho: \br\gov\ana\sarsb\service\CondicaoAtividadeService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.CondicaoAtividade;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public interface CondicaoAtividadeService {
    List<CondicaoAtividade> findAll();

    Optional<CondicaoAtividade> findById(Long id);

    CondicaoAtividade save(CondicaoAtividade condicaoAtividade);

    void deleteById(Long id);

    List<CondicaoAtividade> findAllByConformidadeServicoId(Long conformidadeId);

    List<CondicaoAtividade> findAllByServicoReguladoId(Long servicoReguladoId);

    void deleteAllById(List<Long> id);
}


// Fim do arquivo: CondicaoAtividadeService.java

// Arquivo: CondicaoAtividadeServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\CondicaoAtividadeServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.CondicaoAtividade;
import br.gov.ana.sarsb.repository.CondicaoAtividadeRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class CondicaoAtividadeServiceImpl implements CondicaoAtividadeService {

    private final CondicaoAtividadeRepository repository;

    public CondicaoAtividadeServiceImpl(CondicaoAtividadeRepository repository) {
        this.repository = repository;
    }

    public List<CondicaoAtividade> findAll() {
        return repository.findAll();
    }

    public Optional<CondicaoAtividade> findById(Long id) {
        return repository.findById(id);
    }

    public CondicaoAtividade save(CondicaoAtividade condicaoAtividade) {
        return repository.save(condicaoAtividade);
    }

    public void deleteById(Long id) {
        repository.deleteById(id);
    }

    public List<CondicaoAtividade> findAllByConformidadeServicoId(Long conformidadeId) {
        return repository.findAllByConformidadeServicoId(conformidadeId);
    }

    public List<CondicaoAtividade> findAllByServicoReguladoId(Long servicoReguladoId) {
        return repository.findAllByServicoReguladoId(servicoReguladoId);
    }

    public void deleteAllById(List<Long> idList) {
        repository.deleteAllById(idList);
    }

}

// Fim do arquivo: CondicaoAtividadeServiceImpl.java

// Arquivo: ConformidadeEntidadeService.java
// Caminho: \br\gov\ana\sarsb\service\ConformidadeEntidadeService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.ConformidadeEntidadeDTO;
import br.gov.ana.sarsb.model.entity.ConformidadeEntidade;
import org.apache.poi.ss.usermodel.Workbook;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.util.List;

public interface ConformidadeEntidadeService {
    List<ConformidadeEntidadeDTO> listarConformidadesPorEri(Long id);

    List<ConformidadeEntidadeDTO> listarConformidadesPorEriAno(Long id, Long ano);

    ConformidadeEntidade consultarConformidadePorId(Long id);

    void atualizarConformidade(ConformidadeEntidadeDTO conformidadeEntidade);

    File gerarReciboConformidade(Long idConformidade);


    void salvarConformidade(ConformidadeEntidadeDTO conformidadeEntidade);

    File gerarReciboConformidadeSegundaAba(Long idConformida, Long ano);

    Workbook gerarRelatorioXLS(Long idAgenciaReguladora,Long ano, HttpServletResponse response);

    Boolean isReplicacaoValida(Long idConformidade, String uf, String ufDesc, Long idAgenciaReguladora, Long ano);
}


// Fim do arquivo: ConformidadeEntidadeService.java

// Arquivo: ConformidadeEntidadeServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ConformidadeEntidadeServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.ConformidadeEntidadeDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.FiltroConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.repository.CondicaoAtividadeRepository;
import br.gov.ana.sarsb.repository.ConformidadeEntidadeRepository;
import br.gov.ana.sarsb.repository.DocumentoCondicoesGeraisRepository;
import br.gov.ana.sarsb.util.ConverterUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ConformidadeEntidadeServiceImpl implements ConformidadeEntidadeService {



    @Autowired
    ConformidadeEntidadeRepository conformidadeEntidadeRepository;

    @Autowired
    DocumentoCondicoesGeraisService documentoCondicoesGeraisService;

    @Autowired
    DocumentoCondicoesGeraisRepository documentoCondicoesGeraisRepository;

    @Autowired
    AgenciaReguladoraRepository agenciaReguladoraRepository;

    @Autowired
    private GerarRelatorioService gerarRelatorioService;

    @Autowired
    private NormasDeReferenciaService normasDeReferenciaService;

    @Autowired
    private ProtocoloService protocoloService;

    @Autowired
    private ProtocoloConformidadeService protocoloConformidadeService;

    @Autowired
    public CondicaoAtividadeRepository condicaoAtividadeRepository;

    @Autowired
    private ConformidadeServicoService conformidadeServicoService;

    @Autowired
    PrestadorService prestadorService;

    @Autowired
    private TipoSubServicosReguladosService tipoSubServicosReguladosService;

    @Autowired
    private FinalizacaoPreenchimentoService finalizacaoPreenchimentoService;

    @Override
    public List<ConformidadeEntidadeDTO> listarConformidadesPorEri(Long id) {
        List<ConformidadeEntidade> list = conformidadeEntidadeRepository.findAllByAgenciaReguladora(id);
        List<ConformidadeEntidadeDTO> listDto = convertConformidadeEntidadeDto(list);
        return listDto;
    }

    public Optional<ConformidadeServico> findById(Long id) {
        return conformidadeServicoService.findById(id);
    }

    public List<ConformidadeEntidadeDTO> listarConformidadesPorEriAno(Long id, Long ano) {
        List<ConformidadeEntidade> list = conformidadeEntidadeRepository.findAllByAgenciaReguladoraAndYear(id, ano);
        List<ConformidadeEntidadeDTO> listDto = convertConformidadeEntidadeDto(list);

        return listDto;
    }

    private List<ConformidadeEntidadeDTO> convertConformidadeEntidadeDto(List<ConformidadeEntidade> list) {
        List<ConformidadeEntidadeDTO> listDto = new ArrayList<>();
        list.forEach(e -> {
            Boolean itemFinalizado = finalizacaoPreenchimentoService.validarFinalizacao(e.getAnoColeta(), e.getEntidadeReguladora().getId());
            ConformidadeEntidadeDTO ce = new ConformidadeEntidadeDTO();
            ce.setId(e.getId());
            ce.setAnoColeta(e.getAnoColeta());
            ce.setIndicativoAceite(e.getIndicativoAceite());
            ce.setDescricaoMotivo(e.getDescricaoMotivo());
            ce.setIndicativoDeclaro(e.getIndicativoDeclaro());
            ce.setEntidadeReguladora(e.getEntidadeReguladora());
            ce.setAnoFinalizado(itemFinalizado);
            listDto.add(ce);

        });
        return listDto;
    }




    public ConformidadeEntidade consultarConformidadePorId(Long id){
        return conformidadeEntidadeRepository.findById(id).get();

    }
    public List<ConformidadeEntidade> consultarAngenciaReguladora(Long id){
        return conformidadeEntidadeRepository.findAllByAgenciaReguladora(id);

    }



    public void atualizarConformidade(ConformidadeEntidadeDTO conformidadeEntidade){
        ConformidadeEntidade entidade = new ConformidadeEntidade();
        BeanUtils.copyProperties(conformidadeEntidade, entidade);
        salvarConformidade(entidade);
        criarProtocoloConformidade(entidade);
        salvarDocumentos(conformidadeEntidade.getDocumentosCondicoesGerais(), entidade, conformidadeEntidade);
    }

    private void salvarConformidade(ConformidadeEntidade conformidadeEntidade) {
        conformidadeEntidadeRepository.save(conformidadeEntidade);
    }

    public void salvarConformidade(ConformidadeEntidadeDTO conformidadeEntidadeDTO){
        ConformidadeEntidade entidade = new ConformidadeEntidade();
        Optional<AgenciaReguladora> agenciaReguladoraOptional = agenciaReguladoraRepository.findByCnpj(conformidadeEntidadeDTO.getCnpj());
        conformidadeEntidadeDTO.setEntidadeReguladora(agenciaReguladoraOptional.get());
        BeanUtils.copyProperties(conformidadeEntidadeDTO, entidade);
        salvarConformidade(entidade);
        salvarDocumentos(conformidadeEntidadeDTO.getDocumentosCondicoesGerais(), entidade, conformidadeEntidadeDTO);

    }

    private void salvarDocumentos(List<DocumentoCondicoesGerais> documentos,
                                  ConformidadeEntidade entidade,
                                  ConformidadeEntidadeDTO conformidadeEntidade){
         if(documentos != null){
            documentos.stream().filter(dos -> dos.getNome() != null).forEach(d -> {
                DocumentoCondicoesGerais dc = new DocumentoCondicoesGerais();
                dc.setNome(d.getNome());
                dc.setDescricao(d.getDescricao());
                dc.setDtInclusao(LocalDateTime.now());
                dc.setConformidadeEntidade(entidade);
                dc.setLinkOficial(d.getLinkOficial());
                documentoCondicoesGeraisRepository.save(dc);
            });
        } else if (conformidadeEntidade.getLinkOficial() != null) {
             DocumentoCondicoesGerais dc = new DocumentoCondicoesGerais();
             dc.setNome("Não informado.");
             dc.setDescricao("Não informado.");
             dc.setDtInclusao(LocalDateTime.now());
             dc.setConformidadeEntidade(entidade);
             dc.setLinkOficial(conformidadeEntidade.getLinkOficial());
             documentoCondicoesGeraisRepository.save(dc);
         }
    }

    public File gerarReciboConformidade(Long idConformidade) {
        ConformidadeEntidade conformidadeEntidade = consultarConformidadePorId(idConformidade);
        ProtocoloConformidade protocoloConformidade =
                protocoloConformidadeService.buscarPorIdConformidade(idConformidade).get();

        Optional<AgenciaReguladora> agenciaReguladora = agenciaReguladoraRepository
                .findById(conformidadeEntidade.getEntidadeReguladora().getId());

        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.get().getCnpj()))
                .dataRegistro(protocoloConformidade.getProtocolo().getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.get().getNome())
                .numeroRecibo(protocoloConformidade.getProtocolo().getNumeroProtocolo())
                .build();

        gerarRelatorioService.gerarReciboConformidade(recibo, conformidadeEntidade,
                agenciaReguladora.get(), protocoloConformidade.getProtocolo().getDataEnvio());

        return recibo.getRecibo();
    }

    public File gerarReciboConformidadeSegundaAba(Long idAgenciaRegulador, Long ano){

        List<ConformidadeEntidade> conformidadeEntidades = consultarAngenciaReguladora(idAgenciaRegulador);

        Optional<AgenciaReguladora> agenciaReguladora = buscarAgenciaReguladora(conformidadeEntidades);

        FiltroConformidadeServicoDTO filtroConformidadeServicoDTO = monstarFiltroConformidadeServicoDTO(conformidadeEntidades, idAgenciaRegulador, ano);

        List<ConformidadeServicoDTO> conformidadeServicoDTOS = conformidadeServicoService.pesquisar(filtroConformidadeServicoDTO);

        List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS = buscarConformidadeEntidadeServicosDTOS(conformidadeServicoDTOS);

        List<Optional<ProtocoloConformidade>> protocoloConformidades = buscarProtocoloConformidade(conformidadeEntidades, ano);

        List<CondicaoAtividade> condicaoAtividades = buscarCondicaoAtividades(conformidadeServicoDTOS);

        Optional<ProtocoloConformidade> protocoloConformidade = protocoloConformidades.stream()
                .filter(Optional::isPresent) // Filtra apenas os Optionals que têm valor
                .map(Optional::get) // Extrai o valor de cada Optional
                .filter(protocoloConf -> protocoloConf.getId() != null && protocoloConf.getConformidadeEntidade().getAnoColeta().equals(ano)) // Filtra protocolos com ID não nulo
                .findFirst();

        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.get().getCnpj()))
                .dataRegistro(protocoloConformidade.get().getProtocolo().getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.get().getNome())
                .numeroRecibo(protocoloConformidade.get().getProtocolo().getNumeroProtocolo())
                .build();

        gerarRelatorioService.gerarReciboConformidadeSegundaAba(recibo, protocoloConformidade.get().getConformidadeEntidade(), agenciaReguladora.get(), protocoloConformidade.get().getProtocolo().getDataEnvio(), conformidadeEntidadeServicosDTOS, conformidadeServicoDTOS, condicaoAtividades);
        return recibo.getRecibo();

    }


    private Protocolo gerarNovoProtocolo(Long anoReferencia , AgenciaReguladora agenciaReguladora, Long norma) {
        Protocolo protocolo = new Protocolo();
        protocolo.setNumeroProtocolo("Protocolo");
        protocolo.setDataEnvio(LocalDateTime.now());
        protocolo.setNormasDeRefrencia(normasDeReferenciaService.findById(norma));
        protocolo.setEntidadeReguladora(agenciaReguladora);
        protocolo.setAnoReferencia(anoReferencia);
        protocoloService.criarProtocolo(protocolo);
        protocolo = protocoloService.gerarNumeroProtocolo(protocolo);
        protocoloService.criarProtocolo(protocolo);

        return protocolo;
    }

    public void criarProtocoloConformidade(ConformidadeEntidade conformidadeEntidade) {
        Protocolo protocolo = gerarNovoProtocolo(conformidadeEntidade.getAnoColeta(),
                conformidadeEntidade.getEntidadeReguladora(), 2L);

        ProtocoloConformidade protocoloConformidade = new ProtocoloConformidade();
        protocoloConformidade.setProtocolo(protocolo);
        protocoloConformidade.setConformidadeEntidade(conformidadeEntidade);
        protocoloConformidadeService.salvar(protocoloConformidade);
    }



    private void validarSeExistePrestador(CondicaoAtividade ca) {
        Long codigoPrestadorNovo = ca.getServicoRegulado().getCodigoPrestadornovo();

        String nomePrestador = Optional.ofNullable(codigoPrestadorNovo)
                .flatMap(prestadorService::findById)
                .map(Prestador::getNomeRazaoSocial)
                .orElse(" ");

        ca.setNomePrestador(nomePrestador);
    }


    private Optional<AgenciaReguladora> buscarAgenciaReguladora( List<ConformidadeEntidade> conformidadeEntidades){

        Optional<AgenciaReguladora> agenciaReguladora = conformidadeEntidades.stream()
                .filter(conformidadeEntidade -> {
                    AgenciaReguladora entidadeReguladora = conformidadeEntidade.getEntidadeReguladora();
                    int currentYear = LocalDate.now().getYear(); // Obtém o ano atual corretamente
                    return entidadeReguladora != null && conformidadeEntidade.getAnoColeta() == currentYear && entidadeReguladora.getId() != null;
                }) // Filtra pelo ano de coleta e se o ID não é nulo
                .map(conformidadeEntidade -> conformidadeEntidade.getEntidadeReguladora().getId()) // Mapeia para o ID da entidade reguladora
                .findFirst() // Pega o primeiro ID válido
                .flatMap(agenciaReguladoraRepository::findById);

        return agenciaReguladora;

    }

    private FiltroConformidadeServicoDTO monstarFiltroConformidadeServicoDTO( List<ConformidadeEntidade> conformidadeEntidades, Long idAgenciaRegulador, Long ano){
        FiltroConformidadeServicoDTO filtroConformidadeServicoDTO = conformidadeEntidades.stream()
                .filter(conformidadeEntidade -> conformidadeEntidade.getAnoColeta() != null && conformidadeEntidade.getAnoColeta().equals(ano)) // Filtra entidades que possuem ano de coleta
                .map(conformidadeEntidade -> {
                    // Cria e configura o ConformidadeServicoDTO
                    FiltroConformidadeServicoDTO dto = new FiltroConformidadeServicoDTO();
                    dto.setAnoColetaFiltro(conformidadeEntidade.getAnoColeta()); // Define o ano de coleta
                    dto.setIdAgencia(idAgenciaRegulador); // Define o ID da agência reguladora
                    return dto; // Retorna o DTO configurado
                })
                .findFirst() // Pega o primeiro DTO válido
                .orElse(null); // Se não encontrar, retorna null

        return filtroConformidadeServicoDTO;
    }

    private  List<ConformidadeEntidadeServicosDTO> buscarConformidadeEntidadeServicosDTOS(List<ConformidadeServicoDTO> conformidadeServicoDTOS){

        List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS = conformidadeServicoDTOS.stream()
                .map(conformidadeServicoDTO -> {
                    try {
                        return conformidadeServicoService.buscarConformidadePorId(conformidadeServicoDTO.getId(), conformidadeServicoDTO.getAnoColeta());
                    } catch (ParseException e) {
                        throw new RuntimeException(e);
                    }
                }) // Mapeia cada DTO para o resultado da busca
                .collect(Collectors.toList());

        return conformidadeEntidadeServicosDTOS;
    }

    private List<Optional<ProtocoloConformidade>> buscarProtocoloConformidade(List<ConformidadeEntidade> conformidadeEntidades, Long ano) {
        List<Optional<ProtocoloConformidade>> protocolosConformidade = conformidadeEntidades.stream()
                .filter(conformidadeEntidade -> {
                    AgenciaReguladora entidadeReguladora = conformidadeEntidade.getEntidadeReguladora();
                    return entidadeReguladora != null
                            && entidadeReguladora.getId() != null;
                }) // Filtra pelo ano de coleta e se o ID não é nulo
                .map(conformidadeEntidade -> conformidadeEntidade.getId()) // Mapeia para o ID da entidade reguladora
                .map(protocoloConformidadeService::buscarPorIdConformidade) // Busca o protocolo por ID, retornando um Optional
                .collect(Collectors.toList()); // Coleta os resultados em uma lista de Optional

        return protocolosConformidade;
    }


    public List<CondicaoAtividade> buscarCondicaoAtividades(List<ConformidadeServicoDTO> conformidadeServicoDTOS){
        List<CondicaoAtividade> condicaoAtividades =  conformidadeServicoDTOS.stream()
                .flatMap(conformidadeServicoDTO -> condicaoAtividadeRepository.findAllByConformidadeServicoId(conformidadeServicoDTO.getId()).stream())
                .collect(Collectors.toList());
        return condicaoAtividades;

    }



    public Workbook gerarRelatorioXLS(Long idAgenciaReguladora,Long ano, HttpServletResponse response){
        // Usar o repositório para obter os dados da planilha
        List<Object[]> dadosBancoList = conformidadeEntidadeRepository.findDadosRelatorioByAgr(idAgenciaReguladora, ano);

        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Relatório");

        // Crie o cabeçalho
        Row headerRow = sheet.createRow(0);

        headerRow.createCell(0).setCellValue("Ano de Coleta");
        headerRow.createCell(1).setCellValue("UF");
        headerRow.createCell(2).setCellValue("Município");
        headerRow.createCell(3).setCellValue("Serviço");
        headerRow.createCell(4).setCellValue("Atividades");
        headerRow.createCell(5).setCellValue("Prestador");
        headerRow.createCell(6).setCellValue("Período da Prestação");
        headerRow.createCell(7).setCellValue("Conformidade das atividades");
        headerRow.createCell(8).setCellValue("Motivo do não atendimento (2º aba)");
        headerRow.createCell(9).setCellValue("Data Registro");
        headerRow.createCell(10).setCellValue("Os normativos da entidade reguladora atendem às diretrizes da NR nº 7/2024 da ANA?");
        headerRow.createCell(11).setCellValue("Motivo do não atendimento (1º aba)");




        int rowNum = 1; // Comece na segunda linha, pois a primeira linha é o cabeçalho
        for (Object[] dados : dadosBancoList) {
            Row dataRow = sheet.createRow(rowNum++);
            int cellNum = 0;
            for (Object value : dados) {
                String cellValue = value != null ? value.toString() : "Não informado"; // Tratar campos nulos como vazios
                dataRow.createCell(cellNum++).setCellValue(cellValue);
            }
        }

        // Agora, escreva o Workbook no HttpServletResponse
        try {
            response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setHeader("Content-Disposition", "attachment; filename=relatorio-dados-cadastrais.xlsx");

            OutputStream outputStream = response.getOutputStream();
            workbook.write(outputStream);
            outputStream.close();

            // Fechar o Workbook
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return workbook;
    }

    public Boolean isReplicacaoValida(Long idConformidade, String uf, String ufDesc, Long idAgenciaReguladora, Long ano) {
        List<TipoServicoReguladoDocumentoDTO> servicosCadastroERi = tipoSubServicosReguladosService.listarPorEriMunicipioSluSmrsu(idAgenciaReguladora, uf, ufDesc, ano);
        List<CondicaoAtividade> atividadesConformidade = condicaoAtividadeRepository.findAllByConformidadeServicoId(idConformidade);

        servicosCadastroERi.sort(Comparator.comparing(TipoServicoReguladoDocumentoDTO::getId));
        atividadesConformidade.sort(Comparator.comparing(a -> a.getServicoRegulado().getId()));

        if (servicosCadastroERi.size() != atividadesConformidade.size()) {
            return false;
        }

        if (!servicosCadastroERi.get(servicosCadastroERi.size() - 1).getVencidos().isEmpty()) {
            return false;
        }

        Map<Long, CondicaoAtividade> atividadesMap = atividadesConformidade.stream()
                .collect(Collectors.toMap(
                        atividade -> atividade.getServicoRegulado().getId(),
                        atividade -> atividade
                ));

        for (TipoServicoReguladoDocumentoDTO servico : servicosCadastroERi) {
            CondicaoAtividade atividadeCorrespondente = atividadesMap.get(servico.getId());

            if (atividadeCorrespondente == null) {
                return false;
            }

            if (!Objects.equals(servico.getCodigoServico(), atividadeCorrespondente.getTipoServico())
                    || !Objects.equals(servico.getCodigoPrestadornovo(), atividadeCorrespondente.getIdPrestador())
                    || !Objects.equals(servico.getDescricaoAtividade(), atividadeCorrespondente.getNomeServico())
                    || !Objects.equals(servico.getDataInicioPrestador(), atividadeCorrespondente.getDataInicioPrestacao())
                    || !Objects.equals(servico.getDataFimPrestador(), atividadeCorrespondente.getDataFimPrestacao())) {
                return false;
            }
        }

        return true;
    }
}

// Fim do arquivo: ConformidadeEntidadeServiceImpl.java

// Arquivo: ConformidadeServicoService.java
// Caminho: \br\gov\ana\sarsb\service\ConformidadeServicoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.FiltroConformidadeServicoDTO;
import br.gov.ana.sarsb.model.entity.CondicaoAtividade;
import br.gov.ana.sarsb.model.entity.ConformidadeServico;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.util.List;
import java.util.Optional;

@Service
public interface ConformidadeServicoService {
    List<ConformidadeServicoDTO> findAll();

    Optional<ConformidadeServico> findById(Long id);

    ConformidadeServico save(ConformidadeServico conformidadeServico);

    void deleteById(Long id);

    List<ConformidadeServicoDTO> findAllByAgenciaReguladoraIdAndAnoColeta(Long agenciaReguladoraId, Long anoColeta);

    List<ConformidadeServicoDTO> pesquisar(FiltroConformidadeServicoDTO conformidadeServicoDTO) throws NegocioException;

    void salvarConformidade(ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO);

    ConformidadeEntidadeServicosDTO buscarConformidadePorId(Long id, Long ano) throws ParseException;

    void atualizarConformidade(ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO);

    Boolean existeConformidadePorMuniUf(String municipio, String uf, Long idAgencia, Long ano);

    void finalizarConformidade(List<ConformidadeServicoDTO> listaConformidades);

    Boolean existePreenchimentoFinalizado(Long ano, Long agencia);

    List<ConformidadeServico> buscarProtocoloContratos(Long idAgr);

    void replicarConformidade(ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO);

    void habilitarPreenchimento(List<ConformidadeServicoDTO> listaConformidades);

    Boolean validarMunicipioImportado(Long agenciaReguladoraId, Long anoColeta, Long codIbge);
    List<CondicaoAtividade> retornaAtivadadesCadastradas(Long agenciaReguladoraId, Long anoColeta, String uf, String municipio);
}


// Fim do arquivo: ConformidadeServicoService.java

// Arquivo: ConformidadeServicoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ConformidadeServicoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.MunicipioIbgeDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicosReguladosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.FiltroConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.*;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;
import org.hibernate.Hibernate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
public class ConformidadeServicoServiceImpl implements ConformidadeServicoService {

    private final ConformidadeServicoRepository repository;

    @Autowired
    public AgenciaReguladoraRepository agenciaReguladoraRepository;

    @Autowired
    public MunicipioService municipioService;

    @Autowired
    public ServicoReguladoRepository servicoReguladoRepository;

    @Autowired
    public CondicaoAtividadeRepository condicaoAtividadeRepository;

    @Autowired
    PrestadorService prestadorService;

    @Autowired
    public CondicaoAtividadeService condicaoAtividadeService;

    @Autowired
    public ConformidadeEntidadeRepository conformidadeEntidadeRepository;

    public ConformidadeServicoServiceImpl(ConformidadeServicoRepository repository) {
        this.repository = repository;
    }

    public List<ConformidadeServicoDTO> findAll() {
        List<ConformidadeServicoDTO> conformidadeServicoDTOS;
        List<ConformidadeServico> conformidadeServicos = repository.findAll();

        conformidadeServicoDTOS = conformidadeServicos.stream().map(this::convertToDTO).collect(Collectors.toList());

        return conformidadeServicoDTOS;
    }

    public Optional<ConformidadeServico> findById(Long id) {
        return repository.findById(id);
    }

    public ConformidadeServico save(ConformidadeServico conformidadeServico) {
        return repository.save(conformidadeServico);
    }

    public void deleteById(Long id) {
        ConformidadeServico conformidadeServico = repository.findById(id).orElseThrow(() -> new NegocioException("Conformidade não encontrada"));
        List<CondicaoAtividade> condicaoAtividades = condicaoAtividadeRepository.findAllByConformidadeServicoId(id);

        removerCondicoesAtividades(condicaoAtividades);
        removerConformidade(conformidadeServico);
    }

    public List<ConformidadeServicoDTO> findAllByAgenciaReguladoraIdAndAnoColeta(Long agenciaReguladoraId, Long anoColeta) {
        List<ConformidadeServicoDTO> conformidadeServicoDTOS;
        List<ConformidadeServico> conformidadeServicos = repository.findAllByAgenciaReguladoraIdAndAnoColeta(agenciaReguladoraId, anoColeta);

        conformidadeServicoDTOS = conformidadeServicos.stream().map(this::convertToDTO).collect(Collectors.toList());

        return conformidadeServicoDTOS;
    }

    public ConformidadeServicoDTO convertToDTO(ConformidadeServico conformidadeServico) {
        ConformidadeServicoDTO dto = new ConformidadeServicoDTO();

        dto.setId(conformidadeServico.getId());
        dto.setDataRegistro(conformidadeServico.getDataRegistro());
        dto.setAnoColeta(conformidadeServico.getAnoColeta());
        dto.setDescricaoInconformidadesLu(conformidadeServico.getDescricaoInconformidadesLu());
        dto.setDescricaoInconformidadesMrsu(conformidadeServico.getDescricaoInconformidadesMrsu());
        dto.setAgenciaReguladora(new AgenciaReguladoraDTO(conformidadeServico.getAgenciaReguladora().getId()));
        MunicipioIbgeDTO municipioIbgeDTO = new MunicipioIbgeDTO();
        municipioIbgeDTO.setCodigoIbge(conformidadeServico.getMunicipioIBGE().getCodigoIbge());
        municipioIbgeDTO.setUf(conformidadeServico.getMunicipioIBGE().getUf());
        municipioIbgeDTO.setNomeMunicipio(conformidadeServico.getMunicipioIBGE().getNomeMunicipio());
        dto.setMunicipioIbge(municipioIbgeDTO);
        dto.setTipoServico(conformidadeServico.getTipoServico());
        dto.setItemFinalizado(conformidadeServico.getDataFinalizacao() != null ? Boolean.TRUE : Boolean.FALSE);

        return dto;
    }

    public List<ConformidadeServicoDTO> pesquisar(FiltroConformidadeServicoDTO filtro) throws NegocioException {
        List<ConformidadeServico> conformidadeServicos = repository.pesquisar(
                filtro.getIdAgencia(),
                filtro.getCidade() != null ? filtro.getCidade() : null,
                filtro.getAnoColetaFiltro(),
                filtro.getUfSigla(),
                filtro.getServicoPrestado()
        );

        List<ConformidadeServicoDTO> conformidadeServicoDTOS = conformidadeServicos.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());

        return conformidadeServicoDTOS;
    }

    public void salvarConformidade(ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO) {
        ConformidadeServico conformidadeServico = salvarConformidadeServico(conformidadeEntidadeServicosDTO);
        salvarCondicoesAtividades(conformidadeEntidadeServicosDTO.getAtividades(), conformidadeServico);


    }

    private ConformidadeServico salvarConformidadeServico(ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO) {
        ConformidadeServico cs = new ConformidadeServico();
        cs.setAnoColeta(conformidadeEntidadeServicosDTO.getAnoColeta());
        cs.setDataRegistro(conformidadeEntidadeServicosDTO.getDataRegistro());

        Municipio municipio = municipioService.pesquisarMunicipioPorNomeUf(conformidadeEntidadeServicosDTO.getMunicipioIbge(), conformidadeEntidadeServicosDTO.getUf());
        MunicipioIBGE municipioIBGE = new MunicipioIBGE();
        municipioIBGE.setCodigoIbge(Long.valueOf(municipio.getCodigoIBGE()));
        municipioIBGE.setNomeMunicipio(municipio.getNome());
        municipioIBGE.setUf(conformidadeEntidadeServicosDTO.getUf());

        cs.setMunicipioIBGE(municipioIBGE);
        Optional<AgenciaReguladora> agenciaReguladora = agenciaReguladoraRepository
                .findById(conformidadeEntidadeServicosDTO.getAgenciaReguladora());

        cs.setAgenciaReguladora(agenciaReguladora.get());
        cs.setDescricaoInconformidadesLu(conformidadeEntidadeServicosDTO.getDescricaoInconformidadesLu());
        cs.setDescricaoInconformidadesMrsu(conformidadeEntidadeServicosDTO.getDescricaoInconformidadesMrsu());
        cs.setTipoServico(conformidadeEntidadeServicosDTO.getTipoServico());
        return repository.save(cs);
    }


    private void salvarCondicoesAtividades(List<ConformidadeServicosReguladosDTO> atividades, ConformidadeServico conformidadeServico) {
        atividades.stream().forEach(a -> {
            CondicaoAtividade ca = new CondicaoAtividade();
            ca.setConformidadeServico(conformidadeServico);
            ca.setIsConforme(a.getConformidade());
            ca.setServicoRegulado(servicoReguladoRepository.findById(a.getId()).get());
            ca.setNomeServico(a.getDescricaoAtividade());
            ca.setIdPrestador(a.getCodigoPrestadornovo());
            ca.setDataInicioPrestacao(a.getDataInicioPrestador());
            ca.setDataFimPrestacao(a.getDataFimPrestador());
            ca.setTipoServico(a.getCodigoServico());
            validarSeExistePrestador(ca);
            condicaoAtividadeRepository.save(ca);
        });
    }

    private void validarSeExistePrestador(CondicaoAtividade ca) {
        Long codigoPrestadorNovo = ca.getServicoRegulado().getCodigoPrestadornovo();

        String nomePrestador = Optional.ofNullable(codigoPrestadorNovo)
                .flatMap(prestadorService::findById)
                .map(Prestador::getNomeRazaoSocial)
                .orElse(" ");

        ca.setNomePrestador(nomePrestador);
    }


    public ConformidadeEntidadeServicosDTO buscarConformidadePorId(Long id, Long ano) throws ParseException   {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        Date anoColeta = dateFormat.parse(ano+"-12-31");

        ConformidadeEntidadeServicosDTO dto = new ConformidadeEntidadeServicosDTO();
        ConformidadeServico conf = findById(id).get();
        Hibernate.initialize(conf.getMunicipioIBGE());
        dto.setMunicipioIbge(conf.getMunicipioIBGE().getNomeMunicipio());
        dto.setUf(conf.getMunicipioIBGE().getUf());
        dto.setCodigoIBge(conf.getMunicipioIBGE().getCodigoIbge());
        dto.setDescricaoInconformidadesLu(conf.getDescricaoInconformidadesLu());
        dto.setDescricaoInconformidadesMrsu(conf.getDescricaoInconformidadesMrsu());
        dto.setDataRegistro(conf.getDataRegistro());
        dto.setId(conf.getId());
        dto.setAnoColeta(conf.getAnoColeta());



        List<CondicaoAtividade> listaAtividades = condicaoAtividadeRepository.findAllByConformidadeServicoId(id);
        List<ConformidadeServicosReguladosDTO> listaServicos = new ArrayList<>();
        listaAtividades.forEach(aa -> {

            Hibernate.initialize(aa.getServicoRegulado());
            ConformidadeServicosReguladosDTO servico = new ConformidadeServicosReguladosDTO();
            servico.setId(aa.getId());
            servico.setConformidade(aa.getIsConforme());
            servico.setCodigoServico(aa.getServicoRegulado().getCodigoServico());
            servico.setDescricaoAtividade(aa.getServicoRegulado().getDescricaoAtividade());
            servico.setCodigoPrestadornovo(aa.getServicoRegulado().getCodigoPrestadornovo());
            servico.setNomePrestador(aa.getNomePrestador());
            servico.setDatainicioServico(aa.getDataInicioPrestacao());
            servico.setDataFimServico(aa.getDataFimPrestacao());
            servico.setServicoReguladoId(aa.getServicoRegulado().getId());
            validarSeExistePrestador(aa);
            listaServicos.add(servico);

            if (aa.getDataFimPrestacao() != null){
                LocalDate localDate = aa.getDataFimPrestacao().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                if(localDate.getYear() != ano){
                    if(aa.getDataFimPrestacao().compareTo(anoColeta) < 0){
                       listaServicos.remove(servico);
                    }
                }
            }


        });

        dto.setAtividades(listaServicos);
        return dto;
    }

    public void atualizarConformidade(ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO) {
        ConformidadeServico conf = findById(conformidadeEntidadeServicosDTO.getId()).get();
        conf.setDescricaoInconformidadesMrsu(conformidadeEntidadeServicosDTO.getDescricaoInconformidadesMrsu());
        conf.setDescricaoInconformidadesLu(conformidadeEntidadeServicosDTO.getDescricaoInconformidadesLu());
        repository.save(conf);

        conformidadeEntidadeServicosDTO.getAtividades().forEach(a -> {
            CondicaoAtividade ca = condicaoAtividadeRepository.findById(a.getId()).get();
            ca.setIsConforme(a.getConformidade());
            condicaoAtividadeRepository.save(ca);
        });
    }

    public Boolean existeConformidadePorMuniUf(String municipio, String uf, Long idAgencia, Long ano){
        return repository.existeConformidadePorMuniUf(municipio, uf, idAgencia, ano);
    }

    public void removerCondicoesAtividades(List<CondicaoAtividade> condicaoAtividades) {
        List<Long> idList = condicaoAtividades.stream().map(CondicaoAtividade::getId).collect(Collectors.toList());
        condicaoAtividadeService.deleteAllById(idList);
    }

    public void removerConformidade(ConformidadeServico conformidadeServico) {
        repository.deleteById(conformidadeServico.getId());
    }

    public void finalizarConformidade(List<ConformidadeServicoDTO> listaConformidades){

        listaConformidades.forEach(c -> {
            ConformidadeServico cs = repository.findById(c.getId()).orElseThrow(() -> new RuntimeException("ConformidadeServico não encontrado"));

            boolean naoEstaConforme = condicaoAtividadeRepository.findAllByConformidadeServicoId(cs.getId())
                    .stream()
                    .anyMatch(ca -> !ca.getIsConforme());

            cs.setIsConforme(!naoEstaConforme);
            cs.setDataFinalizacao(new Date());

            repository.save(cs);


        });


    }

    public Boolean existePreenchimentoFinalizado(Long ano, Long agencia){
        return repository.existePreenchimentoFinalizado(ano, agencia);
    }

    @Override
    public List<ConformidadeServico> buscarProtocoloContratos(Long idAgr) {
        return repository.findByAgenciaReguladoraId(idAgr);
    }

    public void replicarConformidade(ConformidadeEntidadeServicosDTO conformidadeEntidadeServicosDTO) {
        ConformidadeServico conformidadeServico = salvarConformidadeServico(conformidadeEntidadeServicosDTO);
        replicarCondicoesAtividades(conformidadeEntidadeServicosDTO.getAtividades(), conformidadeServico);
    }

    private void replicarCondicoesAtividades(List<ConformidadeServicosReguladosDTO> atividades, ConformidadeServico conformidadeServico) {
        atividades.stream().forEach(a -> {
            CondicaoAtividade ca = new CondicaoAtividade();
            ca.setConformidadeServico(conformidadeServico);
            ca.setIsConforme(a.getConformidade());
            ca.setServicoRegulado(servicoReguladoRepository.findById(a.getServicoReguladoId()).get());
            ca.setNomeServico(a.getDescricaoAtividade());
            ca.setIdPrestador(a.getCodigoPrestadornovo());
            ca.setDataInicioPrestacao(a.getDatainicioServico());
            ca.setDataFimPrestacao(a.getDataFimServico());
            ca.setTipoServico(a.getCodigoServico());
            validarSeExistePrestador(ca);
            condicaoAtividadeRepository.save(ca);
        });
    }

    public void habilitarPreenchimento(List<ConformidadeServicoDTO> listaConformidades) {
        listaConformidades.forEach(c -> {
            ConformidadeServico cs = repository.findById(c.getId()).orElseThrow(() -> new RuntimeException("Conformidade Serviço não encontrada."));
            cs.setIsConforme(null);
            cs.setDataFinalizacao(null);
            repository.save(cs);
        });
    }



    public Boolean validarMunicipioImportado(Long agenciaReguladoraId, Long anoColeta, Long codIbge) {
        return repository.validarMunicipioImportado(agenciaReguladoraId, anoColeta, codIbge);
    }


    public List<CondicaoAtividade> retornaAtivadadesCadastradas(Long agenciaReguladoraId, Long anoColeta, String uf, String municipio){
        List<CondicaoAtividade> listaAtividades = condicaoAtividadeRepository.buscarAtividadesPor(agenciaReguladoraId,anoColeta,uf,municipio);
        return listaAtividades;
    }
}


// Fim do arquivo: ConformidadeServicoServiceImpl.java

// Arquivo: ContratoAditivoVinculadoService.java
// Caminho: \br\gov\ana\sarsb\service\ContratoAditivoVinculadoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoAditivoVinculadoDTO;
import br.gov.ana.sarsb.model.entity.Contrato;
import br.gov.ana.sarsb.model.entity.ContratoAditivoVinculado;

import java.io.IOException;
import java.util.List;

public interface ContratoAditivoVinculadoService {

    void salvarArquivoBanco(Contrato contrato, ContratoAditivoVinculadoDTO aditivoVinculadoDTO) throws NegocioException, IOException;

    List<ContratoAditivoVinculado> listarDocumentosPorContrato(Long idContrato) throws NegocioException;

    void removerNoBanco(Long idContrato);

}

// Fim do arquivo: ContratoAditivoVinculadoService.java

// Arquivo: ContratoAditivoVinculadoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ContratoAditivoVinculadoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoAditivoVinculadoDTO;
import br.gov.ana.sarsb.model.entity.Contrato;
import br.gov.ana.sarsb.model.entity.ContratoAditivoVinculado;
import br.gov.ana.sarsb.repository.ContratoAditivoVinculadoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.io.IOException;
import java.util.List;

@Service
@Transactional
public class ContratoAditivoVinculadoServiceImpl implements ContratoAditivoVinculadoService {

    @Autowired
    private ContratoAditivoVinculadoRepository repository;

    @Autowired
    private EntityManager entityManager;

    @Override
    public void salvarArquivoBanco(Contrato contrato, ContratoAditivoVinculadoDTO contratoDTO) throws NegocioException, IOException {
        ContratoAditivoVinculado contratoAditivoVinculado = new ContratoAditivoVinculado();

        contratoAditivoVinculado.setContrato(contrato);
        contratoAditivoVinculado.setNome(contratoDTO.getNome());
        contratoAditivoVinculado.setNormaList(contratoDTO.getNormaList());
        contratoAditivoVinculado.setDataAssinatura(contratoDTO.getDataAssinatura());
        contratoAditivoVinculado.setLinkAditivo(contratoDTO.getLinkAditivo());
        repository.save(contratoAditivoVinculado);
    }

    public List<ContratoAditivoVinculado> listarDocumentosPorContrato(Long idContrato) throws NegocioException {
        return repository.findAllByContratoId(idContrato);
    }

    @Override
    public void removerNoBanco(Long idContrato) {
        repository.deleteAllByContratoId(idContrato);
        entityManager.flush();
    }
}


// Fim do arquivo: ContratoAditivoVinculadoServiceImpl.java

// Arquivo: ContratoMatrizRiscoService.java
// Caminho: \br\gov\ana\sarsb\service\ContratoMatrizRiscoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ContratoMatrizRiscoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ContratoMatrizRiscoListDTO;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.QuestionarioDTO;
import br.gov.ana.sarsb.model.entity.ContratoMatrizRisco;
import org.apache.poi.ss.usermodel.Workbook;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.util.List;

public interface ContratoMatrizRiscoService {
    ContratoMatrizRisco salvar(ContratoMatrizRiscoDTO contratoMatrizRiscoDTO,
                               QuestionarioDTO questionarioDTO
                              ) throws NegocioException, IOException;

    ContratoMatrizRiscoDTO convertToDTO(ContratoMatrizRisco contrato) throws NegocioException;

    List<ContratoMatrizRiscoListDTO> listarPorIdAgencia(Long idAgenciaReguladora) throws NegocioException;

    ContratoMatrizRiscoDTO obterContratoPorIdMatrizRisco(Long idContratoMatrizRisco) throws NegocioException;

    File gerarReciboContratos(Long idContrato, Long ano);

    Workbook gerarRelatorioXLS(Long idAgenciaReguladora, HttpServletResponse response);
    ContratoMatrizRisco salvarImportacao(ContratoMatrizRiscoDTO contratoMatrizRiscoDTO, QuestionarioDTO questionarioDTO) throws NegocioException, IOException;

    ContratoMatrizRiscoDTO atualizar(ContratoMatrizRiscoDTO contratoMatrizRiscoDTO,
                                  QuestionarioDTO questionarioDTO
                                 ) throws NegocioException, IOException;
    void deletar(Long id) throws NegocioException, IOException;

    List<ContratoMatrizRisco> listarPorAnoReferencia(Long anoReferencia, Long idEri);

    List<ContratoMatrizRiscoListDTO> listarPorIdAgenciaEAnoReferencia(Long idAgenciaReguladora, Long anoReferencia) throws NegocioException;

    File baixarReciboContratos(Long nuProtocolo, Long ano);

    Boolean validarSevicosCadastroEri(ContratoMatrizRiscoDTO contratoMatrizRiscoDTO);
}


// Fim do arquivo: ContratoMatrizRiscoService.java

// Arquivo: ContratoService.java
// Caminho: \br\gov\ana\sarsb\service\ContratoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.*;
import br.gov.ana.sarsb.model.entity.ContratoDetalhamento;
import lombok.RequiredArgsConstructor;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
@Service
public interface ContratoService {
    List<ContratoDTO> listarContratorPor(Long idAgenciaReguladora) throws NegocioException;

    List<ContratoDTO> pesquisarContratos(FiltroContratoDTO filtro) throws NegocioException;

    ContratoDTO salvar(ContratoDTO dto, List<ContratoAditivoVinculadoDTO> aditivos) throws NegocioException, IOException;

    Long obterSequencial(Long idAgenciaReguladora);

    Workbook gerarRelatorioXLS(Long idAgenciaReguladora);

    ContratoDTO atualizar(Long id, ContratoDTO dto, List<ContratoAditivoVinculadoDTO> aditivos) throws NegocioException, IOException;

    ContratoDTO obterContratoPorId(Long id) throws NegocioException;

    void deletarContrato(Long id) throws NegocioException;

    ContratoDTO obterContratoPorCodigoInterno(String codigoInterno) throws NegocioException;

    ContratoDetalhadoDTO salvarContratoDetalhado(ContratoDetalhadoDTO contratoDetalhado) throws NegocioException;

    LocalDateTime obterDataCadastro(Long idContrato);



    List<ContratoDetalhadoDTO> obterContratosDetalhadosPorIdAgr(Long conDetIdAgr);

    void excluirContratoLogicamente(Long id);

    ContratoDetalhamento atualizarDetalhado(Long id, ContratoDetalhadoDTO dto);

    File gerarReciboAtoDetalhado(Long nuProtocolo);

}


// Fim do arquivo: ContratoService.java

// Arquivo: ContratoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ContratoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.*;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.PrestadorDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.model.enums.TipoPrestacaoContratoEnum;
import br.gov.ana.sarsb.model.enums.TipoServicoContratoEnum;
import br.gov.ana.sarsb.repository.*;
import br.gov.ana.sarsb.util.ConverterUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import springfox.documentation.spring.web.json.JsonSerializer;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import static org.springframework.beans.BeanUtils.copyProperties;

@Service
@Transactional
public class ContratoServiceImpl implements ContratoService {


    private static final Long REGULACAO_TARIFARIA = 4L;
    @Autowired
    private ProtocoloIndenizacaoService protocoloIndenizacaoService;

    @Autowired
    ContratoRespository contratoRespository;

    @Autowired
    ContratoDetalhamentoRespository contratoDetalhamentoRespository;

    @Autowired
    private AgenciaReguladoraRepository agenciaReguladoraRepository;

    @Autowired
    private PrestadorRepository prestadorRepository;
    @Autowired
    private AtoNormativoDetalhadoRepository atoNormativoDetalhadoRepository;

    @Autowired
    private ContratoAditivoVinculadoService contratoAditivoVinculadoService;

    @Autowired
    private MunicipioContratoService municipioContratoService;

    @Autowired
    private ContratoServicoAtividadeService contratoServicoAtividadeService;

    @Autowired
    private ContratoServicoAtividadeSelecionadaService contratoServicoAtividadeSelecionadaService;

    @Autowired
    private MunicipioIbgeRepository municipioIbgeRepository;
    @Autowired
    private JsonSerializer jsonSerializer;

    @Autowired
    private ProtocoloService protocoloService;



    @Autowired
    private ProtocoloRegulacaoTarifariaService protocoloRegulacaoTarifariaService;

    @Autowired
    private GerarRelatorioService gerarRelatorioService;

    @Autowired
    private NormasDeReferenciaService normasDeReferenciaService;

    public ContratoServiceImpl(ObjectMapper objectMapper) {
        this.contratoDetalhamentoRespository = contratoDetalhamentoRespository;
        this.objectMapper = objectMapper;
    }


    @Autowired
    private ContratoService contratoService;

    @Autowired
    private TipoServicoReguladoDocumentoRepository tipoServicoReguladoDocumentoRepository;

    private static StringBuilder montarDescricaoServicos(Contrato contrato) {
        StringBuilder listaDescricaoServicos = new StringBuilder();

        if (contrato.getIsAbastecimento() != null && contrato.getIsAbastecimento()) {
            listaDescricaoServicos.append(TipoServicoContratoEnum.IS_ABASTECIMENTO.getDescricao());
        }
        if (contrato.getIsAEsgotamento() != null && contrato.getIsAEsgotamento()) {
            if (listaDescricaoServicos.length() > 0) {
                listaDescricaoServicos.append(", ");
            }
            listaDescricaoServicos.append(TipoServicoContratoEnum.IS_ESGOTAMENTO.getDescricao());
        }
        if (contrato.getIsLimpezaUrbana() != null && contrato.getIsLimpezaUrbana()) {
            if (listaDescricaoServicos.length() > 0) {
                listaDescricaoServicos.append(", ");
            }
            listaDescricaoServicos.append(TipoServicoContratoEnum.IS_LIMPEZA_URBANA.getDescricao());
        }
        if (contrato.getIsManejoResiduos() != null && contrato.getIsManejoResiduos()) {
            if (listaDescricaoServicos.length() > 0) {
                listaDescricaoServicos.append(", ");
            }
            listaDescricaoServicos.append(TipoServicoContratoEnum.IS_MANEJO.getDescricao());
        }
        if (contrato.getIsDrenagemEManejoAguasPluviais() != null && contrato.getIsDrenagemEManejoAguasPluviais()) {
            if (listaDescricaoServicos.length() > 0) {
                listaDescricaoServicos.append(", ");
            }
            listaDescricaoServicos.append(TipoServicoContratoEnum.IS_DRENAGEM.getDescricao());
        }
        return listaDescricaoServicos;
    }

    @Override
    public List<ContratoDTO> listarContratorPor(Long idAgenciaReguladora) throws NegocioException {
        List<ContratoDTO> contratosDTO;
        List<Contrato> contratoList = contratoRespository.findAllByAgenciaReguladoraIdAndStatusAtivo(idAgenciaReguladora, Boolean.TRUE);

        contratosDTO = contratoList.stream().map(this::convertToListDTO).collect(Collectors.toList());

        return contratosDTO;
    }

    public ContratoDTO convertToListDTO(Contrato contrato) {
        ContratoDTO dto = new ContratoDTO();

        dto.setId(contrato.getId());
        dto.setTipoPrestacao(contrato.getTipoPrestacao());
        dto.setIdentificacao(contrato.getIdentificacao());
        dto.setCodigoInterno(contrato.getCodigoInterno());
        dto.setDataAssinatura(contrato.getDataAssinatura());
        dto.setPrazoVigencia(contrato.getPrazoVigencia());
        dto.setLinkInternet(contrato.getLinkInternet());
        dto.setDeclaro(contrato.getDeclaro());

        if (contrato.getAgenciaReguladora() != null) {
            dto.setAgenciaReguladora(new AgenciaReguladoraDTO(contrato.getAgenciaReguladora().getId()));
        }

        if (contrato.getPrestador() != null) {
            dto.setPrestador(new PrestadorDTO(contrato.getPrestador().getId(), contrato.getPrestador().getNomeRazaoSocial(), contrato.getPrestador().getCnpj()));
        }

        List<ContratoAditivoVinculado> aditivoVinculados = contratoAditivoVinculadoService.listarDocumentosPorContrato(contrato.getId());

        List<ContratoAditivoVinculadoDTO> aditivoVinculadoDTOS = aditivoVinculados.stream().map(this::convertContratoAditivoToListDTO).collect(Collectors.toList());

        dto.setAditivos(aditivoVinculadoDTOS);

        List<ContratoServicoAtividadeSelecionada> contratoServicoAtividadeSelecionadas =contratoServicoAtividadeSelecionadaService.findAllByContratoId(contrato.getId());

        dto.setContratoServicoAtividadeSelecionadas(contratoServicoAtividadeSelecionadas);

        List<MunicipioContrato> municipioContratos = municipioContratoService.findAllByContratoId(contrato.getId());
        if (!municipioContratos.isEmpty()) {
            List<MunicipioContratoDTO> municipios = new ArrayList<>();
            for (MunicipioContrato municipioContrato : municipioContratos) {
                MunicipioContratoDTO municipioContratoDTO = new MunicipioContratoDTO();
                municipioContratoDTO.setMunicipioContratoId(municipioContrato.getId());
                municipioContratoDTO.setContratoId(municipioContrato.getContrato().getId());
                municipioContratoDTO.setMunicipioIbgeId(municipioContrato.getMunicipio().getCodigoIbge());
                municipioContratoDTO.setUf(municipioContrato.getMunicipio().getUf());
                municipioContratoDTO.setNomeMunicipio(municipioContrato.getMunicipio().getNomeMunicipio());
                municipios.add(municipioContratoDTO);
            }
            dto.setMunicipios(municipios);
        }

        dto.setIsAbastecimento(contrato.getIsAbastecimento());
        dto.setIsAEsgotamento(contrato.getIsAEsgotamento());
        dto.setIsLimpezaUrbana(contrato.getIsLimpezaUrbana());
        dto.setIsManejoResiduos(contrato.getIsManejoResiduos());
        dto.setIsDrenagemEManejoAguasPluviais(contrato.getIsDrenagemEManejoAguasPluviais());
        dto.setDescricaoTipoPrestacao(TipoPrestacaoContratoEnum.get(contrato.getTipoPrestacao()).getDescricao());

        StringBuilder listaDescricaoServicos = montarDescricaoServicos(contrato);
        dto.setDescricaoTipoServicos(listaDescricaoServicos.toString());
        return dto;
    }



    public List<ContratoDTO> pesquisarContratos(FiltroContratoDTO filtro) {
        List<ContratoDTO> contratosDTO;

        String identificacaoLike = (filtro.getIdentificacaoContrato() != null) ? "%" + filtro.getIdentificacaoContrato() + "%" : null;

        if (filtro.getServicoPrestador() != null) {
            if (filtro.getServicoPrestador().equals("Esgotamento Sanitário")) {
                filtro.setIsAEsgotamento(true);
            } else if (filtro.getServicoPrestador().equals("Abastecimento de Água Potável")) {
                filtro.setIsAbastecimento(true);
            } else if (filtro.getServicoPrestador().equals("Limpeza Urbana")) {
                filtro.setIsLimpezaUrbana(true);
            } else if (filtro.getServicoPrestador().equals("Manejo de Resíduos Sólidos")) {
                filtro.setIsManejoResiduos(true);
            } else if (filtro.getServicoPrestador().equals("Drenagem e Manejo de Àguas Pluviais e Urbanas")) {
                filtro.setIsDrenagemEManejoAguasPluviais(true);
            }
        }

        List<Contrato> contratos = contratoRespository.pesquisar(identificacaoLike,
                filtro.getTipoPrestacao(),
                filtro.getIdAgencia(),
                filtro.getCidade() != null ? filtro.getCidade().getId() : null,
                filtro.getUfSigla(),
                filtro.getIsAbastecimento(),
                filtro.getIsAEsgotamento(),
                filtro.getIsLimpezaUrbana(),
                filtro.getIsManejoResiduos(),
                filtro.getIsDrenagemEManejoAguasPluviais()
        );

        contratosDTO = contratos.stream().map(this::convertToListDTO).collect(Collectors.toList());

        return contratosDTO;
    }


    public ContratoDTO salvar(ContratoDTO dto, List<ContratoAditivoVinculadoDTO> aditivos) throws NegocioException, IOException {

        dto.setId(null);

        Contrato contrato = new Contrato();
        copyProperties(dto, contrato);

        obterAgenciaReguladora(contrato, dto);
        obterPrestador(contrato, dto);

        contrato.setDataAtualizacao(LocalDateTime.now());

        contrato.setAcao("I");
        contrato.setStatusAtivo(Boolean.TRUE);
        contrato.setContratoExcuido(Boolean.FALSE);
        contrato.setCodigoInterno(dto.getCodigoInterno());
        contrato = contratoRespository.save(contrato);

        dto.setId(contrato.getId());
        List<TipoServicoReguladoDocumento> atividadesDto = new ArrayList<>();
        if(!dto.getAtividadesSelecionadasList().isEmpty()) {
            atividadesDto = tipoServicoReguladoDocumentoRepository.findAllById(dto.getAtividadesSelecionadasList());
        }
        List<ContratoServicoAtividadeSelecionada> novasAtividades = new ArrayList<>();

        for (TipoServicoReguladoDocumento atividade : atividadesDto) {
            ContratoServicoAtividadeSelecionada novaAtividade = new ContratoServicoAtividadeSelecionada();
            novaAtividade.setContrato(contrato);
            novaAtividade.setTipoServicoReguladoDocumento(atividade);
            novasAtividades.add(novaAtividade);
        }
        contratoServicoAtividadeSelecionadaService.salvarTodos(novasAtividades);

        salvarMunicipiosContrato(contrato, dto);
        salvarDocumentoContrato(contrato, aditivos);

        return convertToListDTO(contrato);
    }

    public Long obterSequencial(Long idAgenciaReguladora) throws NegocioException {
        Long qtdObtida = contratoRespository.findMaxCodInternoByAgenciaReguladora(idAgenciaReguladora);
        return (qtdObtida != null ? qtdObtida : 0L) + 1;
    }

    public ContratoDTO atualizar(Long id, ContratoDTO dto, List<ContratoAditivoVinculadoDTO> aditivos) throws NegocioException, IOException {

        atualizarInfoContratoAnterior(id);
        dto.setDataCadastro(contratoService.obterDataCadastro(dto.getId()));

        ContratoDTO novoContrato = salvar(dto, aditivos);

        return novoContrato;
    }

    public void atualizarInfoContratoAnterior(Long id) {
        Contrato contrato = contratoRespository.findById(id).orElseThrow(() -> new NegocioException("Contrato não encontrado para o ID: " + id));

        contrato.setDataAtualizacao(LocalDateTime.now());
        contrato.setAcao("A");
        contrato.setStatusAtivo(Boolean.FALSE);
        contrato.setContratoExcuido(Boolean.FALSE);


        contratoRespository.save(contrato);

    }

    public void obterAgenciaReguladora(Contrato contrato, ContratoDTO dto) {
        AgenciaReguladora agenciaReguladora;
        if (dto.getIdAgencia() != null) {
            agenciaReguladora = agenciaReguladoraRepository.findByIds(dto.getIdAgencia()).orElse(null);
            contrato.setAgenciaReguladora(agenciaReguladora);
        }
    }

    public void obterPrestador(Contrato contrato, ContratoDTO dto) {
        Prestador prestador;
        if (dto.getPrestador() != null && dto.getPrestador().getId() != null) {
            prestador = prestadorRepository.findById(dto.getPrestador().getId()).orElse(null);
            contrato.setPrestador(prestador);
        }
    }

    public void salvarDocumentoContrato(Contrato contrato, List<ContratoAditivoVinculadoDTO> aditivos) throws IOException {

        for (ContratoAditivoVinculadoDTO aditivoVinculado : aditivos) {
            contratoAditivoVinculadoService.salvarArquivoBanco(contrato, aditivoVinculado);
        }
    }

    public void salvarMunicipiosContrato(Contrato contrato, ContratoDTO dto) {
        List<Long> municipiosIds = dto.getMunicipios().stream().map(MunicipioContratoDTO::getMunicipioIbgeId).collect(Collectors.toList());
        List<MunicipioIBGE> municipios = municipioIbgeRepository.findAllById(municipiosIds);

        for (MunicipioIBGE municipio : municipios) {
            municipioContratoService.salvar(contrato, municipio);
        }
    }

    public void atualizarMunicipiosContrato(Contrato contrato, ContratoDTO dto) {
        municipioContratoService.deleteAllByContratoId(contrato.getId());

        List<MunicipioIBGE> municipios = municipioIbgeRepository.findAllById(dto.getMunicipios().stream().map(MunicipioContratoDTO::getMunicipioIbgeId).collect(Collectors.toList()));

        for (MunicipioIBGE municipio : municipios) {
            municipioContratoService.salvar(contrato, municipio);
        }
    }

    public void atualizarAditivosContrato(Contrato contrato, List<ContratoAditivoVinculadoDTO> aditivos) throws IOException {
        if (aditivos == null) {
            return;
        }

        contratoAditivoVinculadoService.removerNoBanco(contrato.getId());

        for (ContratoAditivoVinculadoDTO aditivoVinculado : aditivos) {
            contratoAditivoVinculadoService.salvarArquivoBanco(contrato, aditivoVinculado);
        }
    }

    public void atualizarAtividadesContrato(Contrato contrato, ContratoDTO dto) throws IOException {
        List<ContratoServicoAtividade> atividadesDto = contratoServicoAtividadeService.findAllByIdIn(dto.getAtividadesSelecionadasList());

        contratoServicoAtividadeSelecionadaService.deletarPorContratoId(contrato.getId());

        List<ContratoServicoAtividadeSelecionada> novasAtividades = new ArrayList<>();

        for (ContratoServicoAtividade atividade : atividadesDto) {
            ContratoServicoAtividadeSelecionada novaAtividade = new ContratoServicoAtividadeSelecionada();
            novaAtividade.setContrato(contrato);
            novaAtividade.setContratoServicoAtividade(atividade);

            novasAtividades.add(novaAtividade);
        }

        contratoServicoAtividadeSelecionadaService.salvarTodos(novasAtividades);
    }

    public ContratoDTO obterContratoPorId(Long id) throws NegocioException {
        Contrato contrato = contratoRespository.findById(id).orElseThrow(() -> new NegocioException("Contrato não encontrado para o ID: " + id));

        return convertToListDTO(contrato);
    }

    public Workbook gerarRelatorioXLS(Long idAgenciaReguladora) {

        // Usar o repositório para obter os dados da planilha
        List<Object[]> dadosBancoList = contratoRespository.findDadosRelatorioByAgencia(idAgenciaReguladora);

        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Relatório de Contratos");

        // Crie o cabeçalho
        Row headerRow = sheet.createRow(0);

        headerRow.createCell(0).setCellValue("Código Interno");
        headerRow.createCell(1).setCellValue("Identificação do Contrato");
        headerRow.createCell(2).setCellValue("UF");
        headerRow.createCell(3).setCellValue("Municipio");
        headerRow.createCell(4).setCellValue("Código do IBGE");
        headerRow.createCell(5).setCellValue("Tipo de Prestação");
        headerRow.createCell(6).setCellValue("Abastecimento Água Potável");
        headerRow.createCell(7).setCellValue("Esgotamento Sanitário");
        headerRow.createCell(8).setCellValue("Limpeza Urbana");
        headerRow.createCell(9).setCellValue("Manejo de Resíduos");
        headerRow.createCell(10).setCellValue("Drenagem e Manejo de Águas Pluviais");
        headerRow.createCell(11).setCellValue("Data da Assinatura do contrato");
        headerRow.createCell(12).setCellValue("Prestador");
        headerRow.createCell(13).setCellValue("Prazo de Vigência (Anos)");
        headerRow.createCell(14).setCellValue("Link internet");
        headerRow.createCell(15).setCellValue("Quantidade de Aditivos");
        headerRow.createCell(16).setCellValue("Data da Assinatura do último aditivo");
        headerRow.createCell(17).setCellValue("Data da Atualização");


        int rowNum = 1; // Comece na segunda linha, pois a primeira linha é o cabeçalho
        for (Object[] dados : dadosBancoList) {
            Row dataRow = sheet.createRow(rowNum++);
            int cellNum = 0;
            for (Object value : dados) {
                String cellValue = value != null ? value.toString() : "vazio"; // Tratar campos nulos como vazios
                dataRow.createCell(cellNum++).setCellValue(cellValue);
            }
        }

        return workbook;
    }

    public ContratoAditivoVinculadoDTO convertContratoAditivoToListDTO(ContratoAditivoVinculado aditivoVinculado) {
        ContratoAditivoVinculadoDTO aditivoVinculadoDTO = new ContratoAditivoVinculadoDTO();
        aditivoVinculadoDTO.setId(aditivoVinculado.getId());
        aditivoVinculadoDTO.setLinkAditivo(aditivoVinculado.getLinkAditivo());
        aditivoVinculadoDTO.setDataAssinatura(aditivoVinculado.getDataAssinatura());
        aditivoVinculadoDTO.setNome(aditivoVinculado.getNome());
        aditivoVinculadoDTO.setNormaList(aditivoVinculado.getNormaList());

        return aditivoVinculadoDTO;
    }

    @Override
    public void deletarContrato(Long id) throws NegocioException {

        Contrato contrato = contratoRespository.findById(id).orElseThrow(() -> new NegocioException("Contrato não encontrado para o ID: " + id));

        contrato.setDataAtualizacao(LocalDateTime.now());
        contrato.setAcao("I");
        contrato.setStatusAtivo(Boolean.FALSE);
        contrato.setContratoExcuido(Boolean.TRUE);

        contratoRespository.save(contrato);
    }


    @Override
    public ContratoDTO obterContratoPorCodigoInterno(String codigoInterno) throws NegocioException {
        Contrato contrato = contratoRespository.findByCodigoInternoAndStatusAtivo(codigoInterno, Boolean.TRUE);
        ContratoDTO contratoDTO = convertEntiDto(contrato);
        return contratoDTO;
    }

    @Override
    public ContratoDetalhadoDTO salvarContratoDetalhado(ContratoDetalhadoDTO contratoDetalhado) throws NegocioException {
        contratoDetalhado.setConDetDataInclusao(LocalDateTime.now());

        ContratoDetalhamento entity = new ContratoDetalhamento();
        entity.setConDetIdAgr(Long.valueOf(contratoDetalhado.getConDetIdAgr()));
        entity.setConDetConCd(contratoDetalhado.getConDetConCd());
        entity.setConDetDefinicaoBensReserviveis(contratoDetalhado.getConDetDefinicaoBensReserviveis());
        entity.setConDetDefinicaoMetodologia(contratoDetalhado.getConDetDefinicaoMetodologia());
        entity.setConDetDefinicaoBensReserviveisExemplo(contratoDetalhado.getConDetDefinicaoBensReserviveisExemplo());
        entity.setConDetPossuiExemplos(contratoDetalhado.getConDetPossuiExemplos());
        entity.setConDetExemplos(String.valueOf(contratoDetalhado.getConDetExemplos()));
        entity.setConDetMetodologia(contratoDetalhado.getConDetMetodologia());
        entity.setConDetDefinicaoBensReserviveisJusto(contratoDetalhado.getConDetDefinicaoBensReserviveisJusto());
        entity.setConDetMetodologiaValorJusto(contratoDetalhado.getConDetMetodologiaValorJusto());
        entity.setConDetArtigoContratualBensReversiveis(contratoDetalhado.getConDetArtigoContratualBensReversiveis());
        entity.setConDetExemplosContratualBensReversiveis(String.valueOf(contratoDetalhado.getConDetExemplosContratualBensReversiveis()));
        entity.setConDetDataInclusao(contratoDetalhado.getConDetDataInclusao());
        entity.setConExcluido(contratoDetalhado.getConExcluido());
        entity.setConExcluido(contratoDetalhado.getConExcluido());
        entity.setAnoColetaReferencia(contratoDetalhado.getAnoColetaReferencia());
        // 🔹 Geração do protocolo
        Long anoReferencia = contratoDetalhado.getAnoColetaReferencia().longValue();
        AgenciaReguladora agencia = agenciaReguladoraRepository.findById(Long.valueOf(contratoDetalhado.getConDetIdAgr()))
                .orElseThrow(() -> new RuntimeException("Agência Reguladora não encontrada"));

        Protocolo protocolo = gerarNovoProtocolo(anoReferencia, agencia, REGULACAO_TARIFARIA);
        entity.setProtocolo(protocolo);

        NormasDeReferencia norma = normasDeReferenciaService.findById(REGULACAO_TARIFARIA);



        ProtocoloIndenizacao protocoloIndenizacao = montarConteudoPraSalvar(entity, protocolo);

        entity = contratoDetalhamentoRespository.save(entity);
        contratoDetalhado.setId(entity.getId());
        protocoloIndenizacaoService.salvar(protocoloIndenizacao);

        return contratoDetalhado;
    }


    private Protocolo gerarNovoProtocolo(Long anoReferencia , AgenciaReguladora agenciaReguladora, Long norma) {
        Protocolo protocolo = new Protocolo();
        protocolo.setNumeroProtocolo("Protocolo");
        protocolo.setDataEnvio(LocalDateTime.now());
        protocolo.setNormasDeRefrencia(normasDeReferenciaService.findById(norma));
        protocolo.setEntidadeReguladora(agenciaReguladora);
        protocolo.setAnoReferencia(anoReferencia);
        protocoloService.criarProtocolo(protocolo);
        protocolo = protocoloService.gerarNumeroProtocolo(protocolo);
        protocoloService.criarProtocolo(protocolo);

        return protocolo;




    }

    private ProtocoloIndenizacao montarConteudoPraSalvar(ContratoDetalhamento contratoDetalhamento, Protocolo protocolo) {
        if (contratoDetalhamento == null ) {
            return null;
        }

        NormasDeReferencia norma = normasDeReferenciaService.findById(REGULACAO_TARIFARIA);

        ContratoDetalhamento contratoId = contratoDetalhamento;

        ProtocoloIndenizacao pi = new ProtocoloIndenizacao();
        pi.setContratoDetalhado(contratoId);
        pi.setProtocolo(protocolo);
        pi.setNorma(norma);
        pi.setAnoReferencia(Math.toIntExact(contratoId.getAnoColetaReferencia()));

        return pi;
    }

    @Override
    public List<ContratoDetalhadoDTO> obterContratosDetalhadosPorIdAgr(Long conDetIdAgr) {
        List<ContratoDetalhamento> contratocontratoDetalhado = contratoDetalhamentoRespository.findByConDetIdAgr(conDetIdAgr);
        return contratocontratoDetalhado.stream()
                .map(contrato -> objectMapper.convertValue(contrato, ContratoDetalhadoDTO.class))
                .collect(Collectors.toList());
    }

    private final ObjectMapper objectMapper;




    private ContratoDTO convertEntiDto(Contrato contrato) {
        ContratoDTO contratoDTO = new ContratoDTO();
        contratoDTO.setId(contrato.getId());
        return contratoDTO;
    }




    public void excluirContratoLogicamente(Long id) throws NegocioException {
        ContratoDetalhamento contrato = contratoDetalhamentoRespository.findById(id)
                .orElseThrow(() -> new NegocioException("Contrato não encontrado"));

        contrato.setConExcluido(true);
        contratoDetalhamentoRespository.save(contrato);
    }

    @Override
    public ContratoDetalhamento atualizarDetalhado(Long id, ContratoDetalhadoDTO dto) {
        ContratoDetalhamento entity = contratoDetalhamentoRespository.findById(id)
                .orElseThrow(() -> new RuntimeException("Registro não encontrado"));
        BeanUtils.copyProperties(dto, entity);
        return contratoDetalhamentoRespository.save(entity);
    }




    public LocalDateTime obterDataCadastro(Long idContrato) {
        return contratoRespository.findById(idContrato)
                .map(Contrato::getDataCadastro)
                .orElseThrow(() -> new NoSuchElementException("Contrato não encontrado com o ID: " + idContrato));
    }


    @Override
    public File gerarReciboAtoDetalhado(Long nuProtocolo) {

        List<Long> idAtodetalhado = new ArrayList<>();
        List<MunicipioContrato> municipioContratoes = new ArrayList<>();


        List<ProtocoloIndenizacao> protocoloIndenizacoes = protocoloIndenizacaoService.buscarPorIdProtocolo(nuProtocolo);

        protocoloIndenizacoes.forEach(protocoloIndenizacao -> {
            idAtodetalhado.add(protocoloIndenizacao.getAtoNormativoDetalhado().getId());
        });

        LocalDateTime  dataEnvioProtocolo = LocalDateTime.now();

        Optional<Protocolo> protocolo = protocoloService.buscarPorNumeroProtocolo(nuProtocolo);

        List<AtoNormativoDetalhado> atos = atoNormativoDetalhadoRepository.findAllById(idAtodetalhado);

        AtoNormativoDetalhado ato = atos.get(0);

        AgenciaReguladora agenciaReguladora = agenciaReguladoraRepository.getById(ato.getIdAgr()) ;

        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.getCnpj()))
                .dataRegistro(protocolo.get().getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.getNome())
                .numeroRecibo(protocolo.get().getNumeroProtocolo())
                .build();

        gerarRelatorioService.gerarReciboAtoDetalhado(recibo, ato, agenciaReguladora, protocolo.get().getDataEnvio() );

        return recibo.getRecibo();
    }

}


// Fim do arquivo: ContratoServiceImpl.java

// Arquivo: ContratoServicoAtividadeSelecionadaService.java
// Caminho: \br\gov\ana\sarsb\service\ContratoServicoAtividadeSelecionadaService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ContratoServicoAtividadeSelecionada;

import java.util.List;

public interface ContratoServicoAtividadeSelecionadaService {
    void deletarPorContratoId(Long contratoId);

    void salvar(ContratoServicoAtividadeSelecionada contratoServicoAtividade);

    List<ContratoServicoAtividadeSelecionada> findAllByContratoId(Long id);

    List<ContratoServicoAtividadeSelecionada> findAllByContratoIdIn(List<Long> contratoIds);

    void salvarTodos(List<ContratoServicoAtividadeSelecionada> contratoServicoAtividadeSelecionadas);

    List<ContratoServicoAtividadeSelecionada> findAllByIdIn(List<Long> ids);

}


// Fim do arquivo: ContratoServicoAtividadeSelecionadaService.java

// Arquivo: ContratoServicoAtividadeSelecionadaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ContratoServicoAtividadeSelecionadaServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ContratoServicoAtividadeSelecionada;
import br.gov.ana.sarsb.repository.ContratoServicoAtividadeSelecionadaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.List;

@Service
@Transactional
public class ContratoServicoAtividadeSelecionadaServiceImpl implements ContratoServicoAtividadeSelecionadaService {

    private final ContratoServicoAtividadeSelecionadaRepository repository;
    private final EntityManager entityManager;

    public ContratoServicoAtividadeSelecionadaServiceImpl(ContratoServicoAtividadeSelecionadaRepository repository,
                                                          EntityManager entityManager) {
        this.repository = repository;
        this.entityManager = entityManager;
    }

    public void deletarPorContratoId(Long contratoId) {
        repository.deleteByContratoId(contratoId);
        entityManager.flush();
    }

    public void salvar(ContratoServicoAtividadeSelecionada contratoServicoAtividadeSelecionada) {
        repository.save(contratoServicoAtividadeSelecionada);
    }

    public List<ContratoServicoAtividadeSelecionada> findAllByContratoId(Long id) {
        return repository.findAllByContratoId(id);
    }

    public List<ContratoServicoAtividadeSelecionada> findAllByContratoIdIn(List<Long> contratoIds) {
        return repository.findAllByContratoIdIn(contratoIds);
    }

    public void salvarTodos(List<ContratoServicoAtividadeSelecionada> contratoServicoAtividade) {
        repository.saveAll(contratoServicoAtividade);
    }

    public List<ContratoServicoAtividadeSelecionada> findAllByIdIn(List<Long> ids) {
        return repository.findAllById(ids);
    }

}



// Fim do arquivo: ContratoServicoAtividadeSelecionadaServiceImpl.java

// Arquivo: ContratoServicoAtividadeService.java
// Caminho: \br\gov\ana\sarsb\service\ContratoServicoAtividadeService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoServicoAtividadeDTO;
import br.gov.ana.sarsb.model.entity.ContratoServicoAtividade;

import java.util.List;

public interface ContratoServicoAtividadeService {
    void deletarPorContratoId(Long contratoId);

    void salvar(ContratoServicoAtividade contratoServicoAtividade);

    List<ContratoServicoAtividade> findAllByContratoServicoId(Long id);

    List<ContratoServicoAtividade> findAllByContratoServicoIdIn(List<Long> contratoIds);

    void salvarTodos(List<ContratoServicoAtividade> contratoServicoAtividade);

    List<ContratoServicoAtividade> findAllByIdIn(List<Long> ids);

    List<ContratoServicoAtividadeDTO> findAll();

}


// Fim do arquivo: ContratoServicoAtividadeService.java

// Arquivo: ContratoServicoAtividadeServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ContratoServicoAtividadeServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoServicoAtividadeDTO;
import br.gov.ana.sarsb.model.entity.ContratoServicoAtividade;
import br.gov.ana.sarsb.repository.ContratoServicoAtividadeRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional
public class ContratoServicoAtividadeServiceImpl implements ContratoServicoAtividadeService {

    private final ContratoServicoAtividadeRepository contratoServicoAtividadeRepository;

    public ContratoServicoAtividadeServiceImpl(ContratoServicoAtividadeRepository contratoServicoAtividadeRepository) {
        this.contratoServicoAtividadeRepository = contratoServicoAtividadeRepository;
    }

    public void deletarPorContratoId(Long contratoId) {
        contratoServicoAtividadeRepository.deleteByContratoId(contratoId);
    }

    public void salvar(ContratoServicoAtividade contratoServicoAtividade) {
        contratoServicoAtividadeRepository.save(contratoServicoAtividade);
    }

    public List<ContratoServicoAtividade> findAllByContratoServicoId(Long id) {
        return contratoServicoAtividadeRepository.findAllByContratoServicoId(id);
    }

    public List<ContratoServicoAtividade> findAllByContratoServicoIdIn(List<Long> contratoIds) {
        return contratoServicoAtividadeRepository.findAllByContratoServicoIdIn(contratoIds);
    }

    public void salvarTodos(List<ContratoServicoAtividade> contratoServicoAtividade) {
        contratoServicoAtividadeRepository.saveAll(contratoServicoAtividade);
    }

    public List<ContratoServicoAtividade> findAllByIdIn(List<Long> ids) {
        return contratoServicoAtividadeRepository.findAllById(ids);
    }

    public List<ContratoServicoAtividadeDTO> findAll() {
        List<ContratoServicoAtividade> contratoServicoAtividades = contratoServicoAtividadeRepository.findAll();
        return contratoServicoAtividades.stream().map(this::convertToListDTO).collect(Collectors.toList());
    }

    public ContratoServicoAtividadeDTO convertToListDTO(ContratoServicoAtividade contratoServicoAtividade) {
        ContratoServicoAtividadeDTO dto = new ContratoServicoAtividadeDTO();

        return dto;
    }

}



// Fim do arquivo: ContratoServicoAtividadeServiceImpl.java

// Arquivo: ContratoServicoService.java
// Caminho: \br\gov\ana\sarsb\service\ContratoServicoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoServicoDTO;

import java.util.List;

public interface ContratoServicoService {
    List<ContratoServicoDTO> listarServicos();
}


// Fim do arquivo: ContratoServicoService.java

// Arquivo: ContratoServicoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ContratoServicoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoServicoAtividadeDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoServicoDTO;
import br.gov.ana.sarsb.model.entity.ContratoServico;
import br.gov.ana.sarsb.repository.ContratoServicoAtividadeRepository;
import br.gov.ana.sarsb.repository.ContratoServicoRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional
public class ContratoServicoServiceImpl implements ContratoServicoService {

    private final ContratoServicoRepository contratoServicoRepository;
    private final ContratoServicoAtividadeRepository contratoServicoAtividadeRepository;

    public ContratoServicoServiceImpl(ContratoServicoRepository contratoServicoRepository,
                                      ContratoServicoAtividadeRepository contratoServicoAtividadeRepository) {
        this.contratoServicoRepository = contratoServicoRepository;
        this.contratoServicoAtividadeRepository = contratoServicoAtividadeRepository;
    }

    public List<ContratoServicoDTO> listarServicos() {
        List<ContratoServico> servicos = contratoServicoRepository.findAll();
        return servicos.stream()
                .map(servico -> {
                    ContratoServicoDTO dto = new ContratoServicoDTO();
                    dto.setId(servico.getId());
                    dto.setNome(servico.getNome());
                    dto.setAtividades(
                            contratoServicoAtividadeRepository.findAllByContratoServicoId(servico.getId())
                                    .stream()
                                    .map(atividade -> {
                                        ContratoServicoAtividadeDTO atividadeDTO = new ContratoServicoAtividadeDTO();
                                        atividadeDTO.setId(atividade.getId());
                                        atividadeDTO.setNome(atividade.getNome());
                                        atividadeDTO.setIdServico(servico.getId());
                                        return atividadeDTO;
                                    })
                                    .sorted((a, b) -> a.getNome().compareTo(b.getNome()))
                                    .collect(Collectors.toList())
                    );
                    return dto;
                }).collect(Collectors.toList());
    }

}



// Fim do arquivo: ContratoServicoServiceImpl.java

// Arquivo: DocumentoCondicoesGeraisService.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoCondicoesGeraisService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.DocumentoCondicoesGerais;

import java.util.List;

public interface DocumentoCondicoesGeraisService {
    List<DocumentoCondicoesGerais> consultarDocumentosPorId(Long id);

    void deletarDocumento(Long id);
}


// Fim do arquivo: DocumentoCondicoesGeraisService.java

// Arquivo: DocumentoCondicoesGeraisServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoCondicoesGeraisServiceImpl.java

package br.gov.ana.sarsb.service;


import br.gov.ana.sarsb.model.entity.DocumentoCondicoesGerais;
import br.gov.ana.sarsb.repository.DocumentoCondicoesGeraisRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DocumentoCondicoesGeraisServiceImpl implements DocumentoCondicoesGeraisService {

    @Autowired
    DocumentoCondicoesGeraisRepository documentoCondicoesGeraisRepository;
    @Override
    public List<DocumentoCondicoesGerais> consultarDocumentosPorId(Long id) {
        return documentoCondicoesGeraisRepository.consultarDocumentosPorId(id);
    }

    @Override
    public void deletarDocumento(Long id) {
        DocumentoCondicoesGerais doc = documentoCondicoesGeraisRepository.findById(id).get();
        documentoCondicoesGeraisRepository.delete(doc);

    }


}


// Fim do arquivo: DocumentoCondicoesGeraisServiceImpl.java

// Arquivo: DocumentoIndicadorMetaService.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoIndicadorMetaService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.DocumentoIndicadorMetaDTO;
import br.gov.ana.sarsb.model.entity.DocumentoIndicadorMeta;

import java.io.IOException;

public interface DocumentoIndicadorMetaService {
    DocumentoIndicadorMetaDTO salvar(DocumentoIndicadorMetaDTO documentoIndicadorMetaDTO)
            throws NegocioException, IOException;

    void deletar(Long id) throws NegocioException;

    DocumentoIndicadorMeta recuperar(Long id) throws NegocioException;
}


// Fim do arquivo: DocumentoIndicadorMetaService.java

// Arquivo: DocumentoIndicadorMetaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoIndicadorMetaServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.DocumentoIndicadorMetaDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.DocumentoIndicadorMeta;
import br.gov.ana.sarsb.model.enums.TipoEnvio;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.repository.DocumentoIndicadorMetaRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional
public class DocumentoIndicadorMetaServiceImpl implements DocumentoIndicadorMetaService {

    private final DocumentoIndicadorMetaRepository documentoIndicadorMetaRepository;

    private final AgenciaReguladoraRepository agenciaReguladoraRepository;

    public DocumentoIndicadorMetaServiceImpl(DocumentoIndicadorMetaRepository documentoIndicadorMetaRepository,
                                             AgenciaReguladoraRepository agenciaReguladoraRepository) {
        this.documentoIndicadorMetaRepository = documentoIndicadorMetaRepository;
        this.agenciaReguladoraRepository = agenciaReguladoraRepository;
    }

    public DocumentoIndicadorMetaDTO salvar(DocumentoIndicadorMetaDTO documentoIndicadorMetaDTO)
            throws NegocioException, IOException {

        DocumentoIndicadorMeta documentoIndicadorMeta = convertToEntity(documentoIndicadorMetaDTO);

        documentoIndicadorMeta = documentoIndicadorMetaRepository.save(documentoIndicadorMeta);

        return convertToDTO(documentoIndicadorMeta);
    }

    public DocumentoIndicadorMetaDTO convertToDTO(DocumentoIndicadorMeta documentoIndicadorMeta)
            throws NegocioException {
        DocumentoIndicadorMetaDTO documentoIndicadorMetaDTO = new DocumentoIndicadorMetaDTO();

        documentoIndicadorMetaDTO.setId(documentoIndicadorMeta.getId());
        documentoIndicadorMetaDTO.setAcaoNovaLista(documentoIndicadorMeta.getAcaoNovaLista());
        documentoIndicadorMetaDTO.setAcaoNovoAto(documentoIndicadorMeta.getAcaoNovoAto());
        documentoIndicadorMetaDTO.setAcaoNovoRelatorio(documentoIndicadorMeta.getAcaoNovoRelatorio());
        documentoIndicadorMetaDTO.setAcaoRetificacaoAto(documentoIndicadorMeta.getAcaoRetificacaoAto());
        documentoIndicadorMetaDTO.setAcaoRetificacaoRelatorio(documentoIndicadorMeta.getAcaoRetificacaoRelatorio());
        documentoIndicadorMetaDTO.setDataInclusao(documentoIndicadorMeta.getDataInclusao());
        documentoIndicadorMetaDTO.setAcaoRetificacaoLista(documentoIndicadorMeta.getAcaoRetificacaoLista());
        documentoIndicadorMetaDTO.setAceite(documentoIndicadorMeta.getAceite());
        documentoIndicadorMetaDTO.setDescricaoArquivo(documentoIndicadorMeta.getDescricaoArquivo());
        documentoIndicadorMetaDTO.setLinkOficial(documentoIndicadorMeta.getLinkOficial());
        documentoIndicadorMetaDTO.setTipoEnvio(
                documentoIndicadorMeta.getTipoEnvio() != null
                        ? documentoIndicadorMeta.getTipoEnvio().name()
                        : null
        );
        documentoIndicadorMetaDTO.setIdAgencia(documentoIndicadorMeta.getAgenciaReguladora() != null
                ? documentoIndicadorMeta.getAgenciaReguladora().getId() : null);
        documentoIndicadorMetaDTO.setNumeroPergunta(documentoIndicadorMeta.getNumeroPergunta());

        return documentoIndicadorMetaDTO;
    }

    public DocumentoIndicadorMeta convertToEntity(DocumentoIndicadorMetaDTO dto) throws NegocioException {
        DocumentoIndicadorMeta entidade = new DocumentoIndicadorMeta();

        entidade.setId(dto.getId());
        entidade.setDescricaoArquivo(dto.getDescricaoArquivo());
        entidade.setLinkOficial(dto.getLinkOficial());
        entidade.setDataInclusao(dto.getDataInclusao());
        entidade.setAcaoNovaLista(dto.getAcaoNovaLista());
        entidade.setAcaoRetificacaoLista(dto.getAcaoRetificacaoLista());
        entidade.setAcaoNovoAto(dto.getAcaoNovoAto());
        entidade.setAcaoRetificacaoAto(dto.getAcaoRetificacaoAto());
        entidade.setAcaoNovoRelatorio(dto.getAcaoNovoRelatorio());
        entidade.setAcaoRetificacaoRelatorio(dto.getAcaoRetificacaoRelatorio());
        entidade.setAceite(dto.getAceite());
        entidade.setNumeroPergunta(dto.getNumeroPergunta());

        if (dto.getTipoEnvio() != null) {
            try {
                entidade.setTipoEnvio(TipoEnvio.valueOf(dto.getTipoEnvio()));
            } catch (IllegalArgumentException e) {
                throw new NegocioException("Tipo de envio inválido: " + dto.getTipoEnvio());
            }
        }

        obterAgenciaReguladora(entidade, dto);

        return entidade;
    }


    public void obterAgenciaReguladora(DocumentoIndicadorMeta documentoIndicadorMeta,
                                       DocumentoIndicadorMetaDTO documentoIndicadorMetaDTO) {
        AgenciaReguladora agenciaReguladora;
        if (documentoIndicadorMetaDTO.getIdAgencia() != null) {
            agenciaReguladora = agenciaReguladoraRepository.findByIds(documentoIndicadorMetaDTO.getIdAgencia())
                    .orElse(null);
            documentoIndicadorMeta.setAgenciaReguladora(agenciaReguladora);
        }
    }


    private DocumentoIndicadorMeta buscarRequisitoOuLancarErro(Long id) {
        return documentoIndicadorMetaRepository.findById(id)
                .orElseThrow(() -> new NegocioException("requisitoComplementar.naoEncontrado", null));
    }

    public void deletar(Long id) throws NegocioException {
        documentoIndicadorMetaRepository.deleteById(id);
    }

    public List<DocumentoIndicadorMetaDTO> listar(List<Long> idsDocumentos) throws NegocioException, IOException {
        List<DocumentoIndicadorMeta> documentos = documentoIndicadorMetaRepository.findAllByIdIn(idsDocumentos);

        return documentos.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    public DocumentoIndicadorMeta recuperar(Long id) throws NegocioException {
        return buscarRequisitoOuLancarErro(id);
    }

}


// Fim do arquivo: DocumentoIndicadorMetaServiceImpl.java

// Arquivo: DocumentoMatrizRiscoService.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoMatrizRiscoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.ContratoMatrizRisco;
import br.gov.ana.sarsb.model.entity.DocumentoMatrizRisco;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

public interface DocumentoMatrizRiscoService {

    String salvarArquivoNuvem(ContratoMatrizRisco contrato, MultipartFile arquivo) throws NegocioException;

    void salvarArquivoBanco(ContratoMatrizRisco contrato, Long acao, String linkOficial, String nomeArquivo) throws NegocioException, IOException;

    Resource obterDocumento(String linkOficial) throws IOException;

    List<DocumentoMatrizRisco> listarDocumentosPorContrato(Long idContrato) throws NegocioException;

    void removerDocumentosPorContrato(Long idContrato) throws NegocioException;

}

// Fim do arquivo: DocumentoMatrizRiscoService.java

// Arquivo: DocumentoMatrizRiscoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoMatrizRiscoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.ContratoMatrizRisco;
import br.gov.ana.sarsb.model.entity.DocumentoMatrizRisco;
import br.gov.ana.sarsb.model.enums.AcoesDocContratoMatrizEnum;
import br.gov.ana.sarsb.repository.DocumentoMatrizRiscoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Date;
import java.util.List;

@Service
@Transactional
public class DocumentoMatrizRiscoServiceImpl implements DocumentoMatrizRiscoService {

    private final ConfigCache cc = ConfigCache.getInstance();

    @Autowired
    private DocumentoMatrizRiscoRepository repository;

    @Autowired
    private FileStorageService fileStorageService;


    @Override
    public String salvarArquivoNuvem(ContratoMatrizRisco contrato, MultipartFile arquivo) throws NegocioException {
        try {
            String cnpj = contrato.getAgenciaReguladora().getCnpj();

            fileStorageService.saveS3(arquivo, cnpj, 5L);

            return arquivo.getOriginalFilename();
        } catch (NegocioException | IOException e) {
            throw new NegocioException("erroSalvarRegistro", e);
        }
    }

    @Override
    public void salvarArquivoBanco(ContratoMatrizRisco contrato, Long acao, String linkOficial, String nomeArquivo) throws NegocioException, IOException {
        DocumentoMatrizRisco documentoMatrizRisco = new DocumentoMatrizRisco();

        documentoMatrizRisco.setContratoMatrizRisco(contrato);
        documentoMatrizRisco.setLinkOficial(linkOficial);
        documentoMatrizRisco.setDataInclusao(new Date());
        documentoMatrizRisco.setArquivo(nomeArquivo);
        documentoMatrizRisco.setAcao(AcoesDocContratoMatrizEnum.get(acao));

        repository.save(documentoMatrizRisco);

    }

    public Resource obterDocumento(String linkOficial) throws IOException {
        try {
            URI uri = new URI(linkOficial);
            String key = uri.getPath().substring(1);
            return fileStorageService.loadS3AsResource(key);
        } catch (URISyntaxException e) {
            throw new IOException("Erro ao criar URI a partir do link oficial.", e);
        }
    }

    public List<DocumentoMatrizRisco> listarDocumentosPorContrato(Long idContrato) throws NegocioException {
        return repository.findAllByContratoMatrizRiscoId(idContrato);
    }

    public void removerDocumentosPorContrato(Long idContrato) throws NegocioException {
        List<DocumentoMatrizRisco> documentos = listarDocumentosPorContrato(idContrato);

        removerNaNuvem(idContrato, documentos);
        removerNoBanco(idContrato);
    }

    public void removerNaNuvem(Long idContrato, List<DocumentoMatrizRisco> documentos) {
        documentos.forEach(documento -> {
            try {
                String cnpj = documento.getContratoMatrizRisco().getAgenciaReguladora().getCnpj();
                String filename = documento.getArquivo();
                fileStorageService.deleteS3(filename, cnpj, idContrato);
            } catch (NegocioException | IOException e) {
                throw new NegocioException("erroAoRemoverDocumento", e);
            }
        });
    }

    public void removerNoBanco(Long idContrato) {
        repository.deleteAllByContratoMatrizRiscoId(idContrato);
    }
}


// Fim do arquivo: DocumentoMatrizRiscoServiceImpl.java

// Arquivo: DocumentoNormativoEriService.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoNormativoEriService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.DocumentoNormativoEriDTO;
import br.gov.ana.sarsb.model.entity.DocumentoNormativoEri;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

public interface DocumentoNormativoEriService {

    void salvarDocumentoAtoNormativo(DocumentoNormativoEriDTO documentoNormativoEriDTO) throws NegocioException;

    List<DocumentoNormativoEri> listaDocumentosNormativosEri();

    void salvarArquivo(Long id, MultipartFile arquivo) throws NegocioException;

    Resource recuperarArquivo(Long id, String nomeArquivo) throws NegocioException;

    List<DocumentoNormativoEri> recuperarDocumentosPorAno(Long ano);

//    List<DocumentoNormativoEri> consultarDocumentosPorAtoNormativo (Long id);

    List<DocumentoNormativoEriDTO> consultarDocumentosPorAtoNormativo (Long id);
}


// Fim do arquivo: DocumentoNormativoEriService.java

// Arquivo: DocumentoNormativoEriServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\DocumentoNormativoEriServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.DocumentoNormativoEriDTO;
import br.gov.ana.sarsb.model.entity.AtoNormativoEri;
import br.gov.ana.sarsb.model.entity.DocumentoNormativoEri;
import br.gov.ana.sarsb.model.enums.Configuracoes;
import br.gov.ana.sarsb.repository.AtoNormativoRepository;
import br.gov.ana.sarsb.repository.DocumentoNormativoEriRepository;
import br.gov.ana.sarsb.util.Constantes;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class DocumentoNormativoEriServiceImpl implements DocumentoNormativoEriService {
    private ConfigCache cc = ConfigCache.getInstance();


    @Autowired
    private DocumentoNormativoEriRepository documentoNormativoEriRepository;

    @Autowired
    private FileStorageService fileStorageService;

    @Autowired
    private AtoNormativoRepository atoNormativoRepository;

    public void salvarDocumentoAtoNormativo(DocumentoNormativoEriDTO documentoNormativoEriDTO){
        try {
            DocumentoNormativoEri documento = new DocumentoNormativoEri();
            BeanUtils.copyProperties(documentoNormativoEriDTO, documento);
            documentoNormativoEriRepository.save(documento);
         } catch (Exception e) {
            throw new NegocioException("Erro ao salvar o documento do Ato Normativo do Contrato !", e);
        }

    }

    @Override
    public List<DocumentoNormativoEri> listaDocumentosNormativosEri() {
        return documentoNormativoEriRepository.findAll().stream().sorted(Comparator.comparing(DocumentoNormativoEri::getId))
                .collect(Collectors.toList());
    }


    @Override
    public void salvarArquivo(Long id, MultipartFile arquivo) throws NegocioException {
        try {
            fileStorageService.save(arquivo, montarCaminhoArquivo(id));
        } catch (NegocioException | IOException e) {
            throw new NegocioException("erroSalvarRegistro", e);
        }
    }


    private Path montarCaminhoArquivo(Long id) throws NegocioException {
        Optional<AtoNormativoEri> atoNormativoEri = atoNormativoRepository.findById(id);
        if(atoNormativoEri.isPresent()) {
            return Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_MATRIZ_RISCOS
                    + atoNormativoEri.get().getEntidadeReguladora().getCnpj());



        } else {
            throw new NegocioException("Não foi encontrado documento para id informado!");
        }
    }


    public Resource recuperarArquivo(Long id, String nomeArquivo) throws NegocioException {
        try {
            nomeArquivo = documentoNormativoEriRepository.findById(id).get().getArquivo();
            Long idAtoNormativo = documentoNormativoEriRepository.findById(id).get().getAtoNormativoEri().getId();
            return fileStorageService.load(nomeArquivo, montarCaminhoArquivo(idAtoNormativo));
        } catch (NegocioException | IOException e) {
            throw new NegocioException("erroAoRecuperarRegistro", e);
        }
    }


    public List<DocumentoNormativoEri> recuperarDocumentosPorAno(Long ano) throws NegocioException {
        return documentoNormativoEriRepository.findByAno(ano).stream().sorted(Comparator.comparing(DocumentoNormativoEri::getId))
                .collect(Collectors.toList());

    }

    public DocumentoNormativoEri consultarDocumentoPorAtoNormativo (Long id) throws NegocioException {
        return documentoNormativoEriRepository.findByAtoNormativo(id);
    }


    public List<DocumentoNormativoEriDTO> consultarDocumentosPorAtoNormativo (Long id) throws NegocioException {

        return documentoNormativoEriRepository
                .findDocumentosByAtoNormativo(id)
                .stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }


    public DocumentoNormativoEriDTO convertToDTO (DocumentoNormativoEri documentoNormativoEri) throws NegocioException {
        DocumentoNormativoEriDTO documentoNormativoEriDTO = new DocumentoNormativoEriDTO();
        documentoNormativoEriDTO.setId(documentoNormativoEri.getId());
        documentoNormativoEriDTO.setAcao(documentoNormativoEri.getAcao());
        documentoNormativoEriDTO.setLinkOficial(documentoNormativoEri.getLinkOficial());
        documentoNormativoEriDTO.setArquivo(documentoNormativoEri.getArquivo());

        if (documentoNormativoEri.getDataInclusao() != null) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            String formattedDate = sdf.format(documentoNormativoEri.getDataInclusao());
            documentoNormativoEriDTO.setDataInclusaoStr(formattedDate);
        }

        return documentoNormativoEriDTO;
    }
}


// Fim do arquivo: DocumentoNormativoEriServiceImpl.java

// Arquivo: DominioService.java
// Caminho: \br\gov\ana\sarsb\service\DominioService.java

package br.gov.ana.sarsb.service;

import java.util.List;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.entity.*;

public interface DominioService {
	
	List<TipoEntidadeReguladora> listarEntidadesReguladoras() throws NegocioException;
	List<TipoCategoriaPrestador> listarCategoriaPrestador() throws NegocioException;

	List<TipoAtribuicao> listaAtribuicao() throws NegocioException;

	List<TipoEtapaServico> listarEtapaServico() throws NegocioException;
	List<TipoInstrumentoLegal> listarInstrumentoLegal() throws NegocioException;
	List<TipoDocumentoArrecadacao> listarTipoDocumentoArrecadacao() throws NegocioException;
	List<TipoSubCategoriaPrestador> listarSubCategoriaPrestador(Long idCategoriaPrestador) throws NegocioException;
	List<TipoAgenciaReguladora> listaTipoAgenciaReguladora() throws NegocioException;

	List<TipoSetorRegulado> listarTipoSetorRegulado() throws NegocioException;

	List<TipoMultissetorial> listarTipoMultissetorial() throws NegocioException;

	List<TipoDocumentoCriacao> listartipoDocumentoCriacao() throws NegocioException;

	List<TipoDocumentoPrestador> listaTipoDocumentoPrestador() throws NegocioException;
	List<PerguntaDecreto> listaPerguntaDecreto(Long idQuestionario) throws NegocioException;
	List<TipoServicoRegulado> listarTipoServicoRegulado() throws NegocioException;

	TipoEntidadeReguladora save(TipoEntidadeReguladora tipoEntidadeReguladora);
	List<AgenciaReguladoraDTO> listareris() throws NegocioException;

	List<TipoParametroCobranca> listarparametrocobranca() throws NegocioException;

	List<TipoCategoriasSmsru> listarcategoriassmru() throws NegocioException;


	List<TipoValoresCobradosSmsru> listarvalorescobradossmru() throws NegocioException;

	List<TipoCobrancaSocialSmsru> listarcobrancasocialsmru() throws NegocioException;

	List<TipoRegimeCobranca> listarTipoRegimeCobranca() throws NegocioException;

}


// Fim do arquivo: DominioService.java

// Arquivo: DominioServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\DominioServiceImpl.java

package br.gov.ana.sarsb.service;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaReguladoraDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.gov.ana.sarsb.exception.NegocioException;

@Service
public class DominioServiceImpl implements DominioService {

	@Autowired
	private TipoEntidadeReguladoraRepository tipoEntidadeReguladoraRepository;

	@Autowired
	private TipoCategoriaPrestadorRepository tipoCategoriaPrestadorRepository;

	@Autowired
	private TipoAtribuicaoRepository tipoAtribuicaoRepository;
	
	@Autowired
	private TipoEtapaServicoRepository tipoEtapaServicoRepository;
	
	@Autowired
	private TipoSubCategoriaPrestadorRepository tipoSubCategoriaPrestadorRepository;
	
	@Autowired
	private TipoInstrumentoLegalRepository tipoInstrumentoLegalRepository;
	
	@Autowired
	private TipoDocumentoArrecadacaoRepository tipoDocumentoArrecadacaoRepository;
	
	@Autowired
	private TipoAgenciaReguladoraRepository tipoAgenciaReguladoraRepository;

	@Autowired
	private TipoSetorReguladoRepository TipoSetorReguladoRepository;

	@Autowired
	private TipoServicoReguladoRepository TipoServicoReguladoRepository;

	@Autowired
	private TipoMultissetorialRepository TipoMultissetorialRepository;
	@Autowired
	private tipodocumentocriacaorepository tipodocumentocriacaorepository;
	@Autowired
	private TipoDocumentoPrestadorRepository tipoDocumentoPrestadorRepository;
	
	@Autowired
	private PerguntaDecretoRepository perguntaDecretoRepository;

	@Autowired
	private TipoParamentoCobrancaRepository tipoParamentoCobrancaRepository;
	@Autowired
	private TipoCategoriasSmsruRepository tipoCategoriasSmsruRepository;
	@Autowired
	private TipoValoresCobradosRepository tipoValoresCobradosRepository;
	@Autowired
	private TipoCobrancaSocialSmsruRepository tipoCobrancaSocialSmsruRepository;

	@Autowired
	private TipoRegimeCobrancaRepository  TipoRegimeCobrancaRepository;



	@Override
	public List<TipoEntidadeReguladora> listarEntidadesReguladoras() throws NegocioException {
		return tipoEntidadeReguladoraRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoEntidadeReguladora::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoCategoriaPrestador> listarCategoriaPrestador() throws NegocioException {
		return tipoCategoriaPrestadorRepository.findAll()
				.stream()
				.filter(categoria -> categoria.getId() != 3)
				.sorted(Comparator.comparing(TipoCategoriaPrestador::getId))
				.collect(Collectors.toList());
	}




	@Override
	public List<TipoAtribuicao> listaAtribuicao() throws NegocioException {
		return tipoAtribuicaoRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoAtribuicao::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoEtapaServico> listarEtapaServico() throws NegocioException {
		return tipoEtapaServicoRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoEtapaServico::getId))
				.collect(Collectors.toList());
	}




	@Override
	public List<TipoSubCategoriaPrestador> listarSubCategoriaPrestador(Long idCategoriaPrestador) throws NegocioException {
		return tipoSubCategoriaPrestadorRepository.findByTipoCategoriaPrestador(new TipoCategoriaPrestador(idCategoriaPrestador))
				.stream().sorted(Comparator.comparing(TipoSubCategoriaPrestador::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoInstrumentoLegal> listarInstrumentoLegal() throws NegocioException {
		return tipoInstrumentoLegalRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoInstrumentoLegal::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoDocumentoArrecadacao> listarTipoDocumentoArrecadacao() throws NegocioException {
		return tipoDocumentoArrecadacaoRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoDocumentoArrecadacao::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoAgenciaReguladora> listaTipoAgenciaReguladora() throws NegocioException {
		return tipoAgenciaReguladoraRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoAgenciaReguladora::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoSetorRegulado> listarTipoSetorRegulado() throws NegocioException {
		return TipoSetorReguladoRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoSetorRegulado::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoServicoRegulado> listarTipoServicoRegulado() throws NegocioException {
		return TipoServicoReguladoRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoServicoRegulado::getId))
				.collect(Collectors.toList());
	}

	@Override
	public TipoEntidadeReguladora save(TipoEntidadeReguladora tipoEntidadeReguladora) {
		return null;
	}

	@Override
	public List<AgenciaReguladoraDTO> listareris() throws NegocioException {
		return null;
	}

	@Override
	public List<TipoMultissetorial> listarTipoMultissetorial() throws NegocioException {
		return TipoMultissetorialRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoMultissetorial::getId))
				.collect(Collectors.toList());
	}



	@Override
	public List<TipoDocumentoCriacao> listartipoDocumentoCriacao() throws NegocioException {
		return tipodocumentocriacaorepository.findAll()
				.stream().sorted(Comparator.comparing(TipoDocumentoCriacao::getId))
				.collect(Collectors.toList());
	}
	@Override
	public List<TipoDocumentoPrestador> listaTipoDocumentoPrestador() throws NegocioException {
		return tipoDocumentoPrestadorRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoDocumentoPrestador::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<PerguntaDecreto> listaPerguntaDecreto(Long idQuestionario) throws NegocioException {
		return perguntaDecretoRepository.findByTipoQuestionario(idQuestionario)
				.stream().sorted(Comparator.comparing(PerguntaDecreto::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoParametroCobranca> listarparametrocobranca() throws NegocioException {
		return tipoParamentoCobrancaRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoParametroCobranca::getId))
				.collect(Collectors.toList());
	}


	@Override
	public List<TipoCategoriasSmsru> listarcategoriassmru() throws NegocioException {
		return tipoCategoriasSmsruRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoCategoriasSmsru::getId))
				.collect(Collectors.toList());
	}


	@Override
	public List<TipoValoresCobradosSmsru> listarvalorescobradossmru() throws NegocioException {
		return tipoValoresCobradosRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoValoresCobradosSmsru::getId))
				.collect(Collectors.toList());
	}
	@Override
	public List<TipoCobrancaSocialSmsru> listarcobrancasocialsmru() throws NegocioException {
		return tipoCobrancaSocialSmsruRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoCobrancaSocialSmsru::getId))
				.collect(Collectors.toList());
	}

	@Override
	public List<TipoRegimeCobranca> listarTipoRegimeCobranca() throws NegocioException {
		return TipoRegimeCobrancaRepository.findAll()
				.stream().sorted(Comparator.comparing(TipoRegimeCobranca::getId))
				.collect(Collectors.toList());
	}


}


// Fim do arquivo: DominioServiceImpl.java

// Arquivo: FileStorageService.java
// Caminho: \br\gov\ana\sarsb\service\FileStorageService.java

package br.gov.ana.sarsb.service;

import java.io.IOException;
import java.nio.file.Path;
import java.util.stream.Stream;

import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

public interface FileStorageService {

	void save(MultipartFile file, Path directory) throws IOException;
	void delete(String fileName, Path directory) throws IOException;
	Resource load(String filename, Path directory) throws IOException;
	Stream<Path> loadAll(Path directory) throws IOException;
	void copy(String fileName, Path directorySource, Path directoryDestination) throws IOException;
	void removeFilesByDirectory(Path directory) throws IOException;
	void saveS3(MultipartFile file, String cnpj, Long formularioId) throws IOException;
	ResponseEntity<byte[]> loadS3(String filename, String cnpj, Long formularioId) throws IOException;
	Resource loadS3AsResource(String key) throws IOException;
	void deleteS3(String filename, String cnpj, Long formularioId) throws IOException;
	String getS3FileUrl(String filename, String cnpj, Long formularioId);
	void saveS3WithCustomKey(MultipartFile file, String key) throws IOException;
	
}



// Fim do arquivo: FileStorageService.java

// Arquivo: FileStorageServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\FileStorageServiceImpl.java

package br.gov.ana.sarsb.service;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.util.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class FileStorageServiceImpl implements FileStorageService {

	@Autowired
	private AmazonS3 amazonS3Client;

	private String bucketName = "sasb-uploaded-files-prod";


	@Override
	public void save(MultipartFile file, Path directory) throws IOException {
		try {
			createDirectory(directory);
			Files.copy(file.getInputStream(), directory.resolve(file.getOriginalFilename()), StandardCopyOption.REPLACE_EXISTING);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public Resource load(String fileName, Path directory) throws IOException {
		try {
			Path pathFile = directory.resolve(fileName);
			Resource resource = new UrlResource(new File(pathFile.toString()).toURI());
			if (resource.exists() || resource.isReadable()) {
				return resource;
			} else {
				throw new IOException("Não foi possivel ler o arquivo!");
			}
		} catch (MalformedURLException e) {
			throw new IOException("Error: " + e.getMessage());
		}
	}

	@Override
	public Stream<Path> loadAll(Path directory) throws IOException {
		try {
			return Files.walk(directory, 1).map(directory::relativize);
		} catch (IOException e) {
			throw new IOException("Não foi possivel carregar os arquivos!");
		}
	}

	@Override
	public void delete(String fileName, Path directory) throws IOException {
		try {
			Path file = fileName != null ? directory.resolve(fileName) : directory;
			Files.deleteIfExists(file);
		} catch (IOException e) {
			throw new IOException("Não foi possivel deletar o arquivo!");
		}
	}

	@Override
	public void copy(String fileName, Path directorySource, Path directoryDestination) throws IOException {
		try {
			if(Files.exists(directorySource.resolve(fileName))){
				createDirectory(directoryDestination);
				Files.copy(directorySource.resolve(fileName),
						directoryDestination.resolve(fileName), StandardCopyOption.REPLACE_EXISTING);
			}
		} catch (IOException e) {
			throw new IOException("Não foi possivel copiar o arquivo!");
		}
	}

	private void createDirectory(Path directory) throws IOException {
		if(!Files.exists(directory)) {
			try {
				Files.createDirectories(directory);
			} catch (IOException e) {
				throw new IOException("Não foi possivel criar o diretorio!");
			}
		}
	}

	@Override
	public void removeFilesByDirectory(Path directory) throws IOException {
		if(Files.exists(directory)) {
			try (Stream<File> filter = Files.walk(directory)
					.filter(Files::isRegularFile)
					.map(Path::toFile)) {
				List<File> filesInFolder = filter.collect(Collectors.toList());
				if(!filesInFolder.isEmpty()) {
					filesInFolder.forEach(File::delete);
				}
				Files.delete(directory);
			} catch (IOException e) {
				throw new IOException("Não foi possivel deletar os arquivo!");
			}
		}
	}

	@Override
	public void saveS3(MultipartFile file, String cnpj, Long formularioId) throws IOException {
		try (InputStream inputStream = file.getInputStream()) {
			ObjectMetadata metadata = new ObjectMetadata();
			metadata.setContentLength(file.getSize());
			metadata.setContentType(file.getContentType());

			String key = String.format("%s/%d/%s", cnpj, formularioId, file.getOriginalFilename());
			PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, key, inputStream, metadata);

			amazonS3Client.putObject(putObjectRequest);
		} catch (IOException e) {
			throw new IOException("Falha ao persistir o arquivo no S3. Tente novamente mais tarde ou entre em contato.", e);
		}
	}

	@Override
	public ResponseEntity<byte[]> loadS3(String filename, String cnpj, Long formularioId) throws IOException {
		try {
			var getObject = amazonS3Client.getObject(bucketName, String.format("%s/%d/%s", cnpj, formularioId, filename));
			byte[] bytes = IOUtils.toByteArray(getObject.getObjectContent());

			String fileName = URLEncoder.encode(String.format("%s/%d/%s", cnpj, formularioId, filename), "UTF-8").replaceAll("\\+", "%20");

			HttpHeaders httpHeaders = new HttpHeaders();
			httpHeaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);
			httpHeaders.setContentLength(bytes.length);
			httpHeaders.setContentDispositionFormData("attachment", fileName);

			return new ResponseEntity<>(bytes, httpHeaders, HttpStatus.OK);
		} catch (Exception e) {
			throw new IOException("Não foi possível encontrar o arquivo!");
		}
	}

	public static File convert(MultipartFile file) throws IOException {
		File convFile = new File(file.getOriginalFilename());
		convFile.createNewFile();
		FileOutputStream fos = new FileOutputStream(convFile);
		fos.write(file.getBytes());
		fos.close();
		return convFile;
	}

	@Override
	public Resource loadS3AsResource(String key) throws IOException {
		try {
			S3Object s3Object = amazonS3Client.getObject(bucketName, key);
			return new InputStreamResource(s3Object.getObjectContent());
		} catch (Exception e) {
			throw new IOException("Failed to load file from S3", e);
		}
	}

	@Override
	public void deleteS3(String filename, String cnpj, Long formularioId) throws IOException {
		try {
			String fileKey = String.format("%s/%d/%s", cnpj, formularioId, filename);
			amazonS3Client.deleteObject(bucketName, fileKey);
		} catch (AmazonServiceException e) {
			throw new IOException("Não foi possível remover o arquivo do S3!", e);
		}
	}

	public String getS3FileUrl(String filename, String cnpj, Long formularioId) {
		return amazonS3Client.getUrl(bucketName, String.format("%s/%d/%s", cnpj, formularioId, filename)).toString();
	}

	public void saveS3WithCustomKey(MultipartFile file, String key) throws IOException {
		try (InputStream inputStream = file.getInputStream()) {
			ObjectMetadata metadata = new ObjectMetadata();
			metadata.setContentLength(file.getSize());
			metadata.setContentType(file.getContentType());

			PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, key, inputStream, metadata);

			amazonS3Client.putObject(putObjectRequest);
		} catch (IOException e) {
			throw new IOException("Falha ao persistir o arquivo no S3. Tente novamente mais tarde ou entre em contato.",
					e);
		}
	}
}




// Fim do arquivo: FileStorageServiceImpl.java

// Arquivo: FinalizacaoPreenchimentoContratoService.java
// Caminho: \br\gov\ana\sarsb\service\FinalizacaoPreenchimentoContratoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.FinalizacaoPreenchimentoContrato;

import java.util.List;

public interface FinalizacaoPreenchimentoContratoService {
    List<FinalizacaoPreenchimentoContrato> findByIdFinalizacaoPreenchimento(Long idFinalizacaoPreenchimento);
    void salvarLista(List<FinalizacaoPreenchimentoContrato> finalizacaoPreenchimentoContratos);
}


// Fim do arquivo: FinalizacaoPreenchimentoContratoService.java

// Arquivo: FinalizacaoPreenchimentoContratoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\FinalizacaoPreenchimentoContratoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.FinalizacaoPreenchimentoContrato;
import br.gov.ana.sarsb.repository.FinalizacaoPreenchimentoContratoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Transactional
public class FinalizacaoPreenchimentoContratoServiceImpl implements FinalizacaoPreenchimentoContratoService {
    @Autowired
    private FinalizacaoPreenchimentoContratoRepository repository;

    @Override
    public List<FinalizacaoPreenchimentoContrato> findByIdFinalizacaoPreenchimento(Long idFinalizacaoPreenchimento) {
        return repository.findByIdFinalizacaoPreenchimento(idFinalizacaoPreenchimento);
    }

    public void salvarLista(List<FinalizacaoPreenchimentoContrato> finalizacaoPreenchimentoContratos) {
        repository.saveAll(finalizacaoPreenchimentoContratos);
    }

}


// Fim do arquivo: FinalizacaoPreenchimentoContratoServiceImpl.java

// Arquivo: FinalizacaoPreenchimentoService.java
// Caminho: \br\gov\ana\sarsb\service\FinalizacaoPreenchimentoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.FinalizacaoPreenchimentoDTO;
import br.gov.ana.sarsb.util.RespostaValidacao;
import org.springframework.transaction.annotation.Transactional;

public interface FinalizacaoPreenchimentoService {

    RespostaValidacao validar(Long anoReferencia, Long idEri);
    Boolean validarFinalizacao(Long ano, Long idEri);
    void excluirFinalizacaoPreenchimento(Long ano, Long idEri);

    void finalizarPrimeiroAnoColeta (FinalizacaoPreenchimentoDTO finalizacaoPreenchimentoDTO);
    void excluirFinalizacaoPreenchimentoPrimeiraColeta(Long ano, Long idEri);
    RespostaValidacao validarPrimeiraColeta(Long anoReferencia, Long idEri);
}


// Fim do arquivo: FinalizacaoPreenchimentoService.java

// Arquivo: FinalizacaoPreenchimentoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\FinalizacaoPreenchimentoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.FinalizacaoPreenchimentoDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.AtoNormativoEri;
import br.gov.ana.sarsb.model.entity.FinalizacaoPreenchimento;
import br.gov.ana.sarsb.model.entity.Protocolo;
import br.gov.ana.sarsb.model.entity.ProtocoloAtoNormativo;
import br.gov.ana.sarsb.repository.FinalizacaoPreenchimentoRepository;
import br.gov.ana.sarsb.util.RespostaValidacao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional
public class FinalizacaoPreenchimentoServiceImpl implements FinalizacaoPreenchimentoService {

    public static final long NORMA_MATRIZ_RISCOS = 1L;

    @Autowired
    AtoNormativoService atoNormativoService;

    @Autowired
    FinalizacaoPreenchimentoRepository repository;

    @Autowired
    FinalizacaoPreenchimentoContratoService finalizacaoPreenchimentoContratoService;

    @Autowired
    private NormasDeReferenciaService normasDeReferenciaService;
    @Autowired
    private ProtocoloService protocoloService;
    @Autowired
    private ProtocoloAtoNormativoService protocoloAtoNormativoService;
    @Autowired
    private FinalizacaoPreenchimentoService finalizacaoPreenchimentoService;

    public RespostaValidacao validar(Long anoReferencia, Long idEri) {
        List<String> mensagens = new ArrayList<>();

        AtoNormativoEri atosNormativoEri = atoNormativoService.buscarAtoNormativoValido(anoReferencia, idEri);
        if (atosNormativoEri == null) {
            mensagens.add("Não é possível finalizar pois não foi cadastrado as informações do " +
                    "Ato normativo da ERI para esse ano de referência.");
        }

        boolean sucesso = mensagens.isEmpty();
        return new RespostaValidacao(sucesso, mensagens);
    }

//    public void finalizar(FinalizacaoPreenchimentoDTO finalizacaoPreenchimentoDTO) {
//        FinalizacaoPreenchimento finalizacaoPreenchimento = obterFinalizacao(finalizacaoPreenchimentoDTO);
//
//        List<ContratoMatrizRisco> contratosMatrizRiscos =
//                contratoMatrizRiscoService.listarPorAnoReferencia(finalizacaoPreenchimentoDTO.getAnoReferencia(),
//                        finalizacaoPreenchimentoDTO.getIdEri());
//
//        List<FinalizacaoPreenchimentoContrato> finalizacaoPreenchimentoContratos = new ArrayList<>();
//        for (ContratoMatrizRisco contratoMatrizRisco : contratosMatrizRiscos) {
//            FinalizacaoPreenchimentoContrato finalizacaoPreenchimentoContrato = new FinalizacaoPreenchimentoContrato();
//
//            finalizacaoPreenchimentoContrato.setIdFinalizacaoPreenchimento(finalizacaoPreenchimento.getId());
//            finalizacaoPreenchimentoContrato.setIdContrato(contratoMatrizRisco.getId());
//            finalizacaoPreenchimentoContrato.setConformidadeContrato(contratoMatrizRisco.getConformidade());
//
//            finalizacaoPreenchimentoContrato.setContratoMatrizRisco(contratoMatrizRisco);
//            finalizacaoPreenchimentoContrato.setFinalizacaoPreenchimento(finalizacaoPreenchimento);
//
//            finalizacaoPreenchimentoContratos.add(finalizacaoPreenchimentoContrato);
//        }
//
//        finalizacaoPreenchimentoContratoService.salvarLista(finalizacaoPreenchimentoContratos);
//
//        Protocolo protocolo = gerarNovoProtocolo(finalizacaoPreenchimento.getAnoReferencia(), finalizacaoPreenchimento.getAgenciaReguladora(), NORMA_MATRIZ_RISCOS);
//
//        ProtocoloContratos protocoloContratos = new ProtocoloContratos();;
//        protocoloContratos.setProtocolo(protocolo);
//        protocoloContratos.setContratoMatrizRisco(contratosMatrizRiscos.get(0));
//
//        protocoloContratosService.salvar(protocoloContratos);
//
//    }


    public FinalizacaoPreenchimento obterFinalizacao(FinalizacaoPreenchimentoDTO finalizacaoPreenchimentoDTO) {
        Long anoReferencia = finalizacaoPreenchimentoDTO.getAnoReferencia();

        List<AtoNormativoEri> atosNormativoEri = atoNormativoService.consultarAtoNormativoPorAnoEEri(anoReferencia, finalizacaoPreenchimentoDTO.getIdEri());
        AtoNormativoEri atoNormativoEri = atosNormativoEri.get(0);

        FinalizacaoPreenchimento finalizacaoPreenchimento = new FinalizacaoPreenchimento();
        finalizacaoPreenchimento.setDataFinalizacao(new Date());
        finalizacaoPreenchimento.setAnoReferencia(anoReferencia);
        finalizacaoPreenchimento.setAgenciaReguladora(atoNormativoEri.getEntidadeReguladora());
        finalizacaoPreenchimento.setAtoNormativoEri(atoNormativoEri);
        finalizacaoPreenchimento.setConformidadeAtoNormativoEri(atoNormativoEri.getAtoConforme() != null
                && atoNormativoEri.getAtoConforme() ? "Sim" : "Não");
        finalizacaoPreenchimento.setPreenchimentoFinalizado(true);
        finalizacaoPreenchimento = repository.save(finalizacaoPreenchimento);

        return finalizacaoPreenchimento;
    }

    private Protocolo gerarNovoProtocolo(Long anoReferencia , AgenciaReguladora agenciaReguladora, Long norma) {
        Protocolo protocolo = new Protocolo();
        protocolo.setNumeroProtocolo("Protocolo");
        protocolo.setDataEnvio(LocalDateTime.now());
        protocolo.setNormasDeRefrencia(normasDeReferenciaService.findById(norma));
        protocolo.setEntidadeReguladora(agenciaReguladora);
        protocolo.setAnoReferencia(anoReferencia);
        protocoloService.criarProtocolo(protocolo);
        protocolo = protocoloService.gerarNumeroProtocolo(protocolo);
        protocoloService.criarProtocolo(protocolo);

        return protocolo;
    }


    @Override
    public Boolean validarFinalizacao(Long ano, Long idEri) {
        return repository.existsByAgenciaReguladoraAndAnoReferencia(ano, idEri).size() >= 1;
    }

    public void finalizarPrimeiroAnoColeta(FinalizacaoPreenchimentoDTO finalizacaoPreenchimentoDTO) {
        obterFinalizacaoPrimeiroAnoColeta(finalizacaoPreenchimentoDTO);
    }

    @Transactional
    public void excluirFinalizacaoPreenchimentoPrimeiraColeta(Long ano, Long idEri) {
        FinalizacaoPreenchimento finalizacaoPreenchimento = repository.buscarFinalizacaoPorAgenciaReguladoraEAnoReferencia(ano, idEri);
        repository.delete(finalizacaoPreenchimento);
    }

    public RespostaValidacao validarPrimeiraColeta(Long anoReferencia, Long idEri) {
        List<String> mensagens = new ArrayList<>();

        Boolean jaPossuiFinalizacao = finalizacaoPreenchimentoService.validarFinalizacao(anoReferencia, idEri);
        if (jaPossuiFinalizacao) {
            throw new NegocioException("Já existe uma finalização para este ano e eri!.");
        }

        AtoNormativoEri atosNormativoEri = atoNormativoService.buscarAtoNormativoValido(anoReferencia, idEri);
        if (atosNormativoEri == null) {
            mensagens.add("Não é possível finalizar pois não foi cadastrado as informações do " +
                    "Ato normativo da ERI para esse ano de referência.");
        }

        boolean sucesso = mensagens.isEmpty();
        return new RespostaValidacao(sucesso, mensagens);
    }

    public FinalizacaoPreenchimento obterFinalizacaoPrimeiroAnoColeta(FinalizacaoPreenchimentoDTO finalizacaoPreenchimentoDTO) {
        Long anoReferencia = finalizacaoPreenchimentoDTO.getAnoReferencia();

        List<AtoNormativoEri> atosNormativoEri = atoNormativoService.consultarAtoNormativoPorAnoEEri(anoReferencia, finalizacaoPreenchimentoDTO.getIdEri());
        AtoNormativoEri atoNormativoEri = atosNormativoEri.get(0);

        FinalizacaoPreenchimento finalizacaoPreenchimento = new FinalizacaoPreenchimento();
        finalizacaoPreenchimento.setDataFinalizacao(new Date());
        finalizacaoPreenchimento.setAnoReferencia(anoReferencia);
        finalizacaoPreenchimento.setAgenciaReguladora(atoNormativoEri.getEntidadeReguladora());
        finalizacaoPreenchimento.setAtoNormativoEri(atoNormativoEri);
        finalizacaoPreenchimento.setConformidadeAtoNormativoEri(atoNormativoEri.getAtoConforme() != null
                && atoNormativoEri.getAtoConforme() ? "Sim" : "Não");
        finalizacaoPreenchimento.setPreenchimentoFinalizado(true);
        finalizacaoPreenchimento = repository.save(finalizacaoPreenchimento);

        Protocolo protocolo = gerarNovoProtocolo(atoNormativoEri.getAnoReferencia(), atoNormativoEri.getEntidadeReguladora(), NORMA_MATRIZ_RISCOS);

        ProtocoloAtoNormativo protocoloAtoNormativo = new ProtocoloAtoNormativo();;
        protocoloAtoNormativo.setProtocolo(protocolo);
        protocoloAtoNormativo.setAtoNormativoEri(atoNormativoEri);

        protocoloAtoNormativoService.salvar(protocoloAtoNormativo);

        return finalizacaoPreenchimento;
    }

    @Transactional
    public void excluirFinalizacaoPreenchimento(Long ano, Long idEri) {
        FinalizacaoPreenchimento finalizacaoPreenchimento = repository.buscarFinalizacaoPorAgenciaReguladoraEAnoReferencia(ano, idEri);
        repository.delete(finalizacaoPreenchimento);
    }
}


// Fim do arquivo: FinalizacaoPreenchimentoServiceImpl.java

// Arquivo: FormularioService.java
// Caminho: \br\gov\ana\sarsb\service\FormularioService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;

public interface FormularioService {
	
	Long salvarFormulario(FormularioDTO formulario) throws NegocioException;
	
	FormularioDTO recuperarFormulario(String cnpj, Long idTipoFormulario) throws NegocioException;

}


// Fim do arquivo: FormularioService.java

// Arquivo: FormularioServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\FormularioServiceImpl.java

package br.gov.ana.sarsb.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaRepository;
import br.gov.ana.sarsb.util.SasbUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.CadastranteDTO;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaDTO;
import br.gov.ana.sarsb.model.dto.municipio.PrefeituraDTO;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioSmrsuDTO;
import br.gov.ana.sarsb.model.entity.RascunhoCadastro;
import br.gov.ana.sarsb.model.entity.TipoFormulario;

@Service
public class FormularioServiceImpl implements FormularioService {

	@Autowired
	private RascunhoCadastroService rascunhoCadastroService;

	@Autowired
	private InstrumentoCobrancaRepository instrumentoCobrancaRepository;

	@Autowired
	private  InstrumentoCobrancaMunicipioService instrumentoCobrancaMunicipioService;
	
	@Autowired
	private PrefeituraService prefeituraService;
	
	@Autowired
	private CadastranteService cadastranteService;
	
	@Autowired
	private InstrumentoCobrancaService instrumentoCobrancaService;

	@Override
	public Long salvarFormulario(FormularioDTO formulario) throws NegocioException {
		try {
			if (formulario.getRascunho()) {
				rascunhoCadastroService.salvarRascunho(formulario);
			} else {
				cadastranteService.salvarCadastrante(formulario.getFormularioSmrsuDTO().getCadastrante());
				Long numeroRecibo = instrumentoCobrancaService.salvarInstrumentoCobranca(formulario.getFormularioSmrsuDTO());
				// Não há retorno de valor, você pode executar ações adicionais aqui, se necessário.
				return numeroRecibo;
			}
		} catch (Exception e) {
			// Lança uma exceção personalizada caso ocorra um erro durante o salvamento do formulário
			throw new NegocioException("Erro ao salvar formulário", e);
		}
		return null;
	}



	@Override
	public FormularioDTO recuperarFormulario(String cnpj, Long idTipoFormulario) throws NegocioException {
		RascunhoCadastro rc = rascunhoCadastroService.recuperarRascunho(cnpj, new TipoFormulario(idTipoFormulario));
		if(Objects.nonNull(rc)) {
			FormularioDTO form = FormularioDTO.builder()
				.id(rc.getId())
				.rascunho(Boolean.TRUE)
				.tipoFormulario(rc.getTipoFormulario())
				.build();
			
			if(rc.getTipoFormulario().getId().equals(TipoFormulario.FORMULARIO_SMRSU.getId())) {
				form.setFormularioSmrsuDTO(criarFormularioSmrsu(rc));
			}
			
			return form;
		} else {
			FormularioDTO form = FormularioDTO.builder()
					.rascunho(Boolean.FALSE)
					.tipoFormulario(new TipoFormulario(idTipoFormulario))
					.build();
			
			if(form.getTipoFormulario().getId().equals(TipoFormulario.FORMULARIO_SMRSU.getId())) {
				form.setFormularioSmrsuDTO(criarFormularioSmrsu(cnpj));
			}
			return form;
		}
	}
	
	private FormularioSmrsuDTO criarFormularioSmrsu(RascunhoCadastro rc) {
		try {
			FormularioSmrsuDTO dto = new ObjectMapper().readValue(rc.getRascunho(), FormularioSmrsuDTO.class);
			dto.setPodeRetificar(rc.getPrefeitura().getPodeRetificar());
			dto.setDesativarCronograma(rc.getPrefeitura().getDesativarCronograma());
			return dto;
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;
	}



	private FormularioSmrsuDTO criarFormularioSmrsu(String cnpj) {
		PrefeituraDTO prefeituraDTO = prefeituraService.pesquisarPorCnpj(cnpj);
		CadastranteDTO cadastranteDTO = cadastranteService.recuperarCadastranteid(prefeituraDTO.getId());
		List<InstrumentoCobrancaDTO> listaInstrumentoCobrancaDTO = instrumentoCobrancaService
				.recuperarInstrumentoCobranca(prefeituraDTO.getId());

		cadastranteDTO.setPrefeitura(prefeituraDTO);
		listaInstrumentoCobrancaDTO.forEach(i -> i.setPrefeitura(prefeituraDTO));

		return FormularioSmrsuDTO.builder().prefeitura(prefeituraDTO).cadastrante(cadastranteDTO)
				.listaInstrumentoCobranca(listaInstrumentoCobrancaDTO)
				.formularioSmrsuJaCadastrado(verificaSeJaFoiCadastrado(listaInstrumentoCobrancaDTO))
				.podeRetificar(prefeituraDTO.getPodeRetificar())
				.desativarCronograma(prefeituraDTO.getDesativarCronograma())
				.build();
	}


	private boolean verificaSeJaFoiCadastrado(List<InstrumentoCobrancaDTO> listaInstrumentoCobrancaDTO) {
		for(InstrumentoCobrancaDTO i : listaInstrumentoCobrancaDTO) {
			if(i.getDataCadastro() != null && i.getNumeroRecibo() != null) {
				return true;
			}
		}
		return false;
	}


}


// Fim do arquivo: FormularioServiceImpl.java

// Arquivo: GerarRelatorioService.java
// Caminho: \br\gov\ana\sarsb\service\GerarRelatorioService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ContratoMatrizRiscoDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;

import java.time.LocalDateTime;
import java.util.List;

public interface GerarRelatorioService {

	void gerarReciboSmrsu(ReciboDTO reciboDTO) throws NegocioException;

	void gerarReciboRetificadoSmrsu(ReciboDTO reciboDTO) throws NegocioException;

	void gerarReciboAgencia(ReciboDTO reciboDTO) throws NegocioException;

	void gerarReciboAgenciaNorma2(ReciboDTO reciboDTO) throws NegocioException;

	void gerarReciboAtoNormativo(ReciboDTO reciboDTO, AtoNormativoEriDTO atoNormativoEriDTO,
								 AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) throws NegocioException;

	void gerarReciboContrato(ReciboDTO reciboDTO, AgenciaReguladora agenciaReguladora,
							 List<ContratoMatrizRiscoDTO> listaContratos, LocalDateTime dataEnvioProtocolo) throws NegocioException;

	void gerarReciboConformidade(ReciboDTO reciboDTO, ConformidadeEntidade conformidadeEntidade,
								 AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) throws NegocioException;

	void gerarReciboConformidadeSegundaAba(ReciboDTO reciboDTO, ConformidadeEntidade conformidadeEntidade,
										   AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio, List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS, List<ConformidadeServicoDTO> conformidadeServicoDTOS, List<CondicaoAtividade> condicaoAtividades) throws NegocioException;

	void gerarReciboRegulacaoTarifaria(ReciboDTO reciboDTO, List<RegulacaoTarifaria> regulacaoTarifarias,
									   List<ContratoServicoAtividadeSelecionada> contratoServicoAtividadeSelecionadas, LocalDateTime dataEnvioProtocolo, List<MunicipioContrato> municipioContratoes) throws NegocioException;

	void gerarReciboAtoDetalhado(ReciboDTO reciboDTO, AtoNormativoDetalhado atoNormativoDetalhado, AgenciaReguladora agenciaReguladora,
								 LocalDateTime dataEnvioProtocolo) throws NegocioException;

	void gerarReciboContratoDetalhado(ReciboDTO recibo, ContratoDetalhamento ato, AgenciaReguladora agenciaReguladora, LocalDateTime dataEnvio, String codigoInterno);
	void gerarReciboRequisitoComplementar(ReciboDTO reciboDTO, RequisitoComplementarDTO requisitoComplementarDTO,
								 AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) throws NegocioException;
}



// Fim do arquivo: GerarRelatorioService.java

// Arquivo: GerarRelatorioServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\GerarRelatorioServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AtoNormativoEriDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ContratoMatrizRiscoDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.relatorio.apachepoi.*;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class GerarRelatorioServiceImpl implements GerarRelatorioService {


    @Override
    public void gerarReciboSmrsu(ReciboDTO reciboDTO) throws NegocioException {
        try {
            GerarComprovanteReciboSmrsu.getInstance(System.getProperty("java.io.tmpdir")).replaceWord(reciboDTO);
        } catch (Exception e) {
            throw new NegocioException("Erro ao gerar recibo", e);
        }
    }

    @Override
    public void gerarReciboAgencia(ReciboDTO reciboDTO) throws NegocioException {
        try {
            GerarComprovanteReciboAgencia.getInstance(System.getProperty("java.io.tmpdir")).replaceWord(reciboDTO, false);
        } catch (Exception e) {
            throw new NegocioException("Erro ao gerar recibo", e);
        }
    }

    @Override
    public void gerarReciboRetificadoSmrsu(ReciboDTO reciboDTO) throws NegocioException {
        try {
            GerarComprovanteReciboSmrsu.getInstance(System.getProperty("java.io.tmpdir")).replaceWordRetificado(reciboDTO);
        } catch (Exception e) {
            throw new NegocioException("Erro ao gerar recibo", e);
        }
    }

    @Override
    public void gerarReciboAgenciaNorma2(ReciboDTO reciboDTO) throws NegocioException {
        try {
            GerarComprovanteReciboAgencia.getInstance(System.getProperty("java.io.tmpdir")).replaceWord(reciboDTO, false);
        } catch (Exception e) {
            throw new NegocioException("Erro ao gerar recibo", e);
        }
    }

	public void gerarReciboAtoNormativo(ReciboDTO reciboDTO, AtoNormativoEriDTO atoNormativoEriDTO,
										AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) throws NegocioException {
		try {
			GerarComprovanteReciboMatrizDeRiscos.getInstance(System.getProperty("java.io.tmpdir"))
					.replaceWordAto(reciboDTO, atoNormativoEriDTO, agenciaReguladora, protocoloEnvio);
		} catch (Exception e) {
			throw new NegocioException("Erro ao gerar recibo", e);
		}
	}

    public void gerarReciboConformidade(ReciboDTO reciboDTO, ConformidadeEntidade conformidadeEntidade,
                                        AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) throws NegocioException {
        try {
            GerarComprovanteReciboConformidade.getInstance(System.getProperty("java.io.tmpdir"))
                    .replaceWordCondicaoGeral(reciboDTO, conformidadeEntidade, agenciaReguladora, protocoloEnvio);
        } catch (Exception e) {
            throw new NegocioException("Erro ao gerar recibo", e);
        }
    }

    @Override
    public void gerarReciboConformidadeSegundaAba(ReciboDTO reciboDTO, ConformidadeEntidade conformidadeEntidade, AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio, List<ConformidadeEntidadeServicosDTO> conformidadeEntidadeServicosDTOS, List<ConformidadeServicoDTO> conformidadeServicoDTOS, List<CondicaoAtividade> condicaoAtividades ) throws NegocioException {
        try {
            GerarComprovanteReciboConformidade.getInstance(System.getProperty("java.io.tmpdir"))
                    .replaceWordCondicaoGeralSegundaAba(reciboDTO, conformidadeEntidade, agenciaReguladora, protocoloEnvio, conformidadeEntidadeServicosDTOS, conformidadeServicoDTOS, condicaoAtividades);
        } catch (Exception e) {
            throw new NegocioException("Erro ao gerar recibo", e);
        }

    }

	public void gerarReciboContrato(ReciboDTO reciboDTO, AgenciaReguladora agenciaReguladora,
									List<ContratoMatrizRiscoDTO> listaContratos, LocalDateTime dataEnvioProtocolo) throws NegocioException {
		try {
			GerarComprovanteReciboMatrizDeRiscos.getInstance(System.getProperty("java.io.tmpdir"))
					.replaceWordContratos(reciboDTO, agenciaReguladora, listaContratos, dataEnvioProtocolo);
		} catch (Exception e) {
			throw new NegocioException("Erro ao gerar recibo", e);
		}
	}

	public void gerarReciboRegulacaoTarifaria(ReciboDTO reciboDTO, List<RegulacaoTarifaria> regulacaoTarifarias,
											  List<ContratoServicoAtividadeSelecionada> contratoServicoAtividadeSelecionadas, LocalDateTime dataEnvioProtocolo, List<MunicipioContrato> municipioContratoes) throws NegocioException {
		try {
			GerarComprovanteRegulacaoTarifaria.getInstance(System.getProperty("java.io.tmpdir"))
					.replaceWordContratos(reciboDTO, regulacaoTarifarias, contratoServicoAtividadeSelecionadas, dataEnvioProtocolo, municipioContratoes);
		} catch (Exception e) {
			throw new NegocioException("Erro ao gerar recibo", e);
		}
	}


	public void gerarReciboRequisitoComplementar(ReciboDTO reciboDTO, RequisitoComplementarDTO requisitoComplementarDTO,
										AgenciaReguladora agenciaReguladora, LocalDateTime protocoloEnvio) throws NegocioException {
		try {
			GerarComprovanteReciboRequisitoComplementar.getInstance(System.getProperty("java.io.tmpdir"))
					.replaceWordCondicaoGeral(reciboDTO, requisitoComplementarDTO, agenciaReguladora, protocoloEnvio);
		} catch (Exception e) {
			throw new NegocioException("Erro ao gerar recibo", e);
		}
	}


	public void gerarReciboAtoDetalhado(ReciboDTO reciboDTO, AtoNormativoDetalhado atoNormativoDetalhado, AgenciaReguladora agenciaReguladora,
									 LocalDateTime dataEnvioProtocolo) throws NegocioException {
		try {
			GerarComprovanteIndenizacao.getInstance(System.getProperty("java.io.tmpdir"))
					.replaceWordContratos(reciboDTO, atoNormativoDetalhado, agenciaReguladora, dataEnvioProtocolo);
		} catch (Exception e) {
			throw new NegocioException("Erro ao gerar recibo", e);
		}
	}

	@Override
	public void gerarReciboContratoDetalhado(ReciboDTO recibo, ContratoDetalhamento contratoDetalhamento, AgenciaReguladora agenciaReguladora, LocalDateTime dataEnvio, String codigoInterno) {
		try {
			GerarComprovanteIndenizacao.getInstance(System.getProperty("java.io.tmpdir"))
					.replaceWordContratosDetalhado(recibo, contratoDetalhamento, agenciaReguladora, dataEnvio, codigoInterno);
		} catch (Exception e) {
			throw new NegocioException("Erro ao gerar recibo", e);
		}
	}


}



// Fim do arquivo: GerarRelatorioServiceImpl.java

// Arquivo: InstrumentoCobrancaMunicipioService.java
// Caminho: \br\gov\ana\sarsb\service\InstrumentoCobrancaMunicipioService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.model.entity.InstrumentoCobrancaMunicipio;

import java.util.List;

public interface InstrumentoCobrancaMunicipioService {


	List<InstrumentoCobrancaMunicipioDTO> listarTodos();

	List<InstrumentoCobrancaMunicipioDTO> buscarPorCodigoPrefeitura(Long codigoPrefeitura);

	void deletarPorIdECodigoPrefeitura(Long id, Long codigoPrefeitura);

	void alterar(Long id, Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO);


	void alterarDadosMunicipio(Long id, Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO);

	void salvarInstrumentoCobrancaMunicipio(Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO);

	void salvarInstrumentoCobrancaMunicipio(InstrumentoCobrancaMunicipioDTO instrumento);

	void finalizar(Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO);

	List<InstrumentoCobrancaMunicipioServiceImpl.InstrumentoCobrancaInfo> findByCodigoPrefeituraquerie(Long codigoPrefeitura);

	List<InstrumentoCobrancaMunicipioDTO> recuperarInstrumentoCobranca(Long id);
}

// Fim do arquivo: InstrumentoCobrancaMunicipioService.java

// Arquivo: InstrumentoCobrancaMunicipioServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\InstrumentoCobrancaMunicipioServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.model.enums.Configuracoes;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaMunicipioRepository;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaTemEtapasRepository;
import br.gov.ana.sarsb.repository.PrefeituraRepository;
import br.gov.ana.sarsb.util.Constantes;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

@Service
public class InstrumentoCobrancaMunicipioServiceImpl implements InstrumentoCobrancaMunicipioService {

	private ConfigCache cc = ConfigCache.getInstance();

	@Autowired
	private InstrumentoCobrancaMunicipioRepository instrumentoCobrancaMunicipioRepository;

	@Autowired
	private InstrumentoCobrancaTemEtapasRepository instrumentoCobrancaTemEtapasRepository;

	@Autowired
	private FormularioService formularioService;

	@Autowired
	private FileStorageService fileStorageService;

	@Autowired
	private GerarRelatorioService gerarRelatorioService;


	@Autowired
	private PrefeituraRepository prefeituraRepository;


	private void copiarArquivo(String nomeArquivo, Long numeroReciboRetificado, Long numeroRecibo) throws IOException {
		Path pathSource = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroReciboRetificado);
		Path pathDestination = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroRecibo);
		fileStorageService.copy(nomeArquivo, pathSource, pathDestination);
	}

	private void migrarArquivosInstrumentoAnterior(InstrumentoCobranca i) {
		try {
			if(Objects.nonNull(i.getArquivoModificado()) && !i.getArquivoModificado()) {
				copiarArquivo(i.getArquivo(), i.getNumeroReciboRetificado(), i.getNumeroRecibo());
			}
			if(Objects.nonNull(i.getArquivoCronogramaModificado()) && !i.getArquivoCronogramaModificado()) {
				copiarArquivo(i.getArquivoCronograma(), i.getNumeroReciboRetificado(), i.getNumeroRecibo());
			}
			Optional<Prefeitura> prefeituraOptional = prefeituraRepository.findById(i.getPrefeitura().getId());
			if(prefeituraOptional.isPresent() && Objects.nonNull(prefeituraOptional.get().getArquivoAtoDelegacao()) && !i.getPrefeitura().getArquivoAtoDelegacaoModificado()) {
				copiarArquivo(prefeituraOptional.get().getArquivoAtoDelegacao(), i.getNumeroReciboRetificado(), i.getNumeroRecibo());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	private void deletarArquivos(Long numeroRecibo) throws IOException {
		try {
			Path path = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroRecibo);
			fileStorageService.removeFilesByDirectory(path);
		} catch (IOException e) {
			throw new NegocioException("Erro ao deletar arquivos", e);
		}
	}


	@Override
	public List<InstrumentoCobrancaMunicipioDTO> listarTodos() {
		List<InstrumentoCobrancaMunicipio> instrumentos = instrumentoCobrancaMunicipioRepository.findAll();
		List<InstrumentoCobrancaMunicipioDTO> dtos = new ArrayList<>();

		for (InstrumentoCobrancaMunicipio instrumento : instrumentos) {
			InstrumentoCobrancaMunicipioDTO dto = new InstrumentoCobrancaMunicipioDTO();
			dto.setId(instrumento.getId());
			dto.setImplementado(instrumento.getImplementado());
			dto.setArquivo(instrumento.getArquivo());
			dto.setNumeroRecibo(instrumento.getNumeroRecibo());
			dto.setNumeroReciboRetificado(instrumento.getNumeroReciboRetificado());
			dto.setDataCadastro(instrumento.getDataCadastro());
			dto.setDataAtualizacao(instrumento.getDataAtualizacao());
			dto.setPrestadorMunicipio(instrumento.getPrestadorMunicipio());
			dto.setRegimeCobranca(instrumento.getRegimeCobranca());
			dto.setUnicoPrestador(instrumento.getUnicoPrestador());
			dto.setEtapaServico(instrumento.getEtapaServico());
			dto.setSubcategoriaNaturezaPrestador(instrumento.getSubcategoriaNaturezaPrestador());
			dto.setNaturezaPrestador(instrumento.getNaturezaPrestador());
			dto.setCobrancaSocial(instrumento.getCobrancaSocial());
			dto.setValorCobradoBase(instrumento.getValorCobradoBase());
			dto.setCategoriasUsuario(instrumento.getCategoriasUsuario());
			dto.setParametroCobranca(instrumento.getParametroCobranca());
			dto.setDocumentoArrecadacao(instrumento.getDocumentoArrecadacao());
			dto.setInstrumentoLegal(instrumento.getInstrumentoLegal());
			dto.setOutrosParamentroCobranca(instrumento.getOutrosParamentroCobranca());
			dto.setOutrosParamentroCobrancaUsuario(instrumento.getOutrosParamentroCobrancaUsuario());
			dto.setOutrosParamentroCobrancaSocial(instrumento.getOutrosParamentroCobrancaSocial());
			dto.setCodigoCadastrante(instrumento.getCodigoCadastrante());
			dto.setCodigoPrefeitura(instrumento.getCodigoPrefeitura());
			dto.setRascunho(instrumento.getRascunho());
			dto.setAceiteLgpd(instrumento.getAceiteLgpd());

			dto.setAnoExercicio(instrumento.getAnoExercicio());
			dto.setCdSus(instrumento.getCdSus());
			dto.setRecRequerida(instrumento.getRecRequerida());
			dto.setValArrecadado(instrumento.getValArrecadado());
			dto.setValSubsTarifario(instrumento.getValSubsTarifario());
			dto.setSusVerSusten(instrumento.getSusVerSusten());
			dto.setSubValArrecadadoAlt(instrumento.getSubValArrecadadoAlt());
			dto.setSusConfVerif(instrumento.getSusConfVerif());
			dto.setSusAceite(instrumento.getSusAceite());
			dto.setSusUploadDocSus(instrumento.getSusUploadDocSus());


			dtos.add(dto);
		}

		return dtos;
	}


	public List<InstrumentoCobrancaMunicipioDTO> buscarPorCodigoPrefeitura(Long codigoPrefeitura) {
		List<InstrumentoCobrancaMunicipio> instrumentos = instrumentoCobrancaMunicipioRepository.findByCodigoPrefeitura(codigoPrefeitura);
		List<InstrumentoCobrancaMunicipioDTO> dtos = new ArrayList<>();

		for (InstrumentoCobrancaMunicipio instrumento : instrumentos) {
			InstrumentoCobrancaMunicipioDTO dto = new InstrumentoCobrancaMunicipioDTO();
			dto.setId(instrumento.getId());
			dto.setImplementado(instrumento.getImplementado());
			dto.setArquivo(instrumento.getArquivo());
			dto.setNumeroRecibo(instrumento.getNumeroRecibo());
			dto.setNumeroReciboRetificado(instrumento.getNumeroReciboRetificado());
			dto.setDataCadastro(instrumento.getDataCadastro());
			dto.setDataAtualizacao(instrumento.getDataAtualizacao());
			dto.setPrestadorMunicipio(instrumento.getPrestadorMunicipio());
			dto.setRegimeCobranca(instrumento.getRegimeCobranca());
			dto.setUnicoPrestador(instrumento.getUnicoPrestador());
			dto.setEtapaServico(instrumento.getEtapaServico());
			dto.setSubcategoriaNaturezaPrestador(instrumento.getSubcategoriaNaturezaPrestador());
			dto.setNaturezaPrestador(instrumento.getNaturezaPrestador());
			dto.setCobrancaSocial(instrumento.getCobrancaSocial());
			dto.setValorCobradoBase(instrumento.getValorCobradoBase());
			dto.setCategoriasUsuario(instrumento.getCategoriasUsuario());
			dto.setParametroCobranca(instrumento.getParametroCobranca());
			dto.setDocumentoArrecadacao(instrumento.getDocumentoArrecadacao());
			dto.setInstrumentoLegal(instrumento.getInstrumentoLegal());
			dto.setOutrosParamentroCobranca(instrumento.getOutrosParamentroCobranca());
			dto.setOutrosParamentroCobrancaUsuario(instrumento.getOutrosParamentroCobrancaUsuario());
			dto.setOutrosParamentroCobrancaSocial(instrumento.getOutrosParamentroCobrancaSocial());
			dto.setCodigoCadastrante(instrumento.getCodigoCadastrante());
			dto.setCodigoPrefeitura(instrumento.getCodigoPrefeitura());
			dto.setRascunho(instrumento.getRascunho());
			dto.setAceiteLgpd(instrumento.getAceiteLgpd());
			dto.setOutrosValorCobrado(instrumento.getOutrosValorCobrado());


			dto.setAnoExercicio(instrumento.getAnoExercicio());
			dto.setCdSus(instrumento.getCdSus());
			dto.setRecRequerida(instrumento.getRecRequerida());
			dto.setValArrecadado(instrumento.getValArrecadado());
			dto.setValSubsTarifario(instrumento.getValSubsTarifario());
			dto.setSusVerSusten(instrumento.getSusVerSusten());
			dto.setSubValArrecadadoAlt(instrumento.getSubValArrecadadoAlt());
			dto.setSusUploadDocSus(instrumento.getSusUploadDocSus());
			dto.setSusConfVerif(instrumento.getSusConfVerif());
			dto.setSusAceite(instrumento.getSusAceite());

			dtos.add(dto);
		}

		return dtos;
	}

	public class InstrumentoCobrancaInfo {
		private Boolean CobrancaUnica;
		private BigInteger InstrumentoCobranca;
		private String EtapaServicos;
		private String ParamentroCobranca;
		private String CategoriaCobranca;


		public Boolean getCobrancaUnica() {
			return CobrancaUnica;
		}

		public void setCobrancaUnica(Boolean cobrancaUnica) {
			CobrancaUnica = cobrancaUnica;
		}

		public BigInteger getInstrumentoCobranca() {
			return InstrumentoCobranca;
		}

		public void setInstrumentoCobranca(BigInteger instrumentoCobranca) {
			InstrumentoCobranca = instrumentoCobranca;
		}

		public String getEtapaServicos() {
			return EtapaServicos;
		}

		public void setEtapaServicos(String etapaServicos) {
			EtapaServicos = etapaServicos;
		}

		public String getParamentroCobranca() {
			return ParamentroCobranca;
		}

		public void setParamentroCobranca(String paramentroCobranca) {
			ParamentroCobranca = paramentroCobranca;
		}

		public String getCategoriaCobranca() {
			return CategoriaCobranca;
		}

		public void setCategoriaCobranca(String categoriaCobranca) {
			CategoriaCobranca = categoriaCobranca;
		}
	}

	public List<InstrumentoCobrancaInfo> findByCodigoPrefeituraquerie(Long codigoPrefeitura) {
		List<Object[]> result = instrumentoCobrancaMunicipioRepository.findByCodigoPrefeituraquerie(codigoPrefeitura);

		List<InstrumentoCobrancaInfo> resultList = new ArrayList<>();

		for (Object[] row : result) {
			Boolean cobrancaUnica = (Boolean)row[0];
			BigInteger instrumentoCobranca = (BigInteger) row[1];
			String categoriaCobranca = (String) row[2];
			String parametroCobranca = (String) row[3];
			String etapaServicos  = (String) row[4];

			InstrumentoCobrancaInfo info = new InstrumentoCobrancaInfo();
			info.setCobrancaUnica(cobrancaUnica);
			info.setInstrumentoCobranca(instrumentoCobranca);
			info.setEtapaServicos(etapaServicos);
			info.setParamentroCobranca(categoriaCobranca);
			info.setCategoriaCobranca(categoriaCobranca);

			resultList.add(info);
		}

		return resultList;
	}

	@Override
	public List<InstrumentoCobrancaMunicipioDTO> recuperarInstrumentoCobranca(Long id) {
		return null;
	}


	public void deletarPorIdECodigoPrefeitura(Long id, Long codigoPrefeitura) {
		InstrumentoCobrancaMunicipio instrumento = instrumentoCobrancaMunicipioRepository.findByIdAndCodigoPrefeitura(id, codigoPrefeitura);
		if (instrumento == null) {
			throw new NegocioException("Instrumento de cobrança municipal não encontrado.");
		}

		instrumentoCobrancaMunicipioRepository.delete(instrumento);
	}

	public void alterar(Long id, Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		// Recupera o objeto existente pelo id e código da prefeitura
		InstrumentoCobrancaMunicipio instrumento = instrumentoCobrancaMunicipioRepository.findByIdAndCodigoPrefeitura(id, codigoPrefeitura);

		// Verifica se o objeto foi encontrado, se não, lança uma exceção
		if (instrumento == null) {
			throw new NegocioException("Instrumento de cobrança municipal não encontrado.");
		}

		// Atualiza os campos fornecidos no DTO, se existirem
		if (instrumentoDTO.getPrestadorMunicipio() != null) {
			instrumento.setPrestadorMunicipio(instrumentoDTO.getPrestadorMunicipio());
		}
		if (instrumentoDTO.getNaturezaPrestador() != null) {
			instrumento.setNaturezaPrestador(instrumentoDTO.getNaturezaPrestador());
		}
		if (instrumentoDTO.getSubcategoriaNaturezaPrestador() != null) {
			instrumento.setSubcategoriaNaturezaPrestador(instrumentoDTO.getSubcategoriaNaturezaPrestador());
		}
		if (instrumentoDTO.getDataAtualizacao() != null) {
			instrumento.setDataAtualizacao(instrumentoDTO.getDataAtualizacao());
		}
		if (instrumentoDTO.getRascunho() != null) {
			instrumento.setRascunho(instrumentoDTO.getRascunho());
		}

		// Atualiza outros campos fornecidos, se existirem
		if (instrumentoDTO.getRegimeCobranca() != null) {
			instrumento.setRegimeCobranca(instrumentoDTO.getRegimeCobranca());
		}
		if (instrumentoDTO.getEtapaServico() != null) {
			instrumento.setEtapaServico(instrumentoDTO.getEtapaServico());
		}
		if (instrumentoDTO.getCobrancaSocial() != null) {
			instrumento.setCobrancaSocial(instrumentoDTO.getCobrancaSocial());
		}
		if (instrumentoDTO.getValorCobradoBase() != null) {
			instrumento.setValorCobradoBase(instrumentoDTO.getValorCobradoBase());
		}
		if (instrumentoDTO.getCategoriasUsuario() != null) {
			instrumento.setCategoriasUsuario(instrumentoDTO.getCategoriasUsuario());
		}
		if (instrumentoDTO.getParametroCobranca() != null) {
			instrumento.setParametroCobranca(instrumentoDTO.getParametroCobranca());
		}
		if (instrumentoDTO.getDocumentoArrecadacao() != null) {
			instrumento.setDocumentoArrecadacao(instrumentoDTO.getDocumentoArrecadacao());
		}
		if (instrumentoDTO.getInstrumentoLegal() != null) {
			instrumento.setInstrumentoLegal(instrumentoDTO.getInstrumentoLegal());
		}
		if (instrumentoDTO.getOutrosParamentroCobranca() != null) {
			instrumento.setOutrosParamentroCobranca(instrumentoDTO.getOutrosParamentroCobranca());
		}
		if (instrumentoDTO.getOutrosParamentroCobrancaUsuario() != null) {
			instrumento.setOutrosParamentroCobrancaUsuario(instrumentoDTO.getOutrosParamentroCobrancaUsuario());
		}
		if (instrumentoDTO.getOutrosParamentroCobrancaSocial() != null) {
			instrumento.setOutrosParamentroCobrancaSocial(instrumentoDTO.getOutrosParamentroCobrancaSocial());
		}
		if (instrumentoDTO.getCodigoCadastrante() != null) {
			instrumento.setCodigoCadastrante(instrumentoDTO.getCodigoCadastrante());
		}
		if (instrumentoDTO.getCdSus() != null) {
			instrumento.setCdSus(instrumentoDTO.getCdSus());
		}
		if (instrumentoDTO.getAnoExercicio() != null) {
			instrumento.setAnoExercicio(instrumentoDTO.getAnoExercicio());
		}
		if (instrumentoDTO.getRecRequerida() != null) {
			instrumento.setRecRequerida(instrumentoDTO.getRecRequerida());
		}
		if (instrumentoDTO.getValArrecadado() != null) {
			instrumento.setValArrecadado(instrumentoDTO.getValArrecadado());
		}
		if (instrumentoDTO.getValSubsTarifario() != null) {
			instrumento.setValSubsTarifario(instrumentoDTO.getValSubsTarifario());
		}
		if (instrumentoDTO.getSubValArrecadadoAlt() != null) {
			instrumento.setSubValArrecadadoAlt(instrumentoDTO.getSubValArrecadadoAlt());
		}
		if (instrumentoDTO.getSusVerSusten() != null) {
			instrumento.setSusVerSusten(instrumentoDTO.getSusVerSusten());
		}
		if (instrumentoDTO.getSusUploadDocSus() != null) {
			instrumento.setSusUploadDocSus(instrumentoDTO.getSusUploadDocSus());
		}
		if (instrumentoDTO.getSusConfVerif() != null) {
			instrumento.setSusConfVerif(instrumentoDTO.getSusConfVerif());
		}
		if (instrumentoDTO.getSusAceite() != null) {
			instrumento.setSusAceite(instrumentoDTO.getSusAceite());
		}

		// Salva o objeto original com as alterações feitas.
		instrumentoCobrancaMunicipioRepository.save(instrumento);
	}



	public void alterarDadosMunicipio(Long id, Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		InstrumentoCobrancaMunicipio instrumento = instrumentoCobrancaMunicipioRepository.findByIdAndCodigoPrefeitura(id, codigoPrefeitura);
		if (instrumento == null) {
			throw new NegocioException("Instrumento de cobrança municipal não encontrado.");
		}

		// Atualize os campos apenas se eles forem fornecidos no DTO
		if (instrumentoDTO.getImplementado() != null) {
			instrumento.setImplementado(instrumentoDTO.getImplementado());
		}
		if (instrumentoDTO.getArquivo() != null) {
			instrumento.setArquivo(instrumentoDTO.getArquivo());
		}

		if (instrumentoDTO.getDataAtualizacao() != null) {
			instrumento.setDataAtualizacao(instrumentoDTO.getDataAtualizacao());
		}

		if (instrumentoDTO.getRegimeCobranca() != null) {
			instrumento.setRegimeCobranca(instrumentoDTO.getRegimeCobranca());
		}

		if (instrumentoDTO.getEtapaServico() != null) {
			instrumento.setEtapaServico(instrumentoDTO.getEtapaServico());
		}
		if (instrumentoDTO.getSubcategoriaNaturezaPrestador() != null) {
			instrumento.setSubcategoriaNaturezaPrestador(instrumentoDTO.getSubcategoriaNaturezaPrestador());
		}
		if (instrumentoDTO.getNaturezaPrestador() != null) {
			instrumento.setNaturezaPrestador(instrumentoDTO.getNaturezaPrestador());
		}
		if (instrumentoDTO.getCobrancaSocial() != null) {
			instrumento.setCobrancaSocial(instrumentoDTO.getCobrancaSocial());
		}
		if (instrumentoDTO.getValorCobradoBase() != null) {
			instrumento.setValorCobradoBase(instrumentoDTO.getValorCobradoBase());
		}
		if (instrumentoDTO.getCategoriasUsuario() != null) {
			instrumento.setCategoriasUsuario(instrumentoDTO.getCategoriasUsuario());
		}
		if (instrumentoDTO.getParametroCobranca() != null) {
			instrumento.setParametroCobranca(instrumentoDTO.getParametroCobranca());
		}
		if (instrumentoDTO.getDocumentoArrecadacao() != null) {
			instrumento.setDocumentoArrecadacao(instrumentoDTO.getDocumentoArrecadacao());
		}
		if (instrumentoDTO.getInstrumentoLegal() != null) {
			instrumento.setInstrumentoLegal(instrumentoDTO.getInstrumentoLegal());
		}
		if (instrumentoDTO.getOutrosParamentroCobranca() != null) {
			instrumento.setOutrosParamentroCobranca(instrumentoDTO.getOutrosParamentroCobranca());
		}
		if (instrumentoDTO.getOutrosParamentroCobrancaUsuario() != null) {
			instrumento.setOutrosParamentroCobrancaUsuario(instrumentoDTO.getOutrosParamentroCobrancaUsuario());
		}
		if (instrumentoDTO.getOutrosParamentroCobrancaSocial() != null) {
			instrumento.setOutrosParamentroCobrancaSocial(instrumentoDTO.getOutrosParamentroCobrancaSocial());
		}
		if (instrumentoDTO.getCodigoCadastrante() != null) {
			instrumento.setCodigoCadastrante(instrumentoDTO.getCodigoCadastrante());
		}

		if (instrumentoDTO.getRascunho() != null) {
			instrumento.setRascunho(instrumentoDTO.getRascunho());
		}

		if (instrumentoDTO.getCdSus() != null) {
			instrumento.setCdSus(instrumentoDTO.getCdSus());
		}
		if (instrumentoDTO.getAnoExercicio() != null) {
			instrumento.setAnoExercicio(instrumentoDTO.getAnoExercicio());
		}
		if (instrumentoDTO.getRecRequerida() != null) {
			instrumento.setRecRequerida(instrumentoDTO.getRecRequerida());
		}
		if (instrumentoDTO.getValArrecadado() != null) {
			instrumento.setValArrecadado(instrumentoDTO.getValArrecadado());
		}
		if (instrumentoDTO.getValSubsTarifario() != null) {
			instrumento.setValArrecadado(instrumentoDTO.getValSubsTarifario());
		}
		if (instrumentoDTO.getSubValArrecadadoAlt() != null) {
			instrumento.setSubValArrecadadoAlt(instrumentoDTO.getSubValArrecadadoAlt());
		}
		if (instrumentoDTO.getSusVerSusten() != null) {
			instrumento.setSusVerSusten(instrumentoDTO.getSusVerSusten());
		}
		if (instrumentoDTO.getSusUploadDocSus() != null) {
			instrumento.setSusUploadDocSus(instrumentoDTO.getSusUploadDocSus());
		}
		if (instrumentoDTO.getSusConfVerif() != null) {
			instrumento.setSusConfVerif(instrumentoDTO.getSusConfVerif());
		}
		if (instrumentoDTO.getSusAceite() != null) {
			instrumento.setSusAceite(instrumentoDTO.getSusAceite());
		}

		instrumentoCobrancaMunicipioRepository.save(instrumento);
	}


	public void salvarInstrumentoCobrancaMunicipio(Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		InstrumentoCobrancaMunicipio instrumento = instrumentoCobrancaMunicipioRepository.codigoPrefeitura(codigoPrefeitura);
		// Atualize os campos apenas se eles forem fornecidos no DTO


		instrumento.setImplementado(instrumentoDTO.getImplementado());
		instrumento.setArquivo(instrumentoDTO.getArquivo());
		instrumento.setDataAtualizacao(instrumentoDTO.getDataAtualizacao());
		instrumento.setRegimeCobranca(instrumentoDTO.getRegimeCobranca());
		instrumento.setEtapaServico(instrumentoDTO.getEtapaServico());
		instrumento.setSubcategoriaNaturezaPrestador(instrumentoDTO.getSubcategoriaNaturezaPrestador());
		instrumento.setNaturezaPrestador(instrumentoDTO.getNaturezaPrestador());
		instrumento.setCobrancaSocial(instrumentoDTO.getCobrancaSocial());
		instrumento.setValorCobradoBase(instrumentoDTO.getValorCobradoBase());

		instrumento.setCategoriasUsuario(instrumentoDTO.getCategoriasUsuario());

		instrumento.setParametroCobranca(instrumentoDTO.getParametroCobranca());

		instrumento.setDocumentoArrecadacao(instrumentoDTO.getDocumentoArrecadacao());

		instrumento.setInstrumentoLegal(instrumentoDTO.getInstrumentoLegal());

		instrumento.setOutrosParamentroCobranca(instrumentoDTO.getOutrosParamentroCobranca());

		instrumento.setOutrosParamentroCobrancaUsuario(instrumentoDTO.getOutrosParamentroCobrancaUsuario());

		instrumento.setOutrosParamentroCobrancaSocial(instrumentoDTO.getOutrosParamentroCobrancaSocial());

		instrumento.setCodigoCadastrante(instrumentoDTO.getCodigoCadastrante());


		instrumento.setRascunho(instrumentoDTO.getRascunho());


		instrumentoCobrancaMunicipioRepository.save(instrumento);
	}

	@Override
	public void salvarInstrumentoCobrancaMunicipio(InstrumentoCobrancaMunicipioDTO instrumento) {

	}

	@Override
	public void finalizar(Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO) {
		List<InstrumentoCobrancaMunicipio> municipios = instrumentoCobrancaMunicipioRepository.findByCodigoPrefeitura(codigoPrefeitura);

		for (InstrumentoCobrancaMunicipio municipio : municipios) {

			if (instrumentoDTO.getNumeroRecibo() != null) {
				municipio.setNumeroRecibo(instrumentoDTO.getNumeroRecibo());
			}

			if (instrumentoDTO.getRascunho() != null) {
				municipio.setRascunho(instrumentoDTO.getRascunho());
			}

			if (instrumentoDTO.getDataAtualizacao() != null) {
				municipio.setDataAtualizacao(instrumentoDTO.getDataAtualizacao());
			}


			if (instrumentoDTO.getAceiteLgpd() != null) {
				municipio.setAceiteLgpd(instrumentoDTO.getAceiteLgpd());
			}

		}
		instrumentoCobrancaMunicipioRepository.saveAll(municipios);
	}


}


// Fim do arquivo: InstrumentoCobrancaMunicipioServiceImpl.java

// Arquivo: InstrumentoCobrancaRelatorioService.java
// Caminho: \br\gov\ana\sarsb\service\InstrumentoCobrancaRelatorioService.java

package br.gov.ana.sarsb.service;


import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaRelatorioDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.util.List;

public interface InstrumentoCobrancaRelatorioService {




	List<InstrumentoCobrancaRelatorioDTO> getInstrumentosPorIdPrefeitura(Long idPrefeitura);
}


// Fim do arquivo: InstrumentoCobrancaRelatorioService.java

// Arquivo: InstrumentoCobrancaRelatorioServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\InstrumentoCobrancaRelatorioServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaRelatorioDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

@Service
public class InstrumentoCobrancaRelatorioServiceImpl implements InstrumentoCobrancaRelatorioService {

    @Autowired
    private EntityManager entityManager;

    public List<InstrumentoCobrancaRelatorioDTO> getInstrumentosPorIdPrefeitura(Long idPrefeitura) {
        String queryString = "SELECT iscm_cd, parcob_ds, iscm_isc_pft_cd, tes_ds, prt_nm_razaosocial, catg_ds, regcob_ds, til_ds, iscm_ic_unicoetapassmrsu, tcp_ds, tsp_ds FROM vw_listainstrumentodecobranca_municipios WHERE iscm_isc_pft_cd = :idPrefeitura";

        Query query = entityManager.createNativeQuery(queryString);
        query.setParameter("idPrefeitura", idPrefeitura);

        List<Object[]> results = query.getResultList();

        List<InstrumentoCobrancaRelatorioDTO> instrumentos = new ArrayList<>();

        for (Object[] result : results) {
            InstrumentoCobrancaRelatorioDTO dto = new InstrumentoCobrancaRelatorioDTO();

            dto.setCodigo((BigInteger) result[0]);

            // Certifique-se de que result[1] seja do tipo String antes de fazer o cast
            dto.setParamentoCobranca((String) result[1]);

            // Certifique-se de que result[2] seja do tipo BigInteger antes de fazer o cast
            if (result[2] instanceof Long) {
                dto.setCodigoPrefeitura((Long) result[2]);
            } else {
                // Tratar caso em que result[2] não é BigInteger
            }

            dto.setEtapaDescricao((String) result[3]);
            dto.setNomePrestador((String) result[4]);
            dto.setCategoriaDescricao((String) result[5]);
            dto.setRegimeCobranca((String) result[6]);
            dto.setInstrumentoCobranca((String) result[7]);
            dto.setUnicoprestador((String) result[8]);
            dto.setNaturezaPrestador((String) result[9]);
            dto.setSubcategoriaPrestador((String) result[10]);

            // Adicione o objeto DTO preenchido à lista
            instrumentos.add(dto);
        }


        return instrumentos;
    }

}



// Fim do arquivo: InstrumentoCobrancaRelatorioServiceImpl.java

// Arquivo: InstrumentoCobrancaService.java
// Caminho: \br\gov\ana\sarsb\service\InstrumentoCobrancaService.java

package br.gov.ana.sarsb.service;

import java.io.File;
import java.util.List;

import br.gov.ana.sarsb.model.entity.InstrumentoCobranca;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaDTO;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioSmrsuDTO;

public interface InstrumentoCobrancaService {
	
	Long salvarInstrumentoCobranca(FormularioSmrsuDTO formulario ) throws NegocioException;
	List<InstrumentoCobrancaDTO> recuperarInstrumentoCobranca(Long idPrefeitura) throws NegocioException;


	File gerarReciboComprovante(Long numeroRecibo, String cnppj);

	void salvarArquivo(Long numeroRecibo, MultipartFile arquivo) throws NegocioException;
	Resource recuperarArquivo(Long numeroRecibo, String nomeArquivo) throws NegocioException;
	void deletarPorNumeroRecibo(Long numeroRecibo) throws NegocioException;

	InstrumentoCobranca implementarInstrumentoCobranca(InstrumentoCobranca instrumentoCobranca);

	abstract void implementarInstrumentoCobranca(Long id) throws NegocioException;

	InstrumentoCobranca cadastrarInstrumentoCobranca(InstrumentoCobranca instrumentoCobranca);

}


// Fim do arquivo: InstrumentoCobrancaService.java

// Arquivo: InstrumentoCobrancaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\InstrumentoCobrancaServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaDTO;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaTemEtapasDTO;
import br.gov.ana.sarsb.model.dto.municipio.PrefeituraDTO;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioSmrsuDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.model.enums.Configuracoes;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaMunicipioRepository;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaRepository;
import br.gov.ana.sarsb.repository.InstrumentoCobrancaTemEtapasRepository;
import br.gov.ana.sarsb.repository.PrefeituraRepository;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;
import br.gov.ana.sarsb.util.*;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.mail.EmailException;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class InstrumentoCobrancaServiceImpl implements InstrumentoCobrancaService {

	private ConfigCache cc = ConfigCache.getInstance();

	@Autowired
	private InstrumentoCobrancaRepository instrumentoCobrancaRepository;

	@Autowired
	private InstrumentoCobrancaMunicipioRepository instrumentoCobrancaMunicipioRepository;

	@Autowired
	private InstrumentoCobrancaTemEtapasRepository instrumentoCobrancaTemEtapasRepository;

	@Autowired
	private FormularioService formularioService;

	@Autowired
	private FileStorageService fileStorageService;

	@Autowired
	private GerarRelatorioService gerarRelatorioService;

	@Autowired
	private MunicipioService municipioService;

	@Autowired
	private PrefeituraRepository prefeituraRepository;

	@Override
	public Long salvarInstrumentoCobranca(FormularioSmrsuDTO formulario) throws NegocioException {
		Long numeroRecibo = SasbUtil.gerarNumeroRecibo(instrumentoCobrancaRepository.pesquisarUltimoNumeroReciboPorAno(String.valueOf(LocalDate.now().getYear())));

		Optional<Prefeitura> prefeituraOptional = prefeituraRepository.findById(formulario.getPrefeitura().getId());
		if (prefeituraOptional.isPresent()) {
			PrefeituraDTO prefeitura = formulario.getPrefeitura();
			enviarEmailRecibo(prefeitura, gerarReciboComprovante(numeroRecibo,formulario.getPrefeitura().getCnpj()));
		}

		return numeroRecibo;
	}







	private void enviarEmailRecibo(PrefeituraDTO prefeitura, File recibo) throws NegocioException {
		try {
			Municipio mun = municipioService.pesquisarMunicipioPorIBGE(prefeitura.getCodigoIbge());
			String corpo = " Prezado(a) " + mun.getNome() + "/" + mun.getSiglaUF() + ","
					+ "\n Segue em anexo o protocolo do preenchimento e envio do formulário on-line referente a informações sobre instituição de instrumento de cobrança do SMRSU.\r\n"
					+ "\n\n Atenciosamente, "
					+ "\n\n Agência Nacional de Águas e Saneamento Básico"
					+ "\n\n Não responder a este e-mail. Ele foi enviado automaticamente pelo sistema.";

			if (prefeitura.getEmail() != null) {
				EmailUtil.enviar(corpo, "Comprovante do Preencimento do Formulário SMRSU ", "nao-responda@ana.gov.br",
						"Agência Nacional de Águas e Saneamento Básico", recibo, prefeitura.getEmail());
			}
		} catch (EmailException e) {
			throw new NegocioException("Erro ao enviar e-mail de confirmação de cadastro do Empreendimento!");
		}
	}

	public List<InstrumentoCobrancaDTO> recuperarInstrumentoCobranca(Long idPrefeitura) throws NegocioException {
		List<InstrumentoCobrancaDTO> lista = new ArrayList<>();
		List<InstrumentoCobranca> listaInstrumentoCobranca = instrumentoCobrancaRepository
				.findByPrefeitura(new Prefeitura(idPrefeitura));
		if (!listaInstrumentoCobranca.isEmpty()) {
			listaInstrumentoCobranca.forEach(i -> {
				InstrumentoCobrancaDTO dto = new InstrumentoCobrancaDTO();
				BeanUtils.copyProperties(i, dto);

				i.setInstrumentoCobrancaTemEtapas(
						instrumentoCobrancaTemEtapasRepository.recuperarInstrumentoCobrancaTemEtapas(i.getId()));

				dto.setInstrumentoCobrancaTemEtapas(new ArrayList<>());
				i.getInstrumentoCobrancaTemEtapas().forEach(e -> {
					InstrumentoCobrancaTemEtapasDTO ictDTO = new InstrumentoCobrancaTemEtapasDTO();
					ictDTO.setTipoEtapaServico(e.getTipoEtapaServico());
					dto.getInstrumentoCobrancaTemEtapas().add(ictDTO);
				});

				lista.add(dto);
			});
		}

		Optional<InstrumentoCobrancaDTO> instrumentoOptional = lista.stream()
				.max(Comparator.comparingLong(InstrumentoCobrancaDTO::getNumeroRecibo));
		Long maxNumeroRecibo = instrumentoOptional.isPresent() ? instrumentoOptional.get().getNumeroRecibo() : null;

		return maxNumeroRecibo != null ? lista.stream().filter(i -> i.getNumeroRecibo().equals(maxNumeroRecibo))
				.sorted(Comparator.comparingLong(InstrumentoCobrancaDTO::getId)).collect(Collectors.toList()) : lista;
	}

	@Override
	public File gerarReciboComprovante(Long numeroRecibo, String cnpj) {
		String numeroReciboFormatado = ConverterUtil.aplicaMascaraNumeroRecibo(StringUtils.leftPad(numeroRecibo.toString(), 9, "0"));
		String cnpjMunicipio = cnpj;
		FormularioDTO formularioDTO = formularioService.recuperarFormulario(cnpjMunicipio, TipoFormulario.FORMULARIO_SMRSU.getId());
		if (cnpjMunicipio != null) {
			Municipio mun = municipioService.pesquisarMunicipioPorIBGE(formularioDTO.getFormularioSmrsuDTO().getPrefeitura().getCodigoIbge());

			ReciboDTO recibo = ReciboDTO.builder()
					.cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(formularioDTO.getFormularioSmrsuDTO().getPrefeitura().getCnpj()))
					// Obter a data atual e formatá-la para uma string no formato desejado
					.dataRegistro(ConverterUtil.converterDateToString(new Date(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA_HH_MM_SS))
					.nomeTitular(formularioDTO.getFormularioSmrsuDTO().getPrefeitura().getNome())
					.numeroRecibo(numeroReciboFormatado)
					.formularioDTO(formularioDTO).municipio(mun.getNome() + "/" + mun.getSiglaUF())
					.build();

			gerarRelatorioService.gerarReciboSmrsu(recibo);

			return recibo.getRecibo();
		} else {
			throw new NegocioException(LogUtil.messageToJson("Número do recibo não foi encontrado!"));
		}
	}

	private void criarReciboRetificado(InstrumentoCobrancaDTO i, ReciboDTO recibo) {
		String numeroReciboOriginalFormatado = ConverterUtil.aplicaMascaraNumeroRecibo(
				StringUtils.leftPad(i.getNumeroReciboRetificado().toString(), 9, "0"));
		String numeroReciboRetificadoFormatado = ConverterUtil.aplicaMascaraNumeroRecibo(
				StringUtils.leftPad(i.getNumeroRecibo().toString(), 9, "0"));

		InstrumentoCobranca ic = instrumentoCobrancaRepository.findByNumeroRecibo(i.getNumeroReciboRetificado()).get(0);
		recibo.setNumeroReciboRetificado(numeroReciboRetificadoFormatado);
		recibo.setDataRegistroRetificado(ConverterUtil
				.converterDateToString(i.getDataCadastro(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA_HH_MM_SS));
		recibo.setNumeroRecibo(numeroReciboOriginalFormatado);
		recibo.setDataRegistro(ConverterUtil
				.converterDateToString(ic.getDataCadastro(), ConverterUtil.FORMATO_DATA_DD_MM_AAAA_HH_MM_SS));
	}

	@Override
	public void salvarArquivo(Long numeroRecibo, MultipartFile arquivo) throws NegocioException {
		Path path = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroRecibo);
		try {
			processarArquivo(arquivo, path);
		} catch (IOException e) {
			throw new NegocioException("Erro ao salvar arquivo", e);
		}
	}

	private void processarArquivo(MultipartFile file, Path path) throws IOException {
		if (Objects.nonNull(file)) {
			fileStorageService.save(file, path);
		}
	}

	@Override
	public Resource recuperarArquivo(Long numeroRecibo, String nomeArquivo) throws NegocioException {
		Path path = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroRecibo);
		try {
			return fileStorageService.load(nomeArquivo, path);
		} catch (IOException e) {
			throw new NegocioException("Erro ao recuperar arquivo", e);
		}
	}

	private void copiarArquivo(String nomeArquivo, Long numeroReciboRetificado, Long numeroRecibo) throws IOException {
		Path pathSource = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroReciboRetificado);
		Path pathDestination = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroRecibo);
		fileStorageService.copy(nomeArquivo, pathSource, pathDestination);
	}

	private void migrarArquivosInstrumentoAnterior(InstrumentoCobranca i) {
		try {
			if (Objects.nonNull(i.getArquivoModificado()) && !i.getArquivoModificado()) {
				copiarArquivo(i.getArquivo(), i.getNumeroReciboRetificado(), i.getNumeroRecibo());
			}
			if (Objects.nonNull(i.getArquivoCronogramaModificado()) && !i.getArquivoCronogramaModificado()) {
				copiarArquivo(i.getArquivoCronograma(), i.getNumeroReciboRetificado(), i.getNumeroRecibo());
			}
			Optional<Prefeitura> prefeituraOptional = prefeituraRepository.findById(i.getPrefeitura().getId());
			if (prefeituraOptional.isPresent() && Objects.nonNull(prefeituraOptional.get().getArquivoAtoDelegacao()) && !i.getPrefeitura().getArquivoAtoDelegacaoModificado()) {
				copiarArquivo(prefeituraOptional.get().getArquivoAtoDelegacao(), i.getNumeroReciboRetificado(), i.getNumeroRecibo());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void deletarPorNumeroRecibo(Long numeroRecibo) throws NegocioException {
		try {
			List<InstrumentoCobranca> lista = instrumentoCobrancaRepository.findByNumeroRecibo(numeroRecibo);
			deletarArquivos(numeroRecibo);
			if (!lista.isEmpty()) {
				lista.forEach(e -> {
					e.setInstrumentoCobrancaTemEtapas(new ArrayList<>());
					e.getInstrumentoCobrancaTemEtapas().addAll(instrumentoCobrancaTemEtapasRepository.recuperarInstrumentoCobrancaTemEtapas(e.getId()));
					if (!e.getInstrumentoCobrancaTemEtapas().isEmpty()) {
						instrumentoCobrancaTemEtapasRepository.deleteAll(e.getInstrumentoCobrancaTemEtapas());
					}
				});
				instrumentoCobrancaRepository.deleteAll(lista);

				Prefeitura p = lista.get(0).getPrefeitura();
				p.setArquivoAtoDelegacao(null);
				prefeituraRepository.save(p);
			}
		} catch (Exception e) {
			throw new NegocioException("Erro ao deletar instrumento cobrança", e);
		}
	}

	@Override
	public InstrumentoCobranca implementarInstrumentoCobranca(InstrumentoCobranca instrumentoCobranca) {
		return null;
	}


	private void deletarArquivos(Long numeroRecibo) throws IOException {
		try {
			Path path = Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_SMRSU + numeroRecibo);
			fileStorageService.removeFilesByDirectory(path);
		} catch (IOException e) {
			throw new NegocioException("Erro ao deletar arquivos", e);
		}
	}

	@Override
	public void implementarInstrumentoCobranca(Long id) throws NegocioException {
		InstrumentoCobranca instrumentoCobranca = instrumentoCobrancaRepository.findById(id)
				.orElseThrow(() -> new NegocioException("Instrumento de cobrança não encontrado"));

		if (instrumentoCobranca.getImplementado()) {
			throw new NegocioException("O instrumento de cobrança já está implementado");
		}

		instrumentoCobranca.setImplementado(true);
		instrumentoCobranca.setDataAtualizacao(new Date());

		instrumentoCobrancaRepository.save(instrumentoCobranca);
	}

	public InstrumentoCobranca cadastrarInstrumentoCobranca(InstrumentoCobranca instrumentoCobranca) {
		instrumentoCobranca.setDataCadastro(new Date());
		instrumentoCobranca.setDataAtualizacao(new Date());
		return instrumentoCobrancaRepository.save(instrumentoCobranca);
	}


}


// Fim do arquivo: InstrumentoCobrancaServiceImpl.java

// Arquivo: MonitoramentoUniversalizacaoMapper.java
// Caminho: \br\gov\ana\sarsb\service\MonitoramentoUniversalizacaoMapper.java

package br.gov.ana.sarsb.service;
    import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunEsgotoDTO;
    import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunAguaDTO;
    import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunAgua;
    import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunEsgoto;
    import org.springframework.stereotype.Component;

    @Component
    public class MonitoramentoUniversalizacaoMapper {

        public MonitoramentoUniversalizacaoMunAgua toEntity(MonitoramentoUniversalizacaoMunAguaDTO dto) {
            return MonitoramentoUniversalizacaoMunAgua.builder()

                    .munAaRef(dto.getMunAaRef())
                    .munIbgeCd(dto.getMunIbgeCd())
                    .munDomredAguaUrb(dto.getMunDomredAguaUrb())
                    .munDomredAguaRur(dto.getMunDomredAguaRur())
                    .munDomAguaUrb(dto.getMunDomAguaUrb())
                    .munDomAguaRur(dto.getMunDomAguaRur())
                    .munTotalDomAgua(dto.getMunTotalDomAgua())
                    .munTotalEcoredAgua(dto.getMunTotalEcoredAgua())
                    .munTotalEcoAgua(dto.getMunTotalEcoAgua())
                    .build();
        }

        public MonitoramentoUniversalizacaoMunEsgoto toEntity(
            MonitoramentoUniversalizacaoMunEsgotoDTO dto) {
            return MonitoramentoUniversalizacaoMunEsgoto.builder()

                    .munAaRef(dto.getMunAaRef())
                    .munIbgeCd(dto.getMunIbgeCd())
                    .munDomredUrb(dto.getMunDomredUrb())
                    .munDomredRur(dto.getMunDomredRur())
                    .munDomUrb(dto.getMunDomUrb())
                    .munDomRur(dto.getMunDomRur())
                    .munTotalDom(dto.getMunTotalDom())
                    .munTotalEcored(dto.getMunTotalEcored())
                    .munTotalEco(dto.getMunTotalEco())
                    .build();
        }


    }




// Fim do arquivo: MonitoramentoUniversalizacaoMapper.java

// Arquivo: MonitoramentoUniversalizacaoService.java
// Caminho: \br\gov\ana\sarsb\service\MonitoramentoUniversalizacaoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoBlocoEstrutura;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoDados;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoFiltrosIndicadores;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunEsgotoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunAguaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoPrtAguaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoPrtEsgDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipioUniversalizacaoRegras;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoTotalEco;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PrestadorUniversalizacaoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PrestadorUniversalizacaoGE02GE03;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunEsgoto;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtEsgoto;
import br.gov.ana.sarsb.model.entity.MunicipiosUniversalizacao;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrestador;

import java.util.List;
import java.util.Map;

public interface MonitoramentoUniversalizacaoService {
  List<MunicipiosUniversalizacao> findMunicipioByAgenciaReguladora(Long agrCd);

  List<MonitoramentoUniversalizacaoPrestador> findPrestadorByAgenciaReguladora(Long agrCd, Boolean regional, Boolean contratado);

  List<MonitoramentoUniversalizacaoBlocoEstrutura> findBlocoEstruturaByAgenciaReguladora(Long agrCd);

  List<MonitoramentoUniversalizacaoPrestador> findPrestadorByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset,Long ibgeCd ,Boolean regional, Boolean contratado);

  List<MunicipiosUniversalizacao> findMunicipioByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset, Long ibgeCd);

  List<Map<String, Object>> findBlocosByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset);

  MonitoramentoUniversalizacaoFiltrosIndicadores findFiltrosIndicadores(Long agrCd);

  MonitoramentoUniversalizacaoDados findDadosByAgenciaReguladora(Long agrCd);

  void atualizarDadosMunicipio(List<MonitoramentoUniversalizacaoMunAguaDTO> agua, List<MonitoramentoUniversalizacaoMunEsgotoDTO> esgoto, List<MunicipiosUniversalizacaoDTO> dadosgerais);

  MonitoramentoUniversalizacaoMunAgua buscarDadosAgua(Integer munIbgeCd);

  MonitoramentoUniversalizacaoMunEsgoto buscarDadosEsgoto(Integer munIbgeCd);

  MunicipioUniversalizacaoRegras buscardadosgerais(Integer munIbgeCd);

  MunicipiosUniversalizacaoTotalEco buscarTotalEcoAgua(Integer munIbgeCd);

  MunicipiosUniversalizacaoTotalEco buscarTotalEcoEsgoto(Integer munIbgeCd);

  PrestadorUniversalizacaoGE02GE03 buscarPrtGE02GE03(Integer munIbgeCd, String servico, Integer prtAaRef);

  void atualizarDadosPrestador(List<MonitoramentoUniversalizacaoPrtAguaDTO> agua, List<MonitoramentoUniversalizacaoPrtEsgDTO> esgoto, List<PrestadorUniversalizacaoDTO> dadosgerais);

  MonitoramentoUniversalizacaoPrtAgua buscarDadosAguaPrestador(Integer munIbgeCd, Integer prtAaRef, String prtCd);

  MonitoramentoUniversalizacaoPrtEsgoto buscarDadosEsgotoPrestador(Integer munIbgeCd, Integer prtAaRef, String prtCd);

  MonitoramentoUniversalizacaoPrestador buscarDadosGeraisPrestador(Integer munIbgeCd, Integer prtAaRef, String prtCd);

}


// Fim do arquivo: MonitoramentoUniversalizacaoService.java

// Arquivo: MonitoramentoUniversalizacaoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\MonitoramentoUniversalizacaoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoBlocoEstrutura;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoDados;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoFiltrosIndicadores;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunEsgotoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoMunAguaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoPrtAguaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MonitoramentoUniversalizacaoPrtEsgDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipioUniversalizacaoRegras;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.MunicipiosUniversalizacaoTotalEco;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PrestadorUniversalizacaoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.PrestadorUniversalizacaoGE02GE03;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoMunEsgoto;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrestador;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtAgua;
import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrtEsgoto;
import br.gov.ana.sarsb.model.entity.MunicipioIBGE;
import br.gov.ana.sarsb.model.entity.MunicipiosUniversalizacao;
import br.gov.ana.sarsb.repository.MonitoramentoUniversalizacaoMunAguaRepository;
import br.gov.ana.sarsb.repository.MonitoramentoUniversalizacaoMunEsgotoRepository;
import br.gov.ana.sarsb.repository.MonitoramentoUniversalizacaoMunicipioRepository;
import br.gov.ana.sarsb.repository.MonitoramentoUniversalizacaoPrestadorRepository;
import br.gov.ana.sarsb.repository.MonitoramentoUniversalizacaoPrtAguaRepository;
import br.gov.ana.sarsb.repository.MonitoramentoUniversalizacaoPrtEsgRepository;
import br.gov.ana.sarsb.repository.MunicipioIbgeRepository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import java.util.Map;
import java.util.Objects;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

@Service
public class MonitoramentoUniversalizacaoServiceImpl implements MonitoramentoUniversalizacaoService {

  @Autowired
  private MonitoramentoUniversalizacaoMunicipioRepository munRepository;

  @Autowired
  private MunicipioIbgeRepository municipioIBGERepository;

  @Autowired
  private MonitoramentoUniversalizacaoPrestadorRepository prtRepository;

  @Autowired
  private MonitoramentoUniversalizacaoMunAguaRepository munAguaRepository;

  @Autowired
  private MonitoramentoUniversalizacaoMunEsgotoRepository munEsgotoRepository;
  @Autowired
  private MonitoramentoUniversalizacaoMunicipioRepository munMunicRepository;

  @Autowired
  private MonitoramentoUniversalizacaoPrtEsgRepository prtEsgRepository;
  @Autowired
  private MonitoramentoUniversalizacaoPrtAguaRepository prtAguaRepository;

  @Autowired
  private MonitoramentoUniversalizacaoMapper mapper;

  @Override
  public List<MunicipiosUniversalizacao> findMunicipioByAgenciaReguladora(Long agrCd) {
    return munRepository.findByAgenciaReguladora(agrCd);
  }

  @Override
  public List<MunicipiosUniversalizacao> findMunicipioByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset, Long ibgeCd) {
    if(Objects.isNull(ibgeCd)){
      return munRepository.findMunicipioByAgenciaReguladoraPageable(agrCd, limit, offset);
    }
    return munRepository.findMunicipioByAgenciaReguladoraAndCodIbgePageable(agrCd, limit, offset, ibgeCd);
  }

  @Override
  public List<MonitoramentoUniversalizacaoBlocoEstrutura> findBlocoEstruturaByAgenciaReguladora(Long agrCd) {
    return munRepository.findBlocoEstruturaByAgenciaReguladora(agrCd);
  }

  @Override
  public MonitoramentoUniversalizacaoFiltrosIndicadores findFiltrosIndicadores(Long agrCd) {
    return munRepository.findFiltrosIndicadores(agrCd);
  }

  @Override
  public List<Map<String, Object>> findBlocosByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset) {
    List<MonitoramentoUniversalizacaoBlocoEstrutura> blocos = munRepository.findBlocoEstruturaByAgenciaReguladoraPageable(agrCd, limit, offset);
    List<Map<String, Object>> blocoIndicadores = new ArrayList<>();
    blocos.forEach(bloco -> {
      List<Map<String, Object>> munIndicadores = new ArrayList<>();
      List<MunicipiosUniversalizacao> municipiosUniversalizacaos = munRepository.findByAgenciaReguladoraAndEstruturaRegionalizacaoAguaEsg(agrCd,bloco.getNome());
      municipiosUniversalizacaos.forEach(municipiosUniversalizacao -> {
        MonitoramentoUniversalizacaoMunAgua aguaData = this.buscarDadosAgua(municipiosUniversalizacao.getMunIbgeCd());
        MonitoramentoUniversalizacaoMunEsgoto esgotoData = this.buscarDadosEsgoto(municipiosUniversalizacao.getMunIbgeCd());
        MunicipioUniversalizacaoRegras dadosgerais = this.buscardadosgerais(municipiosUniversalizacao.getMunIbgeCd());
        Map<String, Object> response = new HashMap<>();
        response.put("dadosgerais", dadosgerais);
        response.put("agua", aguaData);
        response.put("esgoto", esgotoData);
        munIndicadores.add(response);
      });
      Map<String, Object> objetoBloco = new HashMap<>();
      objetoBloco.put("nomeBloco", bloco.getNome());
      objetoBloco.put("municipios", munIndicadores);
      blocoIndicadores.add(objetoBloco);
    });
    return blocoIndicadores;
  }

  @Override
  public List<MonitoramentoUniversalizacaoPrestador> findPrestadorByAgenciaReguladora(Long agrCd, Boolean regional, Boolean contratado) {
    if(regional){
      return prtRepository.findByAgenciaReguladoraRegional(agrCd);
    }
    if(contratado){
      return prtRepository.findByAgenciaReguladoraContratado(agrCd);
    }
    return prtRepository.findByAgenciaReguladora(agrCd);
  }

  @Override
  public List<MonitoramentoUniversalizacaoPrestador> findPrestadorByAgenciaReguladoraPageable(Long agrCd, Integer limit, Integer offset,Long ibgeCd, Boolean regional, Boolean contratado) {
    if(regional){
      return prtRepository.findPrestadoresEmMaisDeUmMunicipioPageable(agrCd, limit, offset);
    }
    if(contratado){
      return prtRepository.findByAgenciaReguladoraPageableContratado(agrCd, limit, offset);
    }
    if(Objects.isNull(ibgeCd)){
      return prtRepository.findByAgenciaReguladoraPageable(agrCd, limit, offset);
    }
    return prtRepository.findByAgenciaReguladoraAndCodIbgePageable(agrCd, limit, offset, ibgeCd);
  }

  @Override
  public MonitoramentoUniversalizacaoDados findDadosByAgenciaReguladora(Long agrCd) {
    MonitoramentoUniversalizacaoDados monitoramentoUniversalizacaoDados = new MonitoramentoUniversalizacaoDados();
    monitoramentoUniversalizacaoDados.setMunicipio(munRepository.findDadosByAgrCd(agrCd));
    monitoramentoUniversalizacaoDados.setPrestador(prtRepository.findDadosByAgrCd(agrCd));
    return monitoramentoUniversalizacaoDados;
  }
  @Transactional
  public void atualizarDadosMunicipio(List<MonitoramentoUniversalizacaoMunAguaDTO> aguaDTOs,
                                      List<MonitoramentoUniversalizacaoMunEsgotoDTO> esgotoDTOs,
                                      List<MunicipiosUniversalizacaoDTO> dadosGeraisDTO) {
    // Atualiza ou cria registros de água
    for (MonitoramentoUniversalizacaoMunAguaDTO aguaDTO : aguaDTOs) {
      MonitoramentoUniversalizacaoMunAgua munAgua = munAguaRepository.findByMunIbgeCd(aguaDTO.getMunIbgeCd())
              .orElse(new MonitoramentoUniversalizacaoMunAgua());
      munAgua.setMunIbgeCd(aguaDTO.getMunIbgeCd());
      munAgua.setMunAaRef(aguaDTO.getMunAaRef());
      munAgua.setMunDomredAguaUrb(aguaDTO.getMunDomredAguaUrb());
      munAgua.setMunDomredAguaRur(aguaDTO.getMunDomredAguaRur());
      munAgua.setMunDomAguaUrb(aguaDTO.getMunDomAguaUrb());
      munAgua.setMunDomAguaRur(aguaDTO.getMunDomAguaRur());
      munAgua.setMunTotalDomAgua(aguaDTO.getMunTotalDomAgua());
      munAgua.setMunTotalEcoredAgua(aguaDTO.getMunTotalEcoredAgua());
      munAgua.setMunTotalEcoAgua(aguaDTO.getMunTotalEcoAgua());

      munAguaRepository.save(munAgua);
    }

    // Atualiza ou cria registros de esgoto
    for (MonitoramentoUniversalizacaoMunEsgotoDTO esgotoDTO : esgotoDTOs) {
      MonitoramentoUniversalizacaoMunEsgoto munEsgoto = munEsgotoRepository.findByMunIbgeCd(esgotoDTO.getMunIbgeCd())
              .orElse(new MonitoramentoUniversalizacaoMunEsgoto());
      munEsgoto.setMunIbgeCd(esgotoDTO.getMunIbgeCd());
      munEsgoto.setMunDomredUrb(esgotoDTO.getMunDomredUrb());
      munEsgoto.setMunAaRef(esgotoDTO.getMunAaRef());
      munEsgoto.setMunDomredRur(esgotoDTO.getMunDomredRur());
      munEsgoto.setMunDomUrb(esgotoDTO.getMunDomUrb());
      munEsgoto.setMunDomRur(esgotoDTO.getMunDomRur());
      munEsgoto.setMunTotalDom(esgotoDTO.getMunTotalDom());
      munEsgoto.setMunTotalEcored(esgotoDTO.getMunTotalEcored());
      munEsgoto.setMunTotalEco(esgotoDTO.getMunTotalEco());

      munEsgotoRepository.save(munEsgoto);
    }

    // Atualiza ou cria registros gerais
    for (MunicipiosUniversalizacaoDTO dadosGeraisDTOItem : dadosGeraisDTO) {
      MunicipiosUniversalizacao dadosGerais = munRepository.findByMunIbgeCd(dadosGeraisDTOItem.getMunIbgeCd())
              .orElse(new MunicipiosUniversalizacao());
      dadosGerais.setDomResGerais(dadosGeraisDTOItem.getDomResGerais());
      dadosGerais.setMunPreenchimento(dadosGeraisDTOItem.getMunPreenchimento());
      dadosGerais.setMunErros(dadosGeraisDTOItem.getMunErros());
      dadosGerais.setMunObjetoErros(dadosGeraisDTOItem.getMunObjetoErros());
      munRepository.save(dadosGerais);
    }
  }
  @Override
  public MonitoramentoUniversalizacaoMunAgua buscarDadosAgua(Integer munIbgeCd) {
    MonitoramentoUniversalizacaoMunAgua munAgua = munAguaRepository.findByMunIbgeCd(munIbgeCd).orElse(null);
    if(munAgua != null) {
      munAgua.setMunTotalEcoAgua(prtRepository.buscarTotalEcoAgua(munIbgeCd) == null ? 0
          : prtRepository.buscarTotalEcoAgua(munIbgeCd).getMunTotalEco());
      munAgua.setMunTotalEcoredAgua(prtRepository.buscarTotalEcoAgua(munIbgeCd) == null ? 0
          : prtRepository.buscarTotalEcoAgua(munIbgeCd).getMunTotalEcored());
    }
    return munAgua;
  }

  @Override
  public MonitoramentoUniversalizacaoMunEsgoto buscarDadosEsgoto(Integer munIbgeCd) {
    MonitoramentoUniversalizacaoMunEsgoto munEsgoto = munEsgotoRepository.findByMunIbgeCd(munIbgeCd).orElse(null);
    if(munEsgoto != null) {
      munEsgoto.setMunTotalEco(prtRepository.buscarTotalEcoEsg(munIbgeCd) == null ? 0
          : prtRepository.buscarTotalEcoEsg(munIbgeCd).getMunTotalEco());
      munEsgoto.setMunTotalEcored(prtRepository.buscarTotalEcoEsg(munIbgeCd) == null ? 0
          : prtRepository.buscarTotalEcoEsg(munIbgeCd).getMunTotalEcored());
    }
    return munEsgoto;
  }

  @Override
  public MunicipioUniversalizacaoRegras buscardadosgerais(Integer munIbgeCd) {
    MunicipiosUniversalizacao mun = munMunicRepository.findByMunIbgeCd(munIbgeCd).orElse(null);
    MunicipioUniversalizacaoRegras munGeral = new MunicipioUniversalizacaoRegras();
    munGeral.setAaRef(mun.getAaRef());
    munGeral.setDomResGerais(mun.getDomResGerais());
    munGeral.setDomResOcupTotal(mun.getDomResOcupTotal());
    munGeral.setDomResOcupUrb(mun.getDomResOcupUrb());
    munGeral.setDomResOcupRur(mun.getDomResOcupRur());
    munGeral.setMunErros(mun.getMunErros());
    munGeral.setAgenciaReguladora(mun.getAgenciaReguladora());
    munGeral.setMunNm(mun.getMunNm());
    munGeral.setMunUf(mun.getMunUf());
    munGeral.setMunIbgeCd(mun.getMunIbgeCd());
    munGeral.setPopTotalAaRef(mun.getPopTotalAaRef());
    munGeral.setMunPopTotal(mun.getMunPopTotal());
    munGeral.setMunPopUrb(mun.getMunPopUrb());
    munGeral.setTaxMedOcup(mun.getTaxMedOcup());
    munGeral.setMunPreenchimento(mun.getMunPreenchimento());
    munGeral.setMunObjetoErros(mun.getMunObjetoErros());
    munGeral.setEstruturaRegionalizacaoAguaEsg(mun.getEstruturaRegionalizacaoAguaEsg());
    munGeral.setMunAr01(prtRepository.buscarTotalAr(munIbgeCd) == null ? 0 : prtRepository.buscarTotalAr(munIbgeCd).getMunAr01());
    munGeral.setMunAr02(prtRepository.buscarTotalAr(munIbgeCd) == null ? 0 : prtRepository.buscarTotalAr(munIbgeCd).getMunAr02());
    munGeral.setMunEr01(prtRepository.buscarTotalEr(munIbgeCd) == null ? 0 : prtRepository.buscarTotalEr(munIbgeCd).getMunEr01());
    munGeral.setMunEr02(prtRepository.buscarTotalEr(munIbgeCd) == null ? 0 : prtRepository.buscarTotalEr(munIbgeCd).getMunEr02());
    return munGeral;
  }

  @Override
  public MonitoramentoUniversalizacaoPrtAgua buscarDadosAguaPrestador(Integer munIbgeCd, Integer prtAaRef, String prtCd) {
    return prtAguaRepository.findByPrtMunCdAndPrtAaRefAndPrtCd(munIbgeCd, prtAaRef, prtCd).orElse(null);
  }

  @Override
  public MonitoramentoUniversalizacaoPrtEsgoto buscarDadosEsgotoPrestador(Integer munIbgeCd, Integer prtAaRef, String prtCd) {
    return prtEsgRepository.findByPrtMunCdAndPrtAaRefAndPrtCd(munIbgeCd, prtAaRef, prtCd).orElse(null);
  }

  @Override
  public MonitoramentoUniversalizacaoPrestador buscarDadosGeraisPrestador(Integer munIbgeCd, Integer prtAaRef, String prtCd) {
    return prtRepository.findByMunicipioCodigoIbgeAndPrtAaRefAndPrtCd(Long.valueOf(munIbgeCd), prtAaRef, prtCd).orElse(null);
  }

  @Override
  public MunicipiosUniversalizacaoTotalEco buscarTotalEcoAgua(Integer munIbgeCd) {
    return prtRepository.buscarTotalEcoAgua(munIbgeCd);
  }

  @Override
  public PrestadorUniversalizacaoGE02GE03 buscarPrtGE02GE03(Integer munIbgeCd, String servico, Integer prtAaRef) {
    return prtRepository.buscarPrtGE02GE03(munIbgeCd, servico, prtAaRef);
  }

  @Override
  public MunicipiosUniversalizacaoTotalEco buscarTotalEcoEsgoto(Integer munIbgeCd) {
    return prtRepository.buscarTotalEcoEsg(munIbgeCd);
  }

  @Transactional
  public void atualizarDadosPrestador(List<MonitoramentoUniversalizacaoPrtAguaDTO> aguaDTOs,
      List<MonitoramentoUniversalizacaoPrtEsgDTO> esgotoDTOs,
      List<PrestadorUniversalizacaoDTO> dadosGeraisDTO) {
    // Atualiza ou cria registros de água
    for (MonitoramentoUniversalizacaoPrtAguaDTO aguaDTO : aguaDTOs) {
      MonitoramentoUniversalizacaoPrtAgua prtAgua = prtAguaRepository.findByPrtMunCdAndPrtAaRefAndPrtCd(aguaDTO.getPrtMunIbgeCd(), aguaDTO.getPrtAaRef(), aguaDTO.getPrtCd())
          .orElse(new MonitoramentoUniversalizacaoPrtAgua());
      prtAgua.setPrtMunCd(aguaDTO.getPrtMunIbgeCd());
      prtAgua.setPrtCd(aguaDTO.getPrtCd());
      prtAgua.setPrtAaRef(aguaDTO.getPrtAaRef());
      prtAgua.setPrtEcoredIna(aguaDTO.getPrtEcoredIna());
      prtAgua.setPrtEcoredUrb(aguaDTO.getPrtEcoredUrb());
      prtAgua.setPrtEcoredRur(aguaDTO.getPrtEcoredRur());
      prtAgua.setPrtEco(aguaDTO.getPrtEco());
      prtAgua.setPrtEcoIna(aguaDTO.getPrtEcoIna());
      prtAgua.setPrtEcoredFac(aguaDTO.getPrtEcoredFac());
      prtAgua.setPrtEcoFac(aguaDTO.getPrtEcoFac());
      prtAgua.setPrtTotalEco(aguaDTO.getPrtTotalEco());
      prtAguaRepository.save(prtAgua);
    }

    // Atualiza ou cria registros de esgoto
    for (MonitoramentoUniversalizacaoPrtEsgDTO esgotoDTO : esgotoDTOs) {
      MonitoramentoUniversalizacaoPrtEsgoto prtEsgoto = prtEsgRepository.findByPrtMunCdAndPrtAaRefAndPrtCd(esgotoDTO.getPrtMunIbgeCd(), esgotoDTO.getPrtAaRef(), esgotoDTO.getPrtCd())
          .orElse(new MonitoramentoUniversalizacaoPrtEsgoto());
      prtEsgoto.setPrtMunCd(esgotoDTO.getPrtMunIbgeCd());
      prtEsgoto.setPrtCd(esgotoDTO.getPrtCd());
      prtEsgoto.setPrtAaRef(esgotoDTO.getPrtAaRef());
      prtEsgoto.setPrtEcoredIna(esgotoDTO.getPrtEcoredIna());
      prtEsgoto.setPrtEcoredUrb(esgotoDTO.getPrtEcoredUrb());
      prtEsgoto.setPrtEcoredRur(esgotoDTO.getPrtEcoredRur());
      prtEsgoto.setPrtEco(esgotoDTO.getPrtEco());
      prtEsgoto.setPrtEcoIna(esgotoDTO.getPrtEcoIna());
      prtEsgoto.setPrtEcoredFac(esgotoDTO.getPrtEcoredFac());
      prtEsgoto.setPrtEcoFac(esgotoDTO.getPrtEcoFac());
      prtEsgoto.setPrtTotalEco(esgotoDTO.getPrtTotalEco());
      prtEsgRepository.save(prtEsgoto);
    }

    for (PrestadorUniversalizacaoDTO dadosGeraisDTOItem : dadosGeraisDTO) {
      MonitoramentoUniversalizacaoPrestador dadosGerais = prtRepository.findByMunicipioCodigoIbgeAndPrtAaRefAndPrtCd(Long.valueOf(dadosGeraisDTOItem.getPrtMunIbgeCd()), dadosGeraisDTOItem.getPrtAaRef(), dadosGeraisDTOItem.getPrtCd())
          .orElse(new MonitoramentoUniversalizacaoPrestador());
      MunicipioIBGE municipio = municipioIBGERepository
            .findById(Long.valueOf(dadosGeraisDTOItem.getPrtMunIbgeCd()))
            .orElseThrow(() -> new EntityNotFoundException("Municipio not found"));
      dadosGerais.setMunicipio(municipio);
      dadosGerais.setPrtMunCd((municipio.getCodigoIbge()));
      dadosGerais.setPrtPopCensoAbg(dadosGeraisDTOItem.getPrtPopCensoAbg());
      dadosGerais.setPrtDomAbg(dadosGeraisDTOItem.getPrtDomAbg());
      dadosGerais.setPrtPreenchimento(dadosGeraisDTOItem.getPrtPreenchimento());
      dadosGerais.setPrtErros(dadosGeraisDTOItem.getPrtErros());
      dadosGerais.setPrtObjetoErros(dadosGeraisDTOItem.getPrtObjetoErros());
      prtRepository.save(dadosGerais);
    }

  }

}


// Fim do arquivo: MonitoramentoUniversalizacaoServiceImpl.java

// Arquivo: MunicipioContratoService.java
// Caminho: \br\gov\ana\sarsb\service\MunicipioContratoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.Contrato;
import br.gov.ana.sarsb.model.entity.MunicipioContrato;
import br.gov.ana.sarsb.model.entity.MunicipioIBGE;

import java.util.List;

import java.util.List;
import java.util.Optional;

public interface MunicipioContratoService {

    void salvar(Contrato contrato, MunicipioIBGE municipio) throws NegocioException;

    List<MunicipioContrato> findAllByContratoId(Long matrizCd);

    void deleteAllByContratoId(Long contratoId);
    void deletarMunicipioContrato(Long id) throws NegocioException;
   List<MunicipioContrato> buscarPorIdContrato(Long id) throws NegocioException;

}


// Fim do arquivo: MunicipioContratoService.java

// Arquivo: MunicipioContratoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\MunicipioContratoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.Contrato;
import br.gov.ana.sarsb.model.entity.MunicipioContrato;
import br.gov.ana.sarsb.model.entity.MunicipioIBGE;
import br.gov.ana.sarsb.repository.MunicipioContratoRespository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class MunicipioContratoServiceImpl implements MunicipioContratoService {

    @Autowired
    private MunicipioContratoRespository repository;

    @Autowired
    private EntityManager entityManager;

    @Override
    public void salvar(Contrato contrato, MunicipioIBGE municipio) throws NegocioException {

        MunicipioContrato municipioContrato = new MunicipioContrato();
        municipioContrato.setContrato(contrato);
        municipioContrato.setMunicipio(municipio);
        municipioContrato.setUf(municipio.getUf());

        repository.save(municipioContrato);
    }

    @Override
    public List<MunicipioContrato> findAllByContratoId(Long contratoId) {
        return repository.findAllByContratoId(contratoId);
    }

    public void deleteAllByContratoId(Long contratoId) {
        repository.deleteAllByContratoId(contratoId);
        entityManager.flush();
    }


    @Override
    public void deletarMunicipioContrato(Long id) throws NegocioException {
        repository.deleteById(id);
    }

    @Override
    public List<MunicipioContrato> buscarPorIdContrato(Long id) throws NegocioException {
        return repository.buscarMuniciporIdContrato(id);
    }


}


// Fim do arquivo: MunicipioContratoServiceImpl.java

// Arquivo: NormasDeReferenciaService.java
// Caminho: \br\gov\ana\sarsb\service\NormasDeReferenciaService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.NormasDeReferencia;

public interface NormasDeReferenciaService {

    NormasDeReferencia findById(Long id);
}


// Fim do arquivo: NormasDeReferenciaService.java

// Arquivo: NormasDeReferenciaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\NormasDeReferenciaServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.NormasDeReferencia;
import br.gov.ana.sarsb.repository.NormasDeReferenciaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class NormasDeReferenciaServiceImpl implements NormasDeReferenciaService {

    @Autowired
    private NormasDeReferenciaRepository normasDeReferenciaRepository;

    @Override
    public NormasDeReferencia findById(Long id) {
        return normasDeReferenciaRepository.findById(id).get();
    }
}


// Fim do arquivo: NormasDeReferenciaServiceImpl.java

// Arquivo: ParametrosNRSService.java
// Caminho: \br\gov\ana\sarsb\service\ParametrosNRSService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo.*;
import br.gov.ana.sarsb.model.dto.agenciareguladora.parametrosNrs.ParametrosNRSDTO;
import br.gov.ana.sarsb.model.entity.ParametrosNRS;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.List;

public interface ParametrosNRSService {


    List<ParametrosNRSDTO> buscarTodos();

}


// Fim do arquivo: ParametrosNRSService.java

// Arquivo: ParametrosNRSServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ParametrosNRSServiceImpl.java

package br.gov.ana.sarsb.service;


import br.gov.ana.sarsb.model.dto.agenciareguladora.parametrosNrs.ParametrosNRSDTO;
import br.gov.ana.sarsb.model.entity.NormasDeReferencia;
import br.gov.ana.sarsb.model.entity.ParametrosNRS;
import br.gov.ana.sarsb.repository.NormasDeReferenciaRepository;
import br.gov.ana.sarsb.repository.ParametrosNRSRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
public class ParametrosNRSServiceImpl implements ParametrosNRSService {

    @Autowired
    private ParametrosNRSRepository parametrosNRSRepository;

    @Autowired
    NormasDeReferenciaRepository normasDeReferenciaRepository;

    @Override
    public List<ParametrosNRSDTO> buscarTodos() {
        List<ParametrosNRS> parametrosNRS = parametrosNRSRepository.findAll();

        List<ParametrosNRSDTO> parametrosNRSDTOS = convertEntyToDto(parametrosNRS);

        return parametrosNRSDTOS;
    }


    private List<ParametrosNRSDTO> convertEntyToDto(List<ParametrosNRS> listaParametrosNRS) {

        List<ParametrosNRSDTO> parametrosNRSDTOS = new ArrayList<>();

        for (ParametrosNRS parametrosNRS : listaParametrosNRS) {
            ParametrosNRSDTO parametrosNRSDTO = new ParametrosNRSDTO();
//            Optional<NormasDeReferencia> normasDeReferencia = normasDeReferenciaRepository.findById(parametrosNRS.getNormasDeReferencia().getId());

            parametrosNRSDTO.setId(parametrosNRS.getId());
            parametrosNRSDTO.setAnoReferencia(parametrosNRS.getAnoReferencia());
            parametrosNRSDTO.setNormasDeReferencia(parametrosNRS.getNormasDeReferencia().getId());
            parametrosNRSDTO.setDataInicioEnvio(parametrosNRS.getDataInicioEnvio());
            parametrosNRSDTO.setDataFimEnvio(parametrosNRS.getDataFimEnvio());
            parametrosNRSDTO.setDataInicioRetificacao(parametrosNRS.getDataInicioRetificacao());
            parametrosNRSDTO.setDataFimRetificacao(parametrosNRS.getDataFimRetificacao());


            LocalDate dataFimEnvio = parametrosNRS.getDataFimEnvio().toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();  // Converte para LocalDate

            LocalDate dataAtual = LocalDate.now();

            if (dataFimEnvio.compareTo(dataAtual) < 0 ) {
                parametrosNRSDTO.setVerificarDataEnvio(true);
            }

            parametrosNRSDTOS.add(parametrosNRSDTO);
        }

        return parametrosNRSDTOS;
    }
}


// Fim do arquivo: ParametrosNRSServiceImpl.java

// Arquivo: PlanilhaUniversalizacaoService.java
// Caminho: \br\gov\ana\sarsb\service\PlanilhaUniversalizacaoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.MonitoramentoUniversalizacaoPrestador;
import br.gov.ana.sarsb.model.entity.MunicipiosUniversalizacao;
import br.gov.ana.sarsb.model.entity.PlanilhaUniversalizacao;
import br.gov.ana.sarsb.repository.PlanilhaUniversalizacaoRepository;
import lombok.RequiredArgsConstructor;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import javax.transaction.Transactional;
import java.io.*;
import java.util.*;

@Service
@RequiredArgsConstructor
public class PlanilhaUniversalizacaoService {

	private static final Logger log = LoggerFactory.getLogger(PlanilhaUniversalizacaoService.class);

	private final PlanilhaUniversalizacaoRepository repository;
	@Autowired
	private MonitoramentoUniversalizacaoService monitoramentoService;
	private static final String PATH_RELATORIOS = "/static/relatorios/docx/";
	private static final String NOME_ARQUIVO = "universalizacao.xlsx";


	private Integer somarIntervalo(Row row, int inicio, int fim) {
		int soma = 0;
		for (int i = inicio; i <= fim; i++) {
			Integer valor = getCellValueAsInteger(row.getCell(i));
			if (valor != null) {
				soma += valor;
			}
		}
		return soma;
	}

	@Transactional
	public void processarEGravarExcel(MultipartFile file, Long codAgrCd) throws IOException {
		List<PlanilhaUniversalizacao> dados = new ArrayList<>();
		Workbook workbook = new XSSFWorkbook(file.getInputStream());

		Sheet sheetMunicipio = workbook.getSheet("F1 Formulario-Municipio");
		Sheet sheetPrestador = workbook.getSheet("F2 Form-Prestador-rede-pub");

		if (sheetMunicipio == null) throw new IOException("Planilha 'F1 Formulario-Municipio' não encontrada");
		if (sheetPrestador == null) throw new IOException("Planilha 'F2 Form-Prestador-rede-pub' não encontrada");

		// Aba Município
		for (int i = 3; i <= sheetMunicipio.getLastRowNum(); i++) {
			Row row = sheetMunicipio.getRow(i);
			if (isRowEmpty(row)) continue;

			Integer somaAS10 = somarIntervalo(row, 14, 17);
			Integer somaES10 = somarIntervalo(row, 20, 23);

			PlanilhaUniversalizacao entity = PlanilhaUniversalizacao.builder()
                    .X00(getCellValueAsString(row.getCell(0)))
                    .X01(getCellValueAsString(row.getCell(1)))
                    .X02(getCellValueAsString(row.getCell(2)))
                    .X03(getCellValueAsString(row.getCell(3)))
                    .X04(getCellValueAsDouble(row.getCell(4)) != null ? (int) getCellValueAsDouble(row.getCell(4)).doubleValue() : null)
                    .X05(getCellValueAsDouble(row.getCell(5)) != null ? (int) getCellValueAsDouble(row.getCell(5)).doubleValue() : null)
                    .X06(getCellValueAsDouble(row.getCell(6)) != null ? (int) getCellValueAsDouble(row.getCell(6)).doubleValue() : null)
                    .X07(getCellValueAsDouble(row.getCell(7)))
                    .X08(getCellValueAsDouble(row.getCell(8)) != null ? (int) getCellValueAsDouble(row.getCell(8)).doubleValue() : null)
                    .X09(getCellValueAsDouble(row.getCell(9)) != null ? (int) getCellValueAsDouble(row.getCell(9)).doubleValue() : null)
                    .X10(getCellValueAsDouble(row.getCell(10)) != null ? (int) getCellValueAsDouble(row.getCell(10)).doubleValue() : null)
                    .X11(getCellValueAsDouble(row.getCell(11)) != null ? (int) getCellValueAsDouble(row.getCell(11)).doubleValue() : null)
                    .X12(getCellValueAsString(row.getCell(12)))
                    .GE01(getCellValueAsDouble(row.getCell(13)) != null ? (int) getCellValueAsDouble(row.getCell(13)).doubleValue() : null)
                    .AS01(getCellValueAsDouble(row.getCell(14)) != null ? (int) getCellValueAsDouble(row.getCell(14)).doubleValue() : null)
                    .AS02(getCellValueAsDouble(row.getCell(15)) != null ? (int) getCellValueAsDouble(row.getCell(15)).doubleValue() : null)
                    .AS03(getCellValueAsDouble(row.getCell(16)) != null ? (int) getCellValueAsDouble(row.getCell(16)).doubleValue() : null)
                    .AS04(getCellValueAsDouble(row.getCell(17)) != null ? (int) getCellValueAsDouble(row.getCell(17)).doubleValue() : null)
                    .AS10(somaAS10)
                    .AR11(getCellValueAsDouble(row.getCell(18)) != null ? (double) ((int) getCellValueAsDouble(row.getCell(18)).doubleValue()) : null)
                    .AR12(getCellValueAsDouble(row.getCell(19)) != null ? (double) ((int) getCellValueAsDouble(row.getCell(19)).doubleValue()) : null)
                    .ES01(getCellValueAsDouble(row.getCell(20)) != null ? (int) getCellValueAsDouble(row.getCell(20)).doubleValue() : null)
                    .ES02(getCellValueAsDouble(row.getCell(21)) != null ? (int) getCellValueAsDouble(row.getCell(21)).doubleValue() : null)
                    .ES03(getCellValueAsDouble(row.getCell(22)) != null ? (int) getCellValueAsDouble(row.getCell(22)).doubleValue() : null)
                    .ES04(getCellValueAsDouble(row.getCell(23)) != null ? (int) getCellValueAsDouble(row.getCell(23)).doubleValue() : null)
                    .ES10(somaES10)
                    .ER11(getCellValueAsDouble(row.getCell(24)) != null ? (int) getCellValueAsDouble(row.getCell(24)).doubleValue() : null)
                    .ER12(getCellValueAsDouble(row.getCell(25)) != null ? (int) getCellValueAsDouble(row.getCell(25)).doubleValue() : null)
                    .codAgrCd(codAgrCd)
                    .aba("M")
                    .importado(false)
                    .build();

			dados.add(entity);
		}

		// Aba Prestador
		for (int i = 3; i <= sheetPrestador.getLastRowNum(); i++) {
			Row row = sheetPrestador.getRow(i);
			if (isRowEmpty(row)) continue;

			PlanilhaUniversalizacao entity = PlanilhaUniversalizacao.builder()
                    .X00(getCellValueAsString(row.getCell(0)))
                    .X01(getCellValueAsString(row.getCell(1)))
                    .X02(getCellValueAsString(row.getCell(2)))
                    .X03(getCellValueAsString(row.getCell(3)))
                    .X20(getCellValueAsString(row.getCell(4)))
                    .X21(getCellValueAsString(row.getCell(5)))
                    .X22(getCellValueAsString(row.getCell(6)))
                    .X23(getCellValueAsString(row.getCell(7)))
                    .X24(getCellValueAsString(row.getCell(8)))
                    .X25(getCellValueAsString(row.getCell(9)))
                    .X26(getCellValueAsString(row.getCell(10)))
                    .GE02(getCellValueAsDouble(row.getCell(11)) != null ? (int) getCellValueAsDouble(row.getCell(11)).doubleValue() : null)
                    .AR01(getCellValueAsDouble(row.getCell(12)) != null ? (int) getCellValueAsDouble(row.getCell(12)).doubleValue() : null)
                    .AR02(getCellValueAsDouble(row.getCell(13)) != null ? (int) getCellValueAsDouble(row.getCell(13)).doubleValue() : null)
                    .AR03(getCellValueAsDouble(row.getCell(14)) != null ? (int) getCellValueAsDouble(row.getCell(14)).doubleValue() : null)
                    .AR04(getCellValueAsDouble(row.getCell(15)) != null ? (int) getCellValueAsDouble(row.getCell(15)).doubleValue() : null)
                    .AR05(getCellValueAsDouble(row.getCell(16)) != null ? (int) getCellValueAsDouble(row.getCell(16)).doubleValue() : null)
                    .AR06(getCellValueAsDouble(row.getCell(17)) != null ? (int) getCellValueAsDouble(row.getCell(17)).doubleValue() : null)
                    .AR07(getCellValueAsDouble(row.getCell(18)) != null ? (int) getCellValueAsDouble(row.getCell(18)).doubleValue() : null)
                    .AR10(getCellValueAsDouble(row.getCell(19)) != null ? (int) getCellValueAsDouble(row.getCell(19)).doubleValue() : null)
                    .ER01(getCellValueAsDouble(row.getCell(20)) != null ? (int) getCellValueAsDouble(row.getCell(20)).doubleValue() : null)
                    .ER02(getCellValueAsDouble(row.getCell(21)) != null ? (int) getCellValueAsDouble(row.getCell(21)).doubleValue() : null)
                    .ER03(getCellValueAsDouble(row.getCell(22)) != null ? (int) getCellValueAsDouble(row.getCell(22)).doubleValue() : null)
                    .ER04(getCellValueAsDouble(row.getCell(23)) != null ? (int) getCellValueAsDouble(row.getCell(23)).doubleValue() : null)
                    .ER05(getCellValueAsDouble(row.getCell(24)) != null ? (int) getCellValueAsDouble(row.getCell(24)).doubleValue() : null)
                    .ER06(getCellValueAsDouble(row.getCell(25)) != null ? (int) getCellValueAsDouble(row.getCell(25)).doubleValue() : null)
                    .ER07(getCellValueAsDouble(row.getCell(26)) != null ? (int) getCellValueAsDouble(row.getCell(26)).doubleValue() : null)
                    .ER10(getCellValueAsDouble(row.getCell(27)) != null ? (int) getCellValueAsDouble(row.getCell(27)).doubleValue() : null)
                    .GE03(getCellValueAsDouble(row.getCell(28)) != null ? (int) getCellValueAsDouble(row.getCell(28)).doubleValue() : null)
                    .codAgrCd(codAgrCd)
                    .importado(false)
                    .aba("P")
                    .build();

			dados.add(entity);
		}

		workbook.close();

		if (!dados.isEmpty()) {
			repository.saveAll(dados);
		}
	}


	private boolean isRowEmpty(Row row) {
		if (row == null) return true;
		for (int i = 0; i < row.getLastCellNum(); i++) {
			Cell cell = row.getCell(i);
			if (cell != null && CellType.forInt(cell.getCellType()) != CellType.BLANK) {
				return false;
			}
		}
		return true;
	}

	private String getCellValueAsString(Cell cell) {
		if (cell == null) return "";
		switch (cell.getCellTypeEnum()) {
			case STRING:
				return cell.getStringCellValue().trim();
			case NUMERIC:
				return String.valueOf((long) cell.getNumericCellValue());
			case BOOLEAN:
				return String.valueOf(cell.getBooleanCellValue());
			case FORMULA:
				try {
					return cell.getStringCellValue();
				} catch (IllegalStateException e) {
					return String.valueOf(cell.getNumericCellValue());
				}
			default:
				return "";
		}
	}

    private Integer getCellValueAsInteger(Cell cell) {
        if (cell == null || cell.getCellTypeEnum() == CellType.BLANK) return null;
        try {
            switch (cell.getCellTypeEnum()) {
                case NUMERIC:
                    return (int) cell.getNumericCellValue();
                case STRING:
                    String value = cell.getStringCellValue().trim();
                    return value.isEmpty() ? null : Integer.parseInt(value);
                case FORMULA:
                    return (int) cell.getNumericCellValue();
                default:
                    return null;
            }
        } catch (Exception e) {
            return null;
        }
    }


    private Double getCellValueAsDouble(Cell cell) {
        if (cell == null || cell.getCellTypeEnum() == CellType.BLANK) return null;
        try {
            switch (cell.getCellTypeEnum()) {
                case NUMERIC:
                    return cell.getNumericCellValue();
                case STRING:
                    String value = cell.getStringCellValue().trim();
                    return value.isEmpty() ? null : Double.parseDouble(value);
                case FORMULA:
                    return cell.getNumericCellValue();
                default:
                    return null;
            }
        } catch (Exception e) {
            return null;
        }
    }


    public Map<String, Object> consultarDataImportacao(Long codAgrCd) {
		PlanilhaUniversalizacao entity = repository.findFirstByCodAgrCdOrderByDataImportacaoDesc(codAgrCd)
				.orElseThrow(() -> new RuntimeException("Registro não encontrado para codAgrCd: " + codAgrCd));

		Map<String, Object> result = new HashMap<>();
		result.put("dataImportacao", entity.getDataImportacao());
		result.put("importado", entity.getImportado());

		return result;
	}

	public ByteArrayOutputStream preencherPlanilha(Long codAgrCd) throws IOException, InvalidFormatException, InvalidFormatException {
		try (InputStream template = getClass().getResourceAsStream(PATH_RELATORIOS + NOME_ARQUIVO)) {
			if (template == null) {
				throw new FileNotFoundException("Arquivo não encontrado no classpath: " + PATH_RELATORIOS + NOME_ARQUIVO);
			}

			Workbook workbook = WorkbookFactory.create(template);
			Sheet aba1 = workbook.getSheetAt(0);
			Sheet aba2 = workbook.getSheetAt(1);

			List<MunicipiosUniversalizacao> municipios = monitoramentoService.findMunicipioByAgenciaReguladoraPageable(codAgrCd, 9999, 0, null);
			List<MonitoramentoUniversalizacaoPrestador> prestadores = monitoramentoService.findPrestadorByAgenciaReguladora(codAgrCd, false, false);
			int linha = 3;
			for (MunicipiosUniversalizacao dados : municipios) {
				Row row = aba1.createRow(linha++);

				row.createCell(0).setCellValue(dados.getAaRef() != null ? dados.getAaRef().toString() : "");
				row.createCell(1).setCellValue(dados.getMunIbgeCd() != null ? dados.getMunIbgeCd().toString() : "");
				row.createCell(2).setCellValue(dados.getMunNm() != null ? dados.getMunNm() : "");
				row.createCell(3).setCellValue(dados.getMunUf() != null ? dados.getMunUf() : "");
				row.createCell(4).setCellValue(dados.getMunPopTotal() != null ? dados.getMunPopTotal().doubleValue() : 0);
				row.createCell(5).setCellValue(dados.getMunDomPartOcup() != null ? dados.getMunDomPartOcup().doubleValue() : 0);
				row.createCell(6).setCellValue(dados.getMunPopUrb() != null ? dados.getMunPopUrb().doubleValue() : 0);
				row.createCell(7).setCellValue(dados.getTaxMedOcup() != null ? dados.getTaxMedOcup().doubleValue() : 0);
				row.createCell(8).setCellValue(dados.getPopTotalAaRef() != null ? dados.getPopTotalAaRef().doubleValue() : 0);
				row.createCell(9).setCellValue(dados.getDomResOcupTotal() != null ? dados.getDomResOcupTotal().doubleValue() : 0);
				row.createCell(10).setCellValue(dados.getDomResOcupUrb() != null ? dados.getDomResOcupUrb().doubleValue() : 0);
				row.createCell(11).setCellValue(dados.getDomResOcupRur() != null ? dados.getDomResOcupRur().doubleValue() : 0);
				row.createCell(12).setCellValue(dados.getEstruturaRegionalizacaoAguaEsg() != null ? dados.getEstruturaRegionalizacaoAguaEsg() : "");
			}

			linha = 3;
			for (MonitoramentoUniversalizacaoPrestador prestador : prestadores) {
				Row row = aba2.createRow(linha++);

				row.createCell(0).setCellValue(prestador.getPrtAaRef() != null ? prestador.getPrtAaRef().toString() : "");
				row.createCell(1).setCellValue(prestador.getMunicipio() != null ? prestador.getMunicipio().getCodigoIbge().toString() : "");
				row.createCell(2).setCellValue(prestador.getMunicipio() != null ? prestador.getMunicipio().getNomeMunicipio() : "");
				row.createCell(3).setCellValue(prestador.getMunicipio() != null ? prestador.getMunicipio().getUf() : "");
				row.createCell(4).setCellValue(prestador.getPrtCd() != null ? prestador.getPrtCd() : "");
				row.createCell(5).setCellValue(prestador.getPrtNm() != null ? prestador.getPrtNm() : "");
				row.createCell(6).setCellValue(prestador.getPrtServ() != null ? prestador.getPrtServ() : "");
				row.createCell(7).setCellValue(prestador.getPrtCtr() != null && prestador.getPrtCtr() ? "Sim" : "Não");
				row.createCell(8).setCellValue(prestador.getPrtNatJur() != null ? prestador.getPrtNatJur() : "");
				row.createCell(9).setCellValue(prestador.getPrtSg() != null ? prestador.getPrtSg() : "");
				row.createCell(10).setCellValue(prestador.getPrtAbg() != null && prestador.getPrtAbg() ? "Local" : "Regional");
			}

			ByteArrayOutputStream outStream = new ByteArrayOutputStream();
			workbook.write(outStream);
			workbook.close();

			return outStream;
		}
	}
}


// Fim do arquivo: PlanilhaUniversalizacaoService.java

// Arquivo: PrefeituraService.java
// Caminho: \br\gov\ana\sarsb\service\PrefeituraService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.PrefeituraDTO;
import br.gov.ana.sarsb.model.entity.TipoEntidadeReguladora;

public interface PrefeituraService {
	
	PrefeituraDTO pesquisarPorCnpj(String cnpj) throws NegocioException;
	
	void atualizarPrefeitura(PrefeituraDTO prefeituraDTO) throws NegocioException;
	
	void criarPrefeitura(PrefeituraDTO prefeituraDTO) throws NegocioException;
	
	TipoEntidadeReguladora pesquisarEntidadeReguladoraPorCnpj(String cnpj) throws NegocioException;


	char[] pesquisarPorUfMunicipio(String uf, String municipio);
}


// Fim do arquivo: PrefeituraService.java

// Arquivo: PrefeituraServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\PrefeituraServiceImpl.java

package br.gov.ana.sarsb.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.hibernate.Hibernate;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.gov.ana.sarsb.config.security.dto.ProfileDTO;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.exception.ServicoRemotoException;
import br.gov.ana.sarsb.model.dto.municipio.PrefeituraDTO;
import br.gov.ana.sarsb.model.dto.municipio.PrefeituraTemPrestadorDTO;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import br.gov.ana.sarsb.model.entity.PrefeituraTemPrestador;
import br.gov.ana.sarsb.model.entity.TipoEntidadeReguladora;
import br.gov.ana.sarsb.model.entity.TipoEtapaServico;
import br.gov.ana.sarsb.model.entity.TipoSubCategoriaPrestador;
import br.gov.ana.sarsb.repository.PrefeituraRepository;
import br.gov.ana.sarsb.repository.TipoEntidadeReguladoraRepository;
import br.gov.ana.sarsb.service.integration.sso.SegurancaIntegrationService;

@Service
public class PrefeituraServiceImpl implements PrefeituraService {

	@Autowired
	private PrefeituraRepository prefeituraRepository;
	
	@Autowired
	private TipoEntidadeReguladoraRepository tipoEntidadeReguladoraRepository;
	
	@Autowired
	private SegurancaIntegrationService segurancaIntegrationService;

	@Override
	public PrefeituraDTO pesquisarPorCnpj(String cnpj) throws NegocioException {
		Optional<Prefeitura> prefeituraOptional = prefeituraRepository.findByCnpj(cnpj);
		if (prefeituraOptional.isPresent()) {
			Prefeitura prefeitura = prefeituraOptional.get();
			if(!prefeitura.getPrefeituraTemPrestadores().isEmpty()) {
				inicializar(prefeitura);
			}
			PrefeituraDTO prefeituraDTO = new PrefeituraDTO();
			BeanUtils.copyProperties(prefeitura, prefeituraDTO);
			
			prefeituraDTO.setPrefeituraTemPrestadores(new ArrayList<>());
			prefeitura.getPrefeituraTemPrestadores().forEach(p -> {
				PrefeituraTemPrestadorDTO ptpDto = new PrefeituraTemPrestadorDTO();
				ptpDto.setTipoEtapaServico(p.getTipoEtapaServico());
				ptpDto.setTipoSubCategoriaPrestador(p.getTipoSubCategoriaPrestador());
				
				prefeituraDTO.getPrefeituraTemPrestadores().add(ptpDto);
			});
			return prefeituraDTO;
		} 
		return null;
	}

	@Override
	public void atualizarPrefeitura(PrefeituraDTO prefeituraDTO) throws NegocioException {
		try {
			Optional<Prefeitura> prefeituraOptional = prefeituraRepository.findById(prefeituraDTO.getId());
			if(prefeituraOptional.isPresent()) {
				Prefeitura prefeituraSalva = prefeituraOptional.get();
				BeanUtils.copyProperties(prefeituraDTO, prefeituraSalva, "id");

				if(!prefeituraSalva.getEmail().equals(prefeituraDTO.getEmail())) {
					atualizarEmailSso(prefeituraDTO);
				}
				prefeituraRepository.save(prefeituraSalva);
			}
		} catch (Exception e) {
			throw new NegocioException("Erro ao salvar prefeitura", e);
		}
	}
	
	private void verificaSeCadastraEntidadeReguladora(TipoEntidadeReguladora tipoEntidadeReguladora) throws NegocioException {
		if(tipoEntidadeReguladora.getId() == null) {
			tipoEntidadeReguladoraRepository.save(tipoEntidadeReguladora);
		}
	}
	
	private void atualizarEmailSso(PrefeituraDTO prefeituraDTO) {
		try {
			ProfileDTO profile = segurancaIntegrationService.consultarProfileUsuarioSemToken(null, prefeituraDTO.getCnpj(), null, null);
			
			if(profile != null) {				
				segurancaIntegrationService.alterarUsuarioSemToken(profile.getId(),
						profile.getNome(), profile.getNomeExibicao(), profile.getIdentificador(),
						prefeituraDTO.getEmail(), profile.getAtivo());
			}
		} catch (ServicoRemotoException e) {
			throw new NegocioException("Erro ao atualizar usuário no Segurança"); 
		}
	}

	@Override
	public void criarPrefeitura(PrefeituraDTO prefeituraDTO) throws NegocioException {
		try {
			Prefeitura novaPrefeitura = new Prefeitura();
			BeanUtils.copyProperties(prefeituraDTO, novaPrefeitura);
			prefeituraRepository.save(novaPrefeitura);
		} catch (Exception e) {
			throw new NegocioException("Erro ao salvar prefeitura", e);
		}
	}
	
	private void inicializar(Prefeitura entity) {
		Hibernate.initialize(entity.getPossuiEntidadeReguladora());
	}
	
	private void vincularPrefeituraPrestador(PrefeituraDTO dto, Prefeitura entity) {
		entity.setPrefeituraTemPrestadores(new ArrayList<>());
		dto.getPrefeituraTemPrestadores().forEach(p -> {
			PrefeituraTemPrestador temPrestador = new PrefeituraTemPrestador();
			temPrestador.setPrefeitura(entity);
			temPrestador.setTipoEtapaServico(new TipoEtapaServico(p.getTipoEtapaServico().getId()));
			temPrestador.setTipoSubCategoriaPrestador(new TipoSubCategoriaPrestador(p.getTipoSubCategoriaPrestador().getId()));
			entity.getPrefeituraTemPrestadores().add(temPrestador);
		});					
	}

	@Override
	public TipoEntidadeReguladora pesquisarEntidadeReguladoraPorCnpj(String cnpj) throws NegocioException {
		Optional<TipoEntidadeReguladora> entidadeReguladoraOptional = tipoEntidadeReguladoraRepository.findByCnpj(cnpj);
		return entidadeReguladoraOptional.isPresent() ? entidadeReguladoraOptional.get() : null;
	}


	@Override
	public char[] pesquisarPorUfMunicipio(String uf, String municipio) throws NegocioException {
		List<String> cnpjList = tipoEntidadeReguladoraRepository.findCnpjByUfAndMunicipio(uf, municipio);
		if (cnpjList != null && !cnpjList.isEmpty()) {
			return cnpjList.get(0).toCharArray(); // Retorna o primeiro CNPJ encontrado
		} else {
			throw new NegocioException("Entidade Reguladora não encontrada");
		}
	}




}


// Fim do arquivo: PrefeituraServiceImpl.java

// Arquivo: PrestadorService.java
// Caminho: \br\gov\ana\sarsb\service\PrestadorService.java

package br.gov.ana.sarsb.service;

import java.util.List;
import java.util.Optional;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.prestador.MunicipioPrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.ServicosReguladosDTO;
import br.gov.ana.sarsb.model.entity.Prestador;
import org.springframework.data.jpa.repository.Query;

public interface PrestadorService {
	
	void criarPrestador(Prestador prestador) throws NegocioException;
	Optional<Prestador> pesquisarPorCnpj(String cnpj) throws NegocioException;
	String prestadorJaExiste(String cnpj) throws NegocioException;

	@Query(value = "SELECT * FROM sabtb_prestador WHERE prt_prestador_validado = true", nativeQuery = true)
	Optional<Prestador> findById(Long id);


	List<Prestador> Listartodos();

	@Query(value = "SELECT * FROM sabtb_prestador WHERE prt_prestador_validado = true", nativeQuery = true)
	List<Prestador> findByPrestadorativoTrue();

	List<MunicipioPrestadorDTO> findMunicipioPrestador(String cnpj) throws NegocioException;

	List<ServicosReguladosDTO> findServicosReguladosPrestador(String cnpj, String municipio) throws NegocioException;

	List<MunicipioPrestadorDTO> findServicosReguladosPorIdEri(Long idAgenciaReguladora) throws NegocioException;

	List<Prestador> findPrestadoresPorIdAgReguladora(Long idAgenciaReguladora) throws NegocioException;

}


// Fim do arquivo: PrestadorService.java

// Arquivo: PrestadorServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\PrestadorServiceImpl.java

package br.gov.ana.sarsb.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


import br.gov.ana.sarsb.model.dto.prestador.MunicipioPrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.ServicosReguladosDTO;
import br.gov.ana.sarsb.repository.TipoServicoReguladoPrestadorRepository;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.Prestador;
import br.gov.ana.sarsb.repository.PrestadorRepository;


@Service
public class PrestadorServiceImpl implements PrestadorService {
	
	@Autowired
	private PrestadorRepository prestadorRepository;
	@Autowired
	private TipoServicoReguladoPrestadorRepository servicoReguladoPrestadorRepository;

	@Autowired
	private MunicipioService municipioService;

	@Override
	public void criarPrestador(Prestador prestador) throws NegocioException {
		try {
			prestadorRepository.save(prestador);
		} catch (Exception e) {
			throw new NegocioException("Erro ao salvar prestador", e);
		}
	}

	@Override
	public Optional<Prestador> pesquisarPorCnpj(String cnpj) throws NegocioException {
		return prestadorRepository.findByCnpj(cnpj);
	}

			@Override
	public String prestadorJaExiste(String cnpj) throws NegocioException {
		Optional<Prestador> prestadorOptional = pesquisarPorCnpj(cnpj);
		return prestadorOptional.isPresent() ? prestadorOptional.get().getNomeRazaoSocial() : "";
	}


	@Override
	public List<Prestador> Listartodos() {
		return null;
	}

	@Override
	public List<Prestador> findByPrestadorativoTrue() {
		return prestadorRepository.findByPrestadorativoTrue();
	}

	@Override
	public List<ServicosReguladosDTO> findServicosReguladosPrestador(String cnpj,  String municipio) {
		List<ServicosReguladosDTO> resultList = new ArrayList<>();

		List<Object[]> servicosRegulados = servicoReguladoPrestadorRepository.findServicosReguladosPrestador(cnpj, municipio);
		for(Object[] row : servicosRegulados) {
			ServicosReguladosDTO servicoRegulado = new ServicosReguladosDTO();
			servicoRegulado.setServicoPrestado((String) row[0]);
			resultList.add(servicoRegulado);
		}
		return resultList;
	}


	public List<MunicipioPrestadorDTO>  findMunicipioPrestador(String cnpj) {
		List<MunicipioPrestadorDTO> resultList = new ArrayList<>();
		List<Object[]> servicosRegulados = servicoReguladoPrestadorRepository.findMunicipiosPrestadorPorUf(cnpj);
		for(Object[] row : servicosRegulados) {
			MunicipioPrestadorDTO servicoRegulado = new MunicipioPrestadorDTO();
			servicoRegulado.setUfMunicipio((String) row[0]);
			servicoRegulado.setNomeMunicipio((String) row[1]);
			servicoRegulado.setCodIBGE((Long) row[2]);
			resultList.add(servicoRegulado);
		}
		return resultList;
	}

	@Override
	public Optional<Prestador> findById(Long id) {
		return prestadorRepository.findById(id);
	}

	@Override
	public List<MunicipioPrestadorDTO> findServicosReguladosPorIdEri(Long idAgenciaReguladora) throws NegocioException {
		List<MunicipioPrestadorDTO> resultList = new ArrayList<>();
		List<Object[]> servicosRegulados = servicoReguladoPrestadorRepository
				.findMunicipiosPrestadorPorIdAgReguladora(idAgenciaReguladora);
		for(Object[] row : servicosRegulados) {
			MunicipioPrestadorDTO servicoRegulado = new MunicipioPrestadorDTO();
			servicoRegulado.setNomeMunicipio((String) row[0]);
			servicoRegulado.setUfMunicipio((String) row[1]);
			servicoRegulado.setCodIBGE((Long) row[2]);
			resultList.add(servicoRegulado);
		}
		return resultList;
	}

	@Override
	public List<Prestador> findPrestadoresPorIdAgReguladora(Long idAgenciaReguladora) throws NegocioException {
		List<Prestador> resultList;
		resultList = servicoReguladoPrestadorRepository.findPrestadoresPorIdAgReguladora(idAgenciaReguladora);
		return resultList;
	}

}


// Fim do arquivo: PrestadorServiceImpl.java

// Arquivo: ProcessoAgenciaService.java
// Caminho: \br\gov\ana\sarsb\service\ProcessoAgenciaService.java

package br.gov.ana.sarsb.service;

import java.io.File;
import java.util.List;

import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.FormularioCefAgenciaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.ProcessoCefAgenciaDTO;

public interface ProcessoAgenciaService {
	
	Long criarProcesso(ProcessoCefAgenciaDTO processoDTO) throws NegocioException;
	Long atualizarProcesso(ProcessoCefAgenciaDTO processoDTO) throws NegocioException;
	List<ProcessoCefAgenciaDTO> consultarProcessos(Long idFormulario) throws NegocioException;
	FormularioCefAgenciaDTO criarOuConsultarFormularioAgencia(String cnpjAgencia) throws NegocioException;
	void salvarArquivo(Long idProcesso, MultipartFile arquivo) throws NegocioException;
	Resource recuperarArquivo(Long idProcesso, String nomeArquivo) throws NegocioException;
	void deletarArquivo(Long idProcesso, String nomeArquivo) throws NegocioException;
	void deletarProcesso(Long idProcesso) throws NegocioException;
	Long finalizarProcesso(Long idFormulario) throws NegocioException;
	File gerarReciboComprovante(Long numeroRecibo); 

}


// Fim do arquivo: ProcessoAgenciaService.java

// Arquivo: ProcessoAgenciaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProcessoAgenciaServiceImpl.java

package br.gov.ana.sarsb.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.mail.EmailException;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.AgenciaTemProtocoloPrestadorDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.FormularioCefAgenciaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.ManifestacaoTecnicaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.ProcessoCefAgenciaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RespostaProtocoloDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloSimplesDTO;
import br.gov.ana.sarsb.model.entity.AgenciaReguladora;
import br.gov.ana.sarsb.model.entity.AgenciaTemProtocoloPrestador;
import br.gov.ana.sarsb.model.entity.FormularioCefAgencia;
import br.gov.ana.sarsb.model.entity.ManifestacaoTecnica;
import br.gov.ana.sarsb.model.entity.PerguntaDecreto;
import br.gov.ana.sarsb.model.entity.ProcessoCefAgencia;
import br.gov.ana.sarsb.model.entity.RespostaProtocolo;
import br.gov.ana.sarsb.model.enums.Configuracoes;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.repository.AgenciaTemProtocoloPrestadorRepository;
import br.gov.ana.sarsb.repository.FormularioCefAgenciaRepository;
import br.gov.ana.sarsb.repository.ManifestacaoTecnicaRepository;
import br.gov.ana.sarsb.repository.ProcessoCefAgenciaRepository;
import br.gov.ana.sarsb.repository.RespostaProtocoloRepository;
import br.gov.ana.sarsb.util.Constantes;
import br.gov.ana.sarsb.util.ConverterUtil;
import br.gov.ana.sarsb.util.EmailUtil;
import br.gov.ana.sarsb.util.LogUtil;
import br.gov.ana.sarsb.util.SasbUtil;

@Transactional
@Service
public class ProcessoAgenciaServiceImpl implements ProcessoAgenciaService {
	
	private ConfigCache cc = ConfigCache.getInstance();

	@Autowired
	private ProcessoCefAgenciaRepository processoCefAgenciaRepository;
	
	@Autowired
	private FormularioCefAgenciaRepository formularioCefAgenciaRepository;
	
	@Autowired
	private AgenciaReguladoraRepository agenciaReguladoraRepository;
	
	@Autowired
	private AgenciaTemProtocoloPrestadorRepository agenciaTemProtocoloPrestadorRepository;
	
	@Autowired
	private ManifestacaoTecnicaRepository manifestacaoTecnicaRepository;
	
	@Autowired
	private RespostaProtocoloRepository respostaProtocoloRepository;
	
	@Autowired
	private ProtocoloPrestadorService protocoloPrestadorService;
	
	@Autowired
	private GerarRelatorioService gerarRelatorioService;
	
	@Autowired
	private FileStorageService fileStorageService;
	
	@Override
	public Long criarProcesso(ProcessoCefAgenciaDTO processoDTO) throws NegocioException {
		try {
			ProcessoCefAgencia processo = new ProcessoCefAgencia();
			BeanUtils.copyProperties(processoDTO, processo);
			processo.setFormularioCefAgencia(toFormularioCefAgencia(processoDTO.getFormularioCefAgencia()));
			processoCefAgenciaRepository.save(processo);
			
			List<ManifestacaoTecnica> listaManifestacaoTecnica = toListaManifestacaoTecnica(processoDTO.getListaManifestacaoTecnica(), processo);
			manifestacaoTecnicaRepository.saveAll(listaManifestacaoTecnica);
			
			List<AgenciaTemProtocoloPrestador> listaProtocolo = toListaAgenciaTemProtocoloPrestador(processoDTO.getListaProtocoloPrestador(), processo);
			agenciaTemProtocoloPrestadorRepository.saveAll(listaProtocolo);

			//listaProtocolo.forEach(p -> {
				//respostaProtocoloRepository.saveAll(p.getListaRespostas());
			//});
			return processo.getId();
		} catch (NegocioException e) {
			return null;
		}
	}
	
	@Override
	public List<ProcessoCefAgenciaDTO> consultarProcessos(Long idFormulario) throws NegocioException {
		List<ProcessoCefAgencia> listaProcessos = processoCefAgenciaRepository.findByFormularioCefAgencia(new FormularioCefAgencia(idFormulario));
		List<ProcessoCefAgenciaDTO> listaProcessosDTO = new ArrayList<>();
		listaProcessos.forEach(p -> {
			ProcessoCefAgenciaDTO dto = new ProcessoCefAgenciaDTO();
			BeanUtils.copyProperties(p, dto);
			dto.setFormularioCefAgencia(toFormularioCefAgenciaDTO(p.getFormularioCefAgencia()));
			dto.setListaManifestacaoTecnica(toListaManifestacaoTecnicaDTO(p.getListaManifestacaoTecnica()));
			dto.setListaProtocoloPrestador(toListaAgenciaTemProtocoloPrestadorDTO(p.getListaProtocolo()));
			listaProcessosDTO.add(dto);
		});
		return listaProcessosDTO.stream().sorted(Comparator.comparing(ProcessoCefAgenciaDTO::getId)).collect(Collectors.toList());
	}

	@Override
	public FormularioCefAgenciaDTO criarOuConsultarFormularioAgencia(String cnpjAgencia) throws NegocioException {
		Optional<FormularioCefAgencia> formularioOptional = formularioCefAgenciaRepository.findByAgenciaReguladora(cnpjAgencia);
		if(!formularioOptional.isPresent()) {
			Optional<AgenciaReguladora> agenciaReguladoraOptional = agenciaReguladoraRepository.findByCnpj(cnpjAgencia);
			if(agenciaReguladoraOptional.isPresent()) {
				FormularioCefAgencia novo = FormularioCefAgencia.builder().agenciaReguladora(agenciaReguladoraOptional.get()).build();
				novo = formularioCefAgenciaRepository.save(novo);
				return toFormularioCefAgenciaDTO(novo);
			}	
		}
		return formularioOptional.isPresent() ? toFormularioCefAgenciaDTO(formularioOptional.get()) : new FormularioCefAgenciaDTO();
	}

	@Override
	public void salvarArquivo(Long idProcesso, MultipartFile arquivo) throws NegocioException {
		try {
			fileStorageService.save(arquivo, montarCaminhoArquivo(idProcesso));
			if(!Files.exists(montarCaminhoArquivo(idProcesso).resolve(arquivo.getOriginalFilename()))){
				deletarProcesso(idProcesso);
			}
		} catch (NegocioException | IOException e) {
			throw new NegocioException("erroSalvarRegistro", e);
		}
	}

	@Override
	public Resource recuperarArquivo(Long idProcesso, String nomeArquivo) throws NegocioException {
		try {
			return fileStorageService.load(nomeArquivo, montarCaminhoArquivo(idProcesso));
		} catch (NegocioException | IOException e) {
			throw new NegocioException("erroAoRecuperarRegistro", e);
		}
	}
	
	@Override
	public void deletarArquivo(Long idProcesso, String nomeArquivo) throws NegocioException {
		Optional<ProcessoCefAgencia> processoOptional = processoCefAgenciaRepository.findById(idProcesso);
		if(processoOptional.isPresent()) {
			ProcessoCefAgencia processo = processoOptional.get();
			if(validaSeNomeArquivoExiste(processo.getArquivoDecisaoTecnica()) && 
					processo.getArquivoDecisaoTecnica().equalsIgnoreCase(nomeArquivo)) {
				processo.setArquivoDecisaoTecnica(null);
			} else if(validaSeNomeArquivoExiste(processo.getArquivoDocumentoComplementar()) && 
					processo.getArquivoDocumentoComplementar().equalsIgnoreCase(nomeArquivo)) {
				processo.setArquivoDocumentoComplementar(null);
			} else if(validaSeNomeArquivoExiste(processo.getArquivoProcessoDigitalCompleto()) && 
					processo.getArquivoProcessoDigitalCompleto().equalsIgnoreCase(nomeArquivo)) {
				processo.setArquivoProcessoDigitalCompleto(null);
			}
			processoCefAgenciaRepository.save(processo);
			
			for(ManifestacaoTecnica m : processo.getListaManifestacaoTecnica()) {
				if(validaSeNomeArquivoExiste(m.getArquivo()) && 
						m.getArquivo().equalsIgnoreCase(nomeArquivo)) {
					manifestacaoTecnicaRepository.delete(m);
				}
			}
			
			try {
				fileStorageService.delete(nomeArquivo, montarCaminhoArquivo(idProcesso));
			} catch (NegocioException | IOException e) {
				throw new NegocioException("erroDeletarRegistro", e);
			}
		}
	}
	
	private boolean validaSeNomeArquivoExiste(String arquivo) {
		return arquivo != null;
	}
	
	private Path montarCaminhoArquivo(Long idProcesso) throws NegocioException {
		Optional<ProcessoCefAgencia> processoOptional = processoCefAgenciaRepository.findById(idProcesso);
		if(processoOptional.isPresent()) {
			return Paths.get(cc.get(Configuracoes.VOLUME_SASB.toString()) + Constantes.PATH_AGENCIA + 
					processoOptional.get().getFormularioCefAgencia().getAgenciaReguladora().getCnpj() + "/" + idProcesso);			
		} else {
			throw new NegocioException("Não foi encontrado processo para id informado!");
		}
	}
	
	@Override
	public Long atualizarProcesso(ProcessoCefAgenciaDTO processoDTO) throws NegocioException {
		return criarProcesso(processoDTO);
	}

	@Override
	public void deletarProcesso(Long idProcesso) throws NegocioException {
		try {
			Optional<ProcessoCefAgencia> processoOptional = processoCefAgenciaRepository.findById(idProcesso);
			if(processoOptional.isPresent()) {
				ProcessoCefAgencia processo = processoOptional.get();
				if(validaSeNomeArquivoExiste(processo.getArquivoDecisaoTecnica())) {
					fileStorageService.delete(processo.getArquivoDecisaoTecnica(), montarCaminhoArquivo(idProcesso));
				}
				if(validaSeNomeArquivoExiste(processo.getArquivoDocumentoComplementar())) {
					fileStorageService.delete(processo.getArquivoDocumentoComplementar(), montarCaminhoArquivo(idProcesso));
				}
				if(validaSeNomeArquivoExiste(processo.getArquivoProcessoDigitalCompleto())) {
					fileStorageService.delete(processo.getArquivoProcessoDigitalCompleto(), montarCaminhoArquivo(idProcesso));
				}
				processo.getListaManifestacaoTecnica().forEach(m -> {
					if(validaSeNomeArquivoExiste(m.getArquivo())) {
						try {
							fileStorageService.delete(m.getArquivo(), montarCaminhoArquivo(idProcesso));
						} catch (NegocioException | IOException e) {
							throw new NegocioException("erroDeletarRegistro", e);
						}
					}
				});
				deletarArquivo(idProcesso, null);
				manifestacaoTecnicaRepository.deleteAll(processo.getListaManifestacaoTecnica());
				processo.getListaProtocolo().forEach(p -> {
					respostaProtocoloRepository.deleteAll(p.getListaRespostas());
				});
				agenciaTemProtocoloPrestadorRepository.deleteAll(processo.getListaProtocolo());
				processoCefAgenciaRepository.delete(processo);
			}
		} catch (NegocioException | IOException e) {
			throw new NegocioException("erroDeletarRegistro", e);
		}
		
	}
	
	@Override
	public Long finalizarProcesso(Long idFormulario) throws NegocioException {
		Optional<FormularioCefAgencia> formularioOptional = formularioCefAgenciaRepository.findById(idFormulario);
		if(formularioOptional.isPresent()) {
			FormularioCefAgencia formularioSalvo = formularioOptional.get();
			formularioSalvo.setDataEnvio(new Date());
			formularioSalvo.setNumeroRecibo(SasbUtil.gerarNumeroRecibo(formularioCefAgenciaRepository
					.pesquisarUltimoNumeroReciboPorAno(String.valueOf(LocalDate.now().getYear()))));
			formularioCefAgenciaRepository.save(formularioSalvo);
			enviarEmailRecibo(formularioSalvo.getAgenciaReguladora(), gerarReciboComprovante(formularioSalvo.getNumeroRecibo()));
			return formularioSalvo.getNumeroRecibo();
		} else {
			throw new NegocioException("Não foi encontrado formulario para id informado!");
		}
	}
	
	private void enviarEmailRecibo(AgenciaReguladora agencia, File recibo) throws NegocioException {
		try {
			String corpo = " Prezado(a) " + agencia.getNome() + ","
					+ "\n Segue em anexo o recibo do preenchimento e envio do formulário on-line referente ao Decreto 10.710/2021."
					+ "\n\n Atenciosamente, "
					+ "\n\n Agência Nacional de Águas e Saneamento Básico"
					+ "\n\n Não responder a este e-mail. Ele foi enviado automaticamente pelo sistema.";

			if (agencia.getEmail() != null) {
				EmailUtil.enviar(corpo, "Comprovante do Preencimento do Formulário", "nao-responda@ana.gov.br",
						"Agência Nacional de Águas e Saneamento Básico", recibo, agencia.getEmail());
			}
		} catch (EmailException e) {
			throw new NegocioException("Erro ao enviar e-mail de confirmação de cadastro do Empreendimento!");
		}
	}

	@Override
	public File gerarReciboComprovante(Long numeroRecibo) {
		String numeroReciboFormatado = ConverterUtil
				.aplicaMascaraNumeroRecibo(StringUtils.leftPad(numeroRecibo.toString(), 9, "0"));
		Optional<FormularioCefAgencia> formularioOptional = formularioCefAgenciaRepository.findByNumeroRecibo(numeroRecibo);
		if (formularioOptional != null && !formularioOptional.equals(Optional.empty())) {
			FormularioCefAgencia formularioSalvo = formularioOptional.get();
			ReciboDTO recibo = ReciboDTO.builder()
					.cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(formularioSalvo.getAgenciaReguladora().getCnpj()))
					.dataRegistro(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(formularioSalvo.getDataEnvio()))
					.nomeTitular(formularioSalvo.getAgenciaReguladora().getNome())
					.numeroRecibo(numeroReciboFormatado)
					.build();
			gerarRelatorioService.gerarReciboAgencia(recibo);
			return recibo.getRecibo();
		} else {
			throw new NegocioException(LogUtil.messageToJson("Número do recibo não foi encontrado!"));
		}
	}


	private List<ManifestacaoTecnica> toListaManifestacaoTecnica(List<ManifestacaoTecnicaDTO> lista, ProcessoCefAgencia p) {
		lista.forEach(m -> {
			if(Objects.nonNull(m.getId()) && m.isExcluido()) {	
				try {
					fileStorageService.delete(m.getArquivo(), montarCaminhoArquivo(p.getId()));
				} catch (NegocioException | IOException e) {
					throw new NegocioException("erroDeletarRegistro", e);
				}
				manifestacaoTecnicaRepository.deleteById(m.getId());
			}
		});
		return lista.stream().filter(f -> !f.isExcluido()).map(m -> toManifestacaoTecnica(m, p)).collect(Collectors.toList());
	}
	
	private ManifestacaoTecnica toManifestacaoTecnica(ManifestacaoTecnicaDTO m, ProcessoCefAgencia p) {
		return ManifestacaoTecnica.builder()
				.id(m.getId())
				.arquivo(m.getArquivo())
				.processoCefAgencia(p)
				.build();
	}
	
	private List<ManifestacaoTecnicaDTO> toListaManifestacaoTecnicaDTO(Set<ManifestacaoTecnica> lista) {
		return lista.stream().map(this::toManifestacaoTecnicaDTO).collect(Collectors.toList());
	}
	
	private ManifestacaoTecnicaDTO toManifestacaoTecnicaDTO(ManifestacaoTecnica m) {
		return ManifestacaoTecnicaDTO.builder()
				.id(m.getId())
				.arquivo(m.getArquivo())
				.build();
	}
	
	private List<AgenciaTemProtocoloPrestador> toListaAgenciaTemProtocoloPrestador(List<AgenciaTemProtocoloPrestadorDTO> lista, ProcessoCefAgencia p) {
		List<AgenciaTemProtocoloPrestador> listaProtocolos = lista.stream().map(a -> toAgenciaTemProtocoloPrestador(a, p)).collect(Collectors.toList());
		List<AgenciaTemProtocoloPrestador> listaExcluidos = lista.stream().filter(AgenciaTemProtocoloPrestadorDTO::isExcluido).map(a -> toAgenciaTemProtocoloPrestador(a, p)).collect(Collectors.toList());
		if(!listaExcluidos.isEmpty()) {
			listaProtocolos.removeAll(listaExcluidos);
			listaExcluidos.forEach(e -> {
				respostaProtocoloRepository.deleteAll(e.getListaRespostas());
			});
			agenciaTemProtocoloPrestadorRepository.deleteAll(listaExcluidos);			
		}
		return listaProtocolos;
	}
	
	private AgenciaTemProtocoloPrestador toAgenciaTemProtocoloPrestador(AgenciaTemProtocoloPrestadorDTO a, ProcessoCefAgencia p) {
		AgenciaTemProtocoloPrestador agenciaTemProtocoloPrestador = AgenciaTemProtocoloPrestador.builder()
				.id(a.getId())
				.protocolo(a.getProtocolo())
				.processoCefAgencia(p)
				.finalizado(a.isFinalizado())
				.build();
		//agenciaTemProtocoloPrestador.setListaRespostas(toListaRespostaProtocolo(a.getListaRespostas(), agenciaTemProtocoloPrestador));
		return agenciaTemProtocoloPrestador;
	}
	
	private List<RespostaProtocolo> toListaRespostaProtocolo(List<RespostaProtocoloDTO> lista, AgenciaTemProtocoloPrestador a) {
		return lista.stream().map(r -> toRespostaProtocolo(r, a)).collect(Collectors.toList());
	}
	
	private RespostaProtocolo toRespostaProtocolo(RespostaProtocoloDTO r, AgenciaTemProtocoloPrestador a) {
		return RespostaProtocolo.builder()
				.id(r.getId())
				.agenciaTemProtocoloPrestador(a)
				.perguntaDecreto(new PerguntaDecreto(r.getIdPerguntaDecreto()))
				.resposta(r.getResposta())
				.comentario(r.getComentario())
				.build();
	}	
	
	private List<AgenciaTemProtocoloPrestadorDTO> toListaAgenciaTemProtocoloPrestadorDTO(Set<AgenciaTemProtocoloPrestador> lista) {
		return lista.stream().map(this::toAgenciaTemProtocoloPrestadorDTO).collect(Collectors.toList());
	}
	
	private AgenciaTemProtocoloPrestadorDTO toAgenciaTemProtocoloPrestadorDTO(AgenciaTemProtocoloPrestador a) {
		ProtocoloSimplesDTO protocoloDTO = pesquisarProtocoloSimplesDTO(a);
		AgenciaTemProtocoloPrestadorDTO agenciaTemProtocoloPrestadorDTO = AgenciaTemProtocoloPrestadorDTO.builder()
				.id(a.getId())
				.cnpjPrestador(protocoloDTO.getCnpjPrestador())
				.nomePrestador(protocoloDTO.getNomePrestador())
				.protocolo(a.getProtocolo())
				.finalizado(a.getFinalizado())
				.protocoloAdicional(protocoloDTO.isProtocoloAdicional())
				.build();
		//agenciaTemProtocoloPrestadorDTO.setListaRespostas(toListaRespostaProtocoloDTO(a.getListaRespostas()));
		return agenciaTemProtocoloPrestadorDTO;
	}
	
	private ProtocoloSimplesDTO pesquisarProtocoloSimplesDTO(AgenciaTemProtocoloPrestador a) {
		ProtocoloSimplesDTO protocoloDTO = protocoloPrestadorService.pesquisarPorProtocoloPrestador(a.getProtocolo());
		if(Objects.isNull(protocoloDTO)) {
			protocoloDTO = protocoloPrestadorService.pesquisarPorProtocoloAdicional(a.getProtocolo(), a.getProcessoCefAgencia()
					.getFormularioCefAgencia().getAgenciaReguladora().getCnpj());
		}
		return protocoloDTO;
	}
	
	private List<RespostaProtocoloDTO> toListaRespostaProtocoloDTO(List<RespostaProtocolo> lista) {
		return lista.stream().map(this::toRespostaProtocoloDTO).collect(Collectors.toList());
	}
	
	private RespostaProtocoloDTO toRespostaProtocoloDTO(RespostaProtocolo r) {
		return RespostaProtocoloDTO.builder()
				.id(r.getId())
				.idProtocoloPrestador(r.getAgenciaTemProtocoloPrestador().getId())
				.idPerguntaDecreto(r.getPerguntaDecreto().getId())
				.resposta(r.getResposta())
				.comentario(r.getComentario())
				.build();
	}
	
	private FormularioCefAgencia toFormularioCefAgencia(FormularioCefAgenciaDTO dto) {
		Optional<AgenciaReguladora> agenciaReguladoraOptional = agenciaReguladoraRepository.findByCnpj(dto.getCnpjAgenciaReguladora());
		return FormularioCefAgencia.builder()
				.id(dto.getId())
				.numeroRecibo(dto.getNumeroRecibo())
				.agenciaReguladora(agenciaReguladoraOptional.isPresent() ? agenciaReguladoraOptional.get() : null)
				.dataEnvio(dto.getDataEnvio())
				.build();
	}
	
	private FormularioCefAgenciaDTO toFormularioCefAgenciaDTO(FormularioCefAgencia entity) {
		return FormularioCefAgenciaDTO.builder()
				.id(entity.getId())
				.numeroRecibo(entity.getNumeroRecibo())
				.cnpjAgenciaReguladora(entity.getAgenciaReguladora().getCnpj())
				.dataEnvio(entity.getDataEnvio())
				.build();
	}
}


// Fim do arquivo: ProcessoAgenciaServiceImpl.java

// Arquivo: ProtocoloAtoNormativoService.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloAtoNormativoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ProtocoloAtoNormativo;

import java.util.List;
import java.util.Optional;

public interface ProtocoloAtoNormativoService {

    void salvar(ProtocoloAtoNormativo protocoloAtoNormativo);

    List<ProtocoloAtoNormativo> buscarPorEri (Long idAgr);

    Optional<ProtocoloAtoNormativo> buscarPorNuProtocolo(Long idProtocolo);

    Optional<ProtocoloAtoNormativo> buscarPorIdAto(Long idAto);




}


// Fim do arquivo: ProtocoloAtoNormativoService.java

// Arquivo: ProtocoloAtoNormativoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloAtoNormativoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ProtocoloAtoNormativo;
import br.gov.ana.sarsb.repository.ProtocoloAtoNormativoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class ProtocoloAtoNormativoServiceImpl implements ProtocoloAtoNormativoService {

    @Autowired
    ProtocoloAtoNormativoRepository protocoloAtoNormativoRepository;

    @Override
    public void salvar(ProtocoloAtoNormativo protocoloAtoNormativo) {
        protocoloAtoNormativoRepository.save(protocoloAtoNormativo);
    }

    @Override
    public List<ProtocoloAtoNormativo> buscarPorEri(Long idAgr) {
        return protocoloAtoNormativoRepository.findByIdAgr(idAgr);
    }

    public Optional<ProtocoloAtoNormativo> buscarPorNuProtocolo(Long idProtocolo){
        return protocoloAtoNormativoRepository.findById(idProtocolo);
    }


    public Optional<ProtocoloAtoNormativo> buscarPorIdAto(Long idAto){
        return protocoloAtoNormativoRepository.findByIdAtoNormativo(idAto);
    }








}


// Fim do arquivo: ProtocoloAtoNormativoServiceImpl.java

// Arquivo: ProtocoloConformidadeService.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloConformidadeService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ProtocoloConformidade;
import br.gov.ana.sarsb.model.entity.ProtocoloContratos;

import java.util.List;
import java.util.Optional;

public interface ProtocoloConformidadeService {

    void salvar(ProtocoloConformidade protocoloConformidade);

    Optional<ProtocoloConformidade> buscarPorNuProtocolo(Long idProtocolo);

    Optional<ProtocoloConformidade> buscarPorIdConformidade(Long idConformidade);

    List<ProtocoloConformidade> buscarConformidadePorIdAgr(Long idAgr);


}


// Fim do arquivo: ProtocoloConformidadeService.java

// Arquivo: ProtocoloConformidadeServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloConformidadeServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ProtocoloConformidade;
import br.gov.ana.sarsb.repository.ProtocoloConformidadeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class ProtocoloConformidadeServiceImpl implements ProtocoloConformidadeService {

    @Autowired
    ProtocoloConformidadeRepository protocoloConformidadeRepository;

    @Override
    public void salvar(ProtocoloConformidade protocoloConformidade) {
        protocoloConformidadeRepository.save(protocoloConformidade);
    }

    public Optional<ProtocoloConformidade> buscarPorNuProtocolo(Long idProtocolo) {
        return protocoloConformidadeRepository.findById(idProtocolo);
    }

    public Optional<ProtocoloConformidade> buscarPorIdConformidade(Long idConformidade) {
        return protocoloConformidadeRepository.findByConformidadeId(idConformidade);
    }

    public List<ProtocoloConformidade> buscarConformidadePorIdAgr(Long idAgr) {
        return  protocoloConformidadeRepository.findByConformidadePorIdAgr(idAgr);
    }


}


// Fim do arquivo: ProtocoloConformidadeServiceImpl.java

// Arquivo: ProtocoloIndenizacaoService.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloIndenizacaoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ProtocoloIndenizacaoDTO;
import br.gov.ana.sarsb.model.entity.ProtocoloIndenizacao;

import java.io.File;
import java.util.List;


public interface ProtocoloIndenizacaoService {

    List<ProtocoloIndenizacao> buscarPorIdProtocolo(Long idProtocolo);


    ProtocoloIndenizacao salvar(ProtocoloIndenizacao protocolo);


    List<ProtocoloIndenizacaoDTO> findAll();


    File gerarReciboAtoDetalhado(Long nuProtocolo);

    File gerarReciboContratoDetalhado(Long nuProtocolo);

    //List<ProtocoloIndenizacao> buscarPorIdAgr(Long idAgr);
}


// Fim do arquivo: ProtocoloIndenizacaoService.java

// Arquivo: ProtocoloIndenizacaoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloIndenizacaoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ProtocoloIndenizacaoDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.repository.AtoNormativoDetalhadoRepository;
import br.gov.ana.sarsb.repository.ContratoDetalhamentoRespository;
import br.gov.ana.sarsb.repository.ProtocoloIndenizacaoRepository;
import br.gov.ana.sarsb.util.ConverterUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;


@Transactional
@Service
public class ProtocoloIndenizacaoServiceImpl implements ProtocoloIndenizacaoService {

    @Autowired
    private ProtocoloIndenizacaoRepository protocoloIndenizacaoRepository;

    @Autowired
    private ContratoDetalhamentoRespository contratoDetalhamentoRespository;

    @Autowired
    private NormasDeReferenciaService normasDeReferenciaService;

    @Autowired
    private AtoNormativoDetalhadoRepository atoNormativoDetalhadoRepository;

    @Autowired
    private ProtocoloIndenizacaoService protocoloIndenizacaoService;

    @Autowired
    private MunicipioContratoService municipioContratoService;

    @Autowired
    private GerarRelatorioService gerarRelatorioService;
    @Autowired
    private AgenciaReguladoraRepository agenciaReguladoraRepository;

    @Autowired
    private ProtocoloService protocoloService;
    @Autowired
    private  ContratoService contratoService;



    @Override
    public List<ProtocoloIndenizacao> buscarPorIdProtocolo(Long idProtocolo) {
        return protocoloIndenizacaoRepository.findByProtocoloId(idProtocolo);
    }



    @Override
    public ProtocoloIndenizacao salvar(ProtocoloIndenizacao protocolo) {
        return protocoloIndenizacaoRepository.save(protocolo);
    }

    @Override
    public List<ProtocoloIndenizacaoDTO> findAll() {
        List<ProtocoloIndenizacao> lista = protocoloIndenizacaoRepository.findAll();

        return lista.stream()
                .map(p -> ProtocoloIndenizacaoDTO.builder()
                        .idProtocolo(p.getProtocolo().getId())
                        .numeroProtocolo(p.getProtocolo().getNumeroProtocolo())
                        .dataRegistro(p.getProtocolo().getDataEnvio())
                        .contratoDetalhadoId(p.getContratoDetalhado() != null ? p.getContratoDetalhado().getId() : null)
                        .atoNormativoDetalhadoId(p.getAtoNormativoDetalhado() != null ? p.getAtoNormativoDetalhado().getId() : null)
                        .normaId(p.getNorma() != null ? p.getNorma().getId() : null)
                        .normaNome(p.getNorma() != null ? p.getNorma().getNome() : null)
                        .normaDescricao(p.getNorma() != null ? p.getNorma().getDescricao() : null)
                        .anoReferencia(p.getAnoReferencia())
                        .build()
                )
                .collect(Collectors.toList());
    }


//    @Override
//    public List<ProtocoloIndenizacao> buscarPorIdAgr(Long idAgr) {
//        return protocoloIndenizacaoRepository.findByIdArg(idAgr);
//    }

    @Override
    public File gerarReciboAtoDetalhado(Long nuProtocolo) {

        List<Long> idAtodetalhado = new ArrayList<>();
        List<MunicipioContrato> municipioContratoes = new ArrayList<>();

        List<ProtocoloIndenizacao> protocoloIndenizacoes = protocoloIndenizacaoService.buscarPorIdProtocolo(nuProtocolo);

        protocoloIndenizacoes.forEach(protocoloIndenizacao -> {
            idAtodetalhado.add(protocoloIndenizacao.getAtoNormativoDetalhado().getId());
        });

        LocalDateTime  dataEnvioProtocolo = LocalDateTime.now();

        Optional<Protocolo> protocolo = protocoloService.buscarPorNumeroProtocolo(nuProtocolo);

        List<AtoNormativoDetalhado> atos = atoNormativoDetalhadoRepository.findAllById(idAtodetalhado);

        AtoNormativoDetalhado ato = atos.get(0);

        AgenciaReguladora agenciaReguladora = agenciaReguladoraRepository.getById(ato.getIdAgr()) ;

        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.getCnpj()))
                .dataRegistro(protocolo.get().getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.getNome())
                .numeroRecibo(protocolo.get().getNumeroProtocolo())
                .build();

        gerarRelatorioService.gerarReciboAtoDetalhado(recibo, ato, agenciaReguladora, protocolo.get().getDataEnvio() );

        return recibo.getRecibo();
    }

    @Override
    public File gerarReciboContratoDetalhado(Long nuProtocolo) {
        List<Long> idAtodetalhado = new ArrayList<>();
        List<MunicipioContrato> municipioContratoes = new ArrayList<>();

        List<ProtocoloIndenizacao> protocoloIndenizacoes = protocoloIndenizacaoService.buscarPorIdProtocolo(nuProtocolo);

        protocoloIndenizacoes.forEach(protocoloIndenizacao -> {
            idAtodetalhado.add(protocoloIndenizacao.getContratoDetalhado().getId());
        });

        LocalDateTime dataEnvioProtocolo = LocalDateTime.now();

        Optional<Protocolo> protocolo = protocoloService.buscarPorNumeroProtocolo(nuProtocolo);

        List<ContratoDetalhamento> atos = contratoDetalhamentoRespository.findAllById(idAtodetalhado);

        ContratoDetalhamento contratoDetalhamento = atos.get(0);

        ContratoDTO contratoDTO = contratoService.obterContratoPorId(Long.valueOf(contratoDetalhamento.getConDetConCd()));
        String codigoInterno = contratoDTO.getCodigoInterno();
        AgenciaReguladora agenciaReguladora = agenciaReguladoraRepository.getById(contratoDetalhamento.getConDetIdAgr());

        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.getCnpj()))
                .dataRegistro(protocolo.get().getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.getNome())
                .numeroRecibo(protocolo.get().getNumeroProtocolo())
                .build();


        gerarRelatorioService.gerarReciboContratoDetalhado(recibo, contratoDetalhamento, agenciaReguladora, protocolo.get().getDataEnvio(),codigoInterno);

        return recibo.getRecibo();
    }


}



// Fim do arquivo: ProtocoloIndenizacaoServiceImpl.java

// Arquivo: ProtocoloPrestadorService.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloPrestadorService.java

package br.gov.ana.sarsb.service;

import java.util.List;

import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloAdicionalDTO;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloPrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloSimplesDTO;

public interface ProtocoloPrestadorService {
	
	List<ProtocoloSimplesDTO> carregarListaProtocoloPrestador(String cnpj) throws NegocioException;
	ProtocoloPrestadorDTO consultarPorProtocolo(String protocolo) throws NegocioException;
	Long criarProtocoloAdicional(ProtocoloAdicionalDTO protocoloAdicionalDTO) throws NegocioException;
	ProtocoloAdicionalDTO consultarPorProtocoloAdicional(String protocolo, String cnpjAgencia, String cnpjPrestador) throws NegocioException;
	void salvarArquivoProtocoloAdicional(Long idProtocolo, MultipartFile arquivo) throws NegocioException;
	Resource recuperarArquivo(Long idProtocolo, String nomeArquivo) throws NegocioException;
	ProtocoloSimplesDTO pesquisarPorProtocoloPrestador(String protocolo) throws NegocioException;
	void excluirProtocoloAdicional(Long idProtocolo) throws NegocioException;
	ProtocoloSimplesDTO pesquisarPorProtocoloAdicional(String protocolo, String cnpjAgencia) throws NegocioException;

}


// Fim do arquivo: ProtocoloPrestadorService.java

// Arquivo: ProtocoloPrestadorServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloPrestadorServiceImpl.java

package br.gov.ana.sarsb.service;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.prestador.ContratoMunicipioDTO;
import br.gov.ana.sarsb.model.dto.prestador.ContratoPrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.DocumentoPrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.PrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloAdicionalDTO;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloPrestadorDTO;
import br.gov.ana.sarsb.model.dto.prestador.ProtocoloSimplesDTO;
import br.gov.ana.sarsb.model.entity.ContratoMunicipio;
import br.gov.ana.sarsb.model.entity.DocumentoPrestador;
import br.gov.ana.sarsb.model.entity.FormularioCefPrestador;
import br.gov.ana.sarsb.model.entity.MunicipioServico;
import br.gov.ana.sarsb.model.entity.Prestador;
import br.gov.ana.sarsb.model.entity.ProtocoloAdicional;
import br.gov.ana.sarsb.model.entity.ProtocoloCefPrestador;
import br.gov.ana.sarsb.model.entity.TipoDocumentoPrestador;
import br.gov.ana.sarsb.repository.ContratoMunicipioPrestadorRepository;
import br.gov.ana.sarsb.repository.ProtocoloAdicionalRepository;
import br.gov.ana.sarsb.repository.ProtocoloCefPrestadorRepository;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;

@Transactional
@Service
public class ProtocoloPrestadorServiceImpl implements ProtocoloPrestadorService {
	
	private static final String PATH_PRESTADOR = "PRESTADOR/";
	private static final String PATH_ADICIONAL = "ADICIONAL/";
	private ConfigCache cc = ConfigCache.getInstance();
	
	@Autowired
	private ProtocoloCefPrestadorRepository protocoloCefPrestadorRepository;
	
	@Autowired
	private ContratoMunicipioPrestadorRepository contratoMunicipioPrestadorRepository;
	
	@Autowired
	private ProtocoloAdicionalRepository protocoloAdicionalRepository;
	
	@Autowired
	private MunicipioService municipioService;
	
	@Autowired
	private AgenciaReguladoraService agenciaReguladoraService;
	
	@Autowired
	private PrestadorService prestadorService;
	
	@Autowired
	private FileStorageService fileStorageService;
	
	@Override
	public List<ProtocoloSimplesDTO> carregarListaProtocoloPrestador(String cnpj) throws NegocioException {
		List<ProtocoloSimplesDTO> listaProtocoloPrestador = protocoloCefPrestadorRepository.listarProtocolosPorAgenciaReguladora(cnpj)
				.stream().map(p -> new ProtocoloSimplesDTO().criarProtocoloSimplesDTO(p)).collect(Collectors.toList());
		List<ProtocoloSimplesDTO> listaProtocoloAdicional = protocoloAdicionalRepository.listarProtocolosPorAgenciaReguladora(cnpj)
				.stream().map(p -> new ProtocoloSimplesDTO().criarProtocoloSimplesDTO(p)).collect(Collectors.toList());
		
		listaProtocoloPrestador.addAll(listaProtocoloAdicional);
		return listaProtocoloPrestador.stream().distinct().collect(Collectors.toList());
	}

	@Override
	public ProtocoloPrestadorDTO consultarPorProtocolo(String protocolo) throws NegocioException {
		try {
			List<ContratoMunicipio> listaContrato = contratoMunicipioPrestadorRepository.pesquisarPorNumeroProtocoloCefPrestador(protocolo);
			
			if(!listaContrato.isEmpty()) {
				ProtocoloPrestadorDTO protocoloPrestadorDTO = new ProtocoloPrestadorDTO();
				protocoloPrestadorDTO.setListaDemonstracoesContabeis(new ArrayList<>());
				protocoloPrestadorDTO.setListaDemonstrativoCalculo(new ArrayList<>());
				protocoloPrestadorDTO.setListaLaudoDemonstrativo(new ArrayList<>());
				protocoloPrestadorDTO.setListaPlanoCaptacao(new ArrayList<>());
				protocoloPrestadorDTO.setListaLaudoAdequacao(new ArrayList<>());
				protocoloPrestadorDTO.setListaEstudoViabilidade(new ArrayList<>());
				protocoloPrestadorDTO.setListaDocumentoComplementar(new ArrayList<>());
				
				FormularioCefPrestador formularioCefPrestador = listaContrato.get(0).getContratoProtolocoCef()
						.getProtocoloCefPrestador().getFormularioCefPrestador();
				
				PrestadorDTO prestadorDTO = new PrestadorDTO();
				BeanUtils.copyProperties(formularioCefPrestador.getPrestador(), prestadorDTO);
				prestadorDTO.setComprovanteEnvio(formularioCefPrestador.getNumeroRecibo());
				prestadorDTO.setDataEnvio(formularioCefPrestador.getDataEnvio());

				List<ContratoPrestadorDTO> listaContratosDTO = new ArrayList<>();
				listaContrato.forEach(c -> {
					ContratoPrestadorDTO dto = new ContratoPrestadorDTO();
					BeanUtils.copyProperties(c.getContratoProtolocoCef(), dto);
					
					dto.setExisteArquivoDeclaracaoAnuencia(StringUtils.isNotBlank(dto.getArquivoDeclaracaoAnuencia()));
					dto.setExisteArquivoMinutaContrato(StringUtils.isNotBlank(dto.getArquivoMinutaContrato()));
					
					Municipio mun = municipioService.pesquisarMunicipioPorIBGE(c.getCodigoIbge());
					if(mun != null) {
						dto.setMunicipioUf(mun.getNome() + "/" + mun.getSiglaUF());
					}
					
					dto.setServicoAgua(c.getServicoAgua());
					dto.setServicoEsgoto(c.getServicoEsgoto());
					
					List<DocumentoPrestador> listaDocumentos = c.getContratoProtolocoCef().getProtocoloCefPrestador().getFormularioCefPrestador().getListaDocumentos();
					if(!listaDocumentos.isEmpty()) {
						protocoloPrestadorDTO.getListaDemonstracoesContabeis().addAll(listaDocumentos.stream()
								.filter(a -> a.getTipoDocumentoPrestador().equals(TipoDocumentoPrestador.DEMONSTRACOES_CONTABEIS))
								.map(this::toDocumentoPrestadorDTO).collect(Collectors.toList()));
						
						protocoloPrestadorDTO.getListaDemonstrativoCalculo().addAll(listaDocumentos.stream()
								.filter(a -> a.getTipoDocumentoPrestador().equals(TipoDocumentoPrestador.DEMONSTRATIVO_CALCULO))
								.map(this::toDocumentoPrestadorDTO).collect(Collectors.toList()));
						
						protocoloPrestadorDTO.getListaLaudoDemonstrativo().addAll(listaDocumentos.stream()
								.filter(a -> a.getTipoDocumentoPrestador().equals(TipoDocumentoPrestador.LAUDO_DEMONSTRATIVO))
								.map(this::toDocumentoPrestadorDTO).collect(Collectors.toList()));
						
						protocoloPrestadorDTO.getListaPlanoCaptacao().addAll(listaDocumentos.stream()
								.filter(a -> a.getTipoDocumentoPrestador().equals(TipoDocumentoPrestador.PLANO_CAPTACAO))
								.map(this::toDocumentoPrestadorDTO).collect(Collectors.toList()));
						
						protocoloPrestadorDTO.getListaLaudoAdequacao().addAll(listaDocumentos.stream()
								.filter(a -> a.getTipoDocumentoPrestador().equals(TipoDocumentoPrestador.LAUDO_ADEQUACAO))
								.map(this::toDocumentoPrestadorDTO).collect(Collectors.toList()));
						
						protocoloPrestadorDTO.getListaEstudoViabilidade().addAll(listaDocumentos.stream()
								.filter(a -> a.getTipoDocumentoPrestador().equals(TipoDocumentoPrestador.ESTUDO_VIABILIDADE))
								.map(this::toDocumentoPrestadorDTO).collect(Collectors.toList()));
						
						protocoloPrestadorDTO.getListaDocumentoComplementar().addAll(listaDocumentos.stream()
								.filter(a -> a.getTipoDocumentoPrestador().equals(TipoDocumentoPrestador.DOCUMENTO_COMPLEMENTAR))
								.map(this::toDocumentoPrestadorDTO).collect(Collectors.toList()));
					}
					
					listaContratosDTO.add(dto);
					
				});

				protocoloPrestadorDTO.setPrestador(prestadorDTO);
				protocoloPrestadorDTO.setListaContratos(listaContratosDTO);
				
				return protocoloPrestadorDTO;
			} else {
				throw new NegocioException("Protocolo não encontrado!");
			}	
		} catch (Exception e) {
			throw new NegocioException(e);
		}
	}
	
	private DocumentoPrestadorDTO toDocumentoPrestadorDTO(DocumentoPrestador d) {
		return DocumentoPrestadorDTO.builder()
				.id(d.getId())
				.arquivo(d.getArquivo())
				.tipoDocumentoPrestador(d.getTipoDocumentoPrestador())
				.build();
	}

	@Override
	public Long criarProtocoloAdicional(ProtocoloAdicionalDTO protocoloAdicionalDTO) throws NegocioException {
		try {
			Optional<ProtocoloAdicional> protocoloOptional = protocoloAdicionalRepository
					.pesquisarPorAgenciaEPrestador(protocoloAdicionalDTO.getProtocolo(), 
							protocoloAdicionalDTO.getCnpjAgenciaReguladora(), protocoloAdicionalDTO.getCnpj());
			if(!protocoloOptional.isPresent()) {
				ProtocoloAdicional protocoloSalvar = new ProtocoloAdicional();
				BeanUtils.copyProperties(protocoloAdicionalDTO, protocoloSalvar);
				protocoloSalvar.setAgenciaReguladora(agenciaReguladoraService.carregarAgenciaReguladora(protocoloAdicionalDTO.getCnpjAgenciaReguladora()));
				
				Optional<Prestador> prestadorOptional = prestadorService.pesquisarPorCnpj(protocoloAdicionalDTO.getCnpj());
				if(prestadorOptional.isPresent()) {
					protocoloSalvar.setPrestador(prestadorOptional.get());
				} else {
					Prestador prestador = Prestador.builder()
							.cnpj(protocoloAdicionalDTO.getCnpj())
							.nomeRazaoSocial(protocoloAdicionalDTO.getNome())

							.build();
					prestadorService.criarPrestador(prestador);
					protocoloSalvar.setPrestador(prestador);
				}
				
				protocoloSalvar.setListaServico(new ArrayList<>());
				protocoloAdicionalDTO.getListaServico().forEach(s -> {
					MunicipioServico m = MunicipioServico.builder()
							.id(s.getId())
							.codigoIbge(s.getCodigoIbge())
							.protocoloAdicional(protocoloSalvar)
							.servicoAgua(s.getServicoAgua())
							.servicoEsgoto(s.getServicoEsgoto())
							.municipioRestricao(s.getMunicipioRestricao())
							.build();
					protocoloSalvar.getListaServico().add(m);
				});
				
				protocoloAdicionalRepository.save(protocoloSalvar);
				return protocoloSalvar.getId();
			} else {
				throw new NegocioException("protocoloJaExiste");
			}	 			
		} catch (Exception e) {
			throw new NegocioException(e.getMessage());
		}		
	}
	
	@Override
	public void salvarArquivoProtocoloAdicional(Long idProtocolo, MultipartFile arquivo) throws NegocioException {
		Optional<ProtocoloAdicional> protocoloOptional = protocoloAdicionalRepository.findById(idProtocolo);
		try {
			fileStorageService.save(arquivo, montarCaminhoArquivoProtocoloAdicional(protocoloOptional));
		} catch (NegocioException | IOException e) {
			throw new NegocioException("Erro ao salvar arquivo protocolo adicional", e);
		}
	}
	
	private Path montarCaminhoArquivoProtocoloAdicional(Optional<ProtocoloAdicional> protocoloOptional) throws NegocioException {
		if(protocoloOptional.isPresent()) {
			return Paths.get(cc.get("app.volume") + PATH_PRESTADOR + PATH_ADICIONAL + protocoloOptional.get().getPrestador().getCnpj() + "/" + protocoloOptional.get().getProtocolo());			
		} else {
			throw new NegocioException("Não foi encontrado protocolo para id informado!");
		}
	}
	
	private Path montarCaminhoArquivo() throws NegocioException {
		return Paths.get(cc.get("app.volume") + PATH_PRESTADOR);
	}
	
	@Override
	public Resource recuperarArquivo(Long idProtocolo, String nomeArquivo) throws NegocioException {
		Optional<ProtocoloAdicional> protocoloOptional = protocoloAdicionalRepository.findById(idProtocolo);
		try {
			return fileStorageService.load(nomeArquivo, protocoloOptional.isPresent() ? montarCaminhoArquivoProtocoloAdicional(protocoloOptional) : montarCaminhoArquivo());
		} catch (NegocioException | IOException e) {
			throw new NegocioException("Erro ao recuperar arquivo", e);
		}
	}

	@Override
	public ProtocoloAdicionalDTO consultarPorProtocoloAdicional(String protocolo, String cnpjAgencia, String cnpjPrestador) throws NegocioException {
		Optional<ProtocoloAdicional> protocoloOptional = protocoloAdicionalRepository
				.pesquisarPorAgenciaEPrestador(protocolo, cnpjAgencia, cnpjPrestador);
		ProtocoloAdicionalDTO protocoloAdicionalDTO = new ProtocoloAdicionalDTO();
		if(protocoloOptional.isPresent()) {
			ProtocoloAdicional protocoloSalvo = protocoloOptional.get();
			BeanUtils.copyProperties(protocoloSalvo, protocoloAdicionalDTO);
			
			protocoloAdicionalDTO.setCnpj(protocoloSalvo.getPrestador().getCnpj());
			protocoloAdicionalDTO.setNome(protocoloSalvo.getPrestador().getNomeRazaoSocial());
			protocoloAdicionalDTO.setCnpjAgenciaReguladora(protocoloSalvo.getAgenciaReguladora().getCnpj());
			
			protocoloAdicionalDTO.setListaServico(new ArrayList<>());
			protocoloSalvo.getListaServico().forEach(s -> {
				Municipio mun = municipioService.pesquisarMunicipioPorIBGE(s.getCodigoIbge());			
				ContratoMunicipioDTO m = ContratoMunicipioDTO.builder()
						.id(s.getId())
						.codigoIbge(s.getCodigoIbge())
						.servicoAgua(s.getServicoAgua())
						.servicoEsgoto(s.getServicoEsgoto())
						.municipioUf(mun != null ? mun.getNome() + "/" + mun.getSiglaUF() : "")
						.build();
				protocoloAdicionalDTO.getListaServico().add(m);
			});
			
			return protocoloAdicionalDTO;
		} else {
			throw new NegocioException("Protocolo não encontrado!");
		}
	}

	@Override
	public ProtocoloSimplesDTO pesquisarPorProtocoloPrestador(String protocolo) throws NegocioException {
		Optional<ProtocoloCefPrestador> protocoloOptional =  protocoloCefPrestadorRepository.findByNumeroProtocolo(protocolo);
		if(protocoloOptional.isPresent()) {
			return new ProtocoloSimplesDTO().criarProtocoloSimplesDTO(protocoloOptional.get());
		} 
		return null;
	}
	
	@Override
	public ProtocoloSimplesDTO pesquisarPorProtocoloAdicional(String protocolo, String cnpjAgencia) throws NegocioException {
		Optional<ProtocoloAdicional> protocoloAdicionalOptional = protocoloAdicionalRepository
				.pesquisarPorAgencia(protocolo, cnpjAgencia);
		if (protocoloAdicionalOptional.isPresent()) {
			return new ProtocoloSimplesDTO().criarProtocoloSimplesDTO(protocoloAdicionalOptional.get());
		}
		return null;
	}

	@Override
	public void excluirProtocoloAdicional(Long idProtocolo) throws NegocioException {
		try {			
			protocoloAdicionalRepository.deleteById(idProtocolo);
		} catch (Exception e) {
			throw new NegocioException("erroAoExcluirProtocoloAdicional", e);
		}
	}

}


// Fim do arquivo: ProtocoloPrestadorServiceImpl.java

// Arquivo: ProtocoloRegulacaoTarifariaService.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloRegulacaoTarifariaService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.aditivo.*;
import br.gov.ana.sarsb.model.entity.ProtocoloRegulacaoTarifaria;
import br.gov.ana.sarsb.repository.ProtocoloRegulacaoTarifariaRepository;
import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.List;

public interface ProtocoloRegulacaoTarifariaService {

	List<ProtocoloRegulacaoTarifaria> buscar(Long numProtocolo);
	void salvar(List<ProtocoloRegulacaoTarifaria> protocoloRegulacaoTarifaria);

	List<ProtocoloRegulacaoTarifaria> buscarPorIdRegulacaoTarifaria(List<Long> idRegulacaoTarifa);

	void deletarProtocoloRegulacaoTarifaria(List<Long> idProtocoloRegulacaoTarifaria);


}


// Fim do arquivo: ProtocoloRegulacaoTarifariaService.java

// Arquivo: ProtocoloRegulacaoTarifariaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloRegulacaoTarifariaServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ProtocoloRegulacaoTarifaria;
import br.gov.ana.sarsb.repository.ProtocoloRegulacaoTarifariaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Transactional
@Service
public class ProtocoloRegulacaoTarifariaServiceImpl implements ProtocoloRegulacaoTarifariaService {

	@Autowired
	ProtocoloRegulacaoTarifariaRepository protocoloRegulacaoTarifariaRepository;

	@Override
	public List<ProtocoloRegulacaoTarifaria> buscar(Long numProtocolo) {
		return protocoloRegulacaoTarifariaRepository.findByProtocoloId(numProtocolo);
	}

	@Override
	public void salvar(List<ProtocoloRegulacaoTarifaria> protocoloRegulacaoTarifaria) {
		protocoloRegulacaoTarifariaRepository.saveAll(protocoloRegulacaoTarifaria);
	}

	@Override
	public List<ProtocoloRegulacaoTarifaria> buscarPorIdRegulacaoTarifaria(List<Long> idRegulacaoTarifa) {
		return protocoloRegulacaoTarifariaRepository.findByRegulacaoTarifariaIdIn(idRegulacaoTarifa);
	}

	@Override
	public void deletarProtocoloRegulacaoTarifaria(List<Long> idProtocoloRegulacaoTarifaria) {
		protocoloRegulacaoTarifariaRepository.deleteAllById(idProtocoloRegulacaoTarifaria);
	}
}


// Fim do arquivo: ProtocoloRegulacaoTarifariaServiceImpl.java

// Arquivo: ProtocoloRequisitoComplementarService.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloRequisitoComplementarService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ProtocoloRequisitoComplementar;
import br.gov.ana.sarsb.model.entity.RequisitoComplementar;

import java.util.List;

public interface ProtocoloRequisitoComplementarService {

    List<ProtocoloRequisitoComplementar> buscar(Long numProtocolo);

    void salvar(List<ProtocoloRequisitoComplementar> protocoloRequisitoComplementar);

    List<ProtocoloRequisitoComplementar> buscarPorIdRequisitoComplementar(List<Long> idRequisitoComplementar);

    void deletarProtocoloRequisitoComplementar(List<Long> idProtocoloRequisitoComplementar);

    ProtocoloRequisitoComplementar buscarPorId(Long id);

    List<ProtocoloRequisitoComplementar> buscarTodos();

    ProtocoloRequisitoComplementar buscarPorRequisitoComplementar(RequisitoComplementar requisitoComplementar);


}

// Fim do arquivo: ProtocoloRequisitoComplementarService.java

// Arquivo: ProtocoloRequisitoComplementarServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloRequisitoComplementarServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.entity.ProtocoloRequisitoComplementar;
import br.gov.ana.sarsb.model.entity.RequisitoComplementar;
import br.gov.ana.sarsb.repository.ProtocoloRequisitoComplementarRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Transactional
@Service
public class ProtocoloRequisitoComplementarServiceImpl implements ProtocoloRequisitoComplementarService {

    private final ProtocoloRequisitoComplementarRepository protocoloRequisitoComplementarRepository;

    public ProtocoloRequisitoComplementarServiceImpl(
            ProtocoloRequisitoComplementarRepository protocoloRequisitoComplementarRepository) {
        this.protocoloRequisitoComplementarRepository = protocoloRequisitoComplementarRepository;
    }

    @Override
    public List<ProtocoloRequisitoComplementar> buscar(Long numProtocolo) {
        return protocoloRequisitoComplementarRepository.findByProtocoloId(numProtocolo);
    }

    @Override
    public void salvar(List<ProtocoloRequisitoComplementar> protocolRequisitoComplementar) {
        protocoloRequisitoComplementarRepository.saveAll(protocolRequisitoComplementar);
    }

    @Override
    public List<ProtocoloRequisitoComplementar> buscarPorIdRequisitoComplementar(List<Long> idsRequisitosComplementar) {
        return protocoloRequisitoComplementarRepository.findByRequisitoComplementarIdIn(idsRequisitosComplementar);
    }

    @Override
    public void deletarProtocoloRequisitoComplementar(List<Long> idProtocoloRequisitoComplementar) {
        protocoloRequisitoComplementarRepository.deleteAllById(idProtocoloRequisitoComplementar);
    }

    @Override
    public ProtocoloRequisitoComplementar buscarPorId(Long id) {
        return protocoloRequisitoComplementarRepository.findById(id).get();
    }

    @Override
    public List<ProtocoloRequisitoComplementar> buscarTodos() {
        return protocoloRequisitoComplementarRepository.findAll();
    }

    public ProtocoloRequisitoComplementar buscarPorRequisitoComplementar(RequisitoComplementar requisitoComplementar) {
        return protocoloRequisitoComplementarRepository.findByRequisitoComplementarId(requisitoComplementar.getId());
    }
}

// Fim do arquivo: ProtocoloRequisitoComplementarServiceImpl.java

// Arquivo: ProtocoloService.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeEntidadeServicosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ProtocoloConformidadeDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ProtocolosMatrizRiscosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.ProtocoloRequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.ProtocoloRegulacaoTarifariaDTO;
import br.gov.ana.sarsb.model.entity.Protocolo;
import br.gov.ana.sarsb.model.entity.ProtocoloConformidade;
import br.gov.ana.sarsb.model.entity.ProtocoloRequisitoComplementar;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

public interface ProtocoloService {

    void criarProtocolo(Protocolo protocolo) throws NegocioException;

    Protocolo gerarNumeroProtocolo(Protocolo protocolo);

    Optional<Protocolo> buscarPorNumeroProtocolo(Long nuProtocolo);

    List<ProtocolosMatrizRiscosDTO> buscarProtocolosPorIdAgr(Long id);

    Protocolo atualizarProtocolo(Protocolo protocolo) throws NegocioException;

    List<ProtocoloConformidadeDTO> buscarProtocolosCondicoesGeraisPorIDAgr(Long id);

    List<ProtocoloRegulacaoTarifariaDTO> buscarRegulacaoTaricarPorNorma(Long idAgenciaReguladora);

    List<ProtocoloRequisitoComplementarDTO> buscarProtocoloRequisitoComplementar(Long id) throws IOException;

}


// Fim do arquivo: ProtocoloService.java

// Arquivo: ProtocoloServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\ProtocoloServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ConformidadeServicoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.condicoesgerais.ProtocoloConformidadeDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contratomatrizrisco.ProtocolosMatrizRiscosDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.metasuniversalizacao.ProtocoloRequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.ProtocoloRegulacaoTarifariaDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.ConformidadeEntidadeRepository;
import br.gov.ana.sarsb.repository.ConformidadeServicoRepository;
import br.gov.ana.sarsb.repository.ProtocoloRepository;
import br.gov.ana.sarsb.util.ProtocoloUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class ProtocoloServiceImpl implements ProtocoloService {

    @Autowired
    ProtocoloRepository protocoloRepository;

    @Autowired
    ProtocoloAtoNormativoService protocoloAtoNormativoService;


    @Autowired
    private ProtocoloConformidadeService protocoloConformidadeService;


    @Autowired
    private ConformidadeServicoService conformidadeServicoService;

    @Autowired
    private ProtocoloRegulacaoTarifariaService protocoloRegulacaoTarifariaService;


    @Autowired
    private ProtocoloRequisitoComplementarService protocoloRequisitoComplementarService;
    @Override
    public void criarProtocolo(Protocolo protocolo) throws NegocioException {
        try {
            protocoloRepository.save(protocolo);
        } catch (Exception e) {
            throw new NegocioException("Erro ao salvar prestador", e);
        }
    }

    public Protocolo gerarNumeroProtocolo(Protocolo protocolo) {
        String numeroProtocolo = ProtocoloUtil.gerarProtocolo(protocolo.getId(), protocolo.getAnoReferencia());
        protocolo.setNumeroProtocolo(numeroProtocolo);

        return protocoloRepository.save(protocolo);
    }

    public List<ProtocolosMatrizRiscosDTO> buscarProtocolosPorIdAgr(Long idAgr) {

        List<Protocolo> protocolos = new ArrayList<>();

        List<ProtocoloAtoNormativo> protocoloAtoNormativo = new ArrayList<>(protocoloAtoNormativoService.buscarPorEri(idAgr).stream()
                .collect(Collectors.groupingBy(
                        p -> p.getProtocolo().getAnoReferencia(), // Agrupa pelo ano de referência
                        Collectors.collectingAndThen(
                                Collectors.maxBy(Comparator.comparing(p -> p.getProtocolo().getDataEnvio())), // Pega o Protocolo com a data de envio mais recente
                                Optional::get
                        )
                ))
                .values());


        Map<Long, ProtocoloAtoNormativo> atoNormativoMap = protocoloAtoNormativo.stream()
                .collect(Collectors.toMap(
                        p -> p.getProtocolo().getAnoReferencia(),
                        p -> p
                ));



        List<ProtocolosMatrizRiscosDTO> list = new ArrayList<>();

        atoNormativoMap.forEach((ano, atoNormativo) -> {
            ProtocolosMatrizRiscosDTO dto = new ProtocolosMatrizRiscosDTO();
            dto.setAnoReferencia(ano);
            dto.setProtocoloAtoNormativo(atoNormativo.getProtocolo().getNumeroProtocolo());
            dto.setDataRegistroAtoNormativo(atoNormativo.getProtocolo().getDataEnvio());
            dto.setIdProtocoloAtoNormativo(converterStringParaNumeroInteiro(atoNormativo.getProtocolo().getNumeroProtocolo()));

            list.add(dto);
        });

        return list;


    }

    public List<ProtocoloConformidadeDTO> buscarProtocolosCondicoesGeraisPorIDAgr(Long idAgr) {

        List<ProtocoloConformidade> protocoloConformidades = buscarProtocoloConformidade(idAgr);
        List<ConformidadeServico> protocoloConfomidadesServicoDTOS = buscarProtocoloConformidadeContratos(idAgr);

        Map<Long, ProtocoloConformidade> conformidadeMap = protocoloConformidades.stream()
                .collect(Collectors.toMap(
                        p -> p.getProtocolo().getAnoReferencia(),
                        p -> p
                ));


        Map<Long, ConformidadeServico> conformidadeServicoMap = protocoloConfomidadesServicoDTOS.stream()
                .collect(Collectors.toMap(
                        p -> p.getAnoColeta(),
                        p -> p
                ));

        List<ProtocoloConformidadeDTO> list = new ArrayList<>();
        conformidadeMap.forEach((ano, conformidade) -> {
            ConformidadeServico contrato = conformidadeServicoMap.get(ano);
            ProtocoloConformidadeDTO dto = new ProtocoloConformidadeDTO();
            dto.setAnoReferencia(ano);
            dto.setProtocoloConformidade(conformidade.getProtocolo().getNumeroProtocolo());
            dto.setDataRegistroConformidade(conformidade.getProtocolo().getDataEnvio());
            dto.setIdProtocoloConformidade(converterStringParaNumeroInteiro(conformidade.getProtocolo().getNumeroProtocolo()));
            dto.setId(conformidade.getConformidadeEntidade().getId());
            if (contrato != null) {
                dto.setProcoloContrato("00" + contrato.getId() + "/" + contrato.getAnoColeta());
                dto.setDataRegistroContrato(LocalDateTime.ofInstant(contrato.getDataRegistro().toInstant(), ZoneId.systemDefault()));
                dto.setAnoReferencia(contrato.getAnoColeta());
                dto.setIdAgr(idAgr);
                dto.setDataFinalizacao(contrato.getDataFinalizacao() != null);
            }

            list.add(dto);
        });


        conformidadeServicoMap.forEach((ano, contrato) -> {
            if (!conformidadeMap.containsKey(ano)) {
                ProtocoloConformidadeDTO dto = new ProtocoloConformidadeDTO();
                dto.setIdAgr(idAgr);
                dto.setAnoReferencia(ano);
                dto.setProcoloContrato("00" + contrato.getId() + "/" + contrato.getAnoColeta());
                dto.setDataRegistroContrato(LocalDateTime.ofInstant(contrato.getDataRegistro().toInstant(), ZoneId.systemDefault()));
                list.add(dto);
            }
        });


        return list;
    }

    public Optional<Protocolo> buscarPorNumeroProtocolo(Long nuProtocolo) {
        return protocoloRepository.findById(nuProtocolo);
    }


    public Protocolo atualizarProtocolo(Protocolo protocolo) throws NegocioException {
        try {
            return protocoloRepository.saveAndFlush(protocolo);
        } catch (Exception e) {
            throw new NegocioException("Erro ao salvar prestador", e);
        }
    }

    public static Long converterStringParaNumeroInteiro(String numeroFormatado) {
        // Divide a string no caractere '/'
        String[] partes = numeroFormatado.split("/");
        // Pega a primeira parte e converte para inteiro
        return Long.parseLong(partes[0]);
    }


    private List<ProtocoloConformidade> buscarProtocoloConformidade(Long idAgr) {

        List<ProtocoloConformidade> protocoloConformidade = new ArrayList<>(protocoloConformidadeService.buscarConformidadePorIdAgr(idAgr).stream()
                .collect(Collectors.groupingBy(
                        p -> p.getProtocolo().getAnoReferencia(), // Agrupa pelo ano de referência
                        Collectors.collectingAndThen(
                                Collectors.maxBy(Comparator.comparing(p -> p.getProtocolo().getDataEnvio())), // Pega o Protocolo com a data de envio mais recente
                                Optional::get
                        )
                ))
                .values());

        return protocoloConformidade;

    }

    private List<ConformidadeServico> buscarProtocoloConformidadeContratos(Long idAgr) {

        List<ConformidadeServico> protocoloConformidadeServicoDTOS = new ArrayList<>(
                conformidadeServicoService.buscarProtocoloContratos(idAgr).stream()
                        .filter(p -> p.getDataFinalizacao() != null)  // Filtra os que têm DataFinalizacao nulo
                        .collect(Collectors.groupingBy(
                                p -> p.getAnoColeta(),  // Agrupa pelo ano de coleta
                                Collectors.collectingAndThen(
                                        Collectors.maxBy(Comparator.comparing(ConformidadeServico::getDataFinalizacao)),  // Protocolo com a data de finalização mais recente
                                        Optional::get  // Se o Optional não estiver vazio, retorna o valor
                                )
                        ))
                        .values()  // Pega todos os valores do Map (lista dos mais recentes)
        );


        return protocoloConformidadeServicoDTOS;
    }

    @Override
    public List<ProtocoloRegulacaoTarifariaDTO> buscarRegulacaoTaricarPorNorma(Long idAgenciaReguladora) {
        long normas = 3l;
        List<ProtocoloRegulacaoTarifariaDTO> protocoloRegulacaoTarifariaDTOS = new ArrayList<>();
        List<Protocolo> protocoloList = new ArrayList<>(protocoloRepository.findByNormasDeRefrencia_IdAndEntidadeReguladoraId(normas, idAgenciaReguladora)
                .stream()
                .filter(p -> p.getProtocoloRegulacaoTarifarias().size() > 0) // Filtra os protocolos com protocoloregulacaoTarifariao > 0
                .collect(Collectors.groupingBy(
                        p -> p.getAnoReferencia(), // Agrupa pelo ano de referência
                        Collectors.collectingAndThen(
                                Collectors.maxBy(Comparator.comparing(p -> p.getDataEnvio())), // Pega o Protocolo com a data de envio mais recente
                                Optional::get
                        )
                ))
                .values());
        protocoloList.forEach(protocolo -> {
            protocoloRegulacaoTarifariaDTOS.add(new ProtocoloRegulacaoTarifariaDTO(protocolo));

        });
        return protocoloRegulacaoTarifariaDTOS;
    }

    @Override
    public List<ProtocoloRequisitoComplementarDTO> buscarProtocoloRequisitoComplementar(Long id) throws IOException {
        return protocoloRequisitoComplementarService.buscarTodos().stream()
                .filter(requisito -> {
                    RequisitoComplementar rc = requisito.getRequisitoComplementar();
                    return rc != null &&
                            rc.getAgenciaReguladora() != null &&
                            rc.getAgenciaReguladora().getId().equals(id);
                })
                .map(requisito -> new ProtocoloRequisitoComplementarDTO(
                        requisito.getId(),
                        requisito.getProtocolo(),
                        new RequisitoComplementarDTO(requisito.getRequisitoComplementar()) // ✅ usa o novo construtor
                ))
                .collect(Collectors.toList());
    }


}


// Fim do arquivo: ProtocoloServiceImpl.java

// Arquivo: RascunhoCadastroService.java
// Caminho: \br\gov\ana\sarsb\service\RascunhoCadastroService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;
import br.gov.ana.sarsb.model.entity.RascunhoCadastro;
import br.gov.ana.sarsb.model.entity.TipoFormulario;

public interface RascunhoCadastroService {
	
	void salvarRascunho(FormularioDTO formularioDTO) throws NegocioException;
	RascunhoCadastro recuperarRascunho(String cnpj, TipoFormulario tipoFormulario) throws NegocioException;
	void deletarRascunho(Long idRascunho) throws NegocioException;
	
}


// Fim do arquivo: RascunhoCadastroService.java

// Arquivo: RascunhoCadastroServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\RascunhoCadastroServiceImpl.java

package br.gov.ana.sarsb.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.formulario.FormularioDTO;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import br.gov.ana.sarsb.model.entity.RascunhoCadastro;
import br.gov.ana.sarsb.model.entity.TipoFormulario;
import br.gov.ana.sarsb.repository.RascunhoCadastroRepository;

@Service
public class RascunhoCadastroServiceImpl implements RascunhoCadastroService {
	
	@Autowired
	private RascunhoCadastroRepository rascunhoCadastroRepository;

	@Override
	public void salvarRascunho(FormularioDTO f) throws NegocioException {
		RascunhoCadastro rc = RascunhoCadastro.builder()
				.id(f.getId())
				.tipoFormulario(new TipoFormulario(f.getTipoFormulario().getId()))				
				.build();
		
		if(f.getTipoFormulario().getId().equals(TipoFormulario.FORMULARIO_SMRSU.getId())) {
			criarRascunhoFormularioSmrsu(rc, f);
		}
		rascunhoCadastroRepository.save(rc);
	}
	
	private void criarRascunhoFormularioSmrsu(RascunhoCadastro rc, FormularioDTO f) {
		try {
			rc.setPrefeitura(new Prefeitura(f.getFormularioSmrsuDTO().getPrefeitura().getId()));
			rc.setRascunho(new ObjectMapper().writeValueAsString(f.getFormularioSmrsuDTO()));
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
	}

	@Override
	public RascunhoCadastro recuperarRascunho(String cnpj, TipoFormulario tipoFormulario) throws NegocioException {
		Optional<RascunhoCadastro> rascunhoOptional = rascunhoCadastroRepository
				.findByCnpjAndTipoFormulario(cnpj, tipoFormulario.getId());
		return rascunhoOptional.isPresent() ? rascunhoOptional.get() : null;
	}

	@Override
	public void deletarRascunho(Long idRascunho) throws NegocioException {
		rascunhoCadastroRepository.deleteById(idRascunho);
	}
	
}


// Fim do arquivo: RascunhoCadastroServiceImpl.java

// Arquivo: RegulacaoTarifariaService.java
// Caminho: \br\gov\ana\sarsb\service\RegulacaoTarifariaService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaFiltroDTO;
import org.apache.poi.ss.usermodel.Workbook;

import java.io.File;
import java.util.List;

public interface RegulacaoTarifariaService {
	
	List<RegulacaoTarifariaDTO> buscarTodos(Long idagenciaReguladora);
	RegulacaoTarifariaDTO buscarRegulacaoTarifariaId(Long idRegulacaoTarifaria);
	List<RegulacaoTarifariaDTO> filtroContrato(RegulacaoTarifariaFiltroDTO regulacaoTarifariaFiltroDTO);

	void salvarRegulacaoTarifaria(RegulacaoTarifariaDTO regulacaoTarifariaDTO);

	void atualizarRegulacaoTarifaria(RegulacaoTarifariaDTO regulacaoTarifariaDTO);

	void deletar(Long id);

	Workbook gerarRelatorioXLS(Long idAgenciaReguladora, Long anoColeta);


	void finalizarPreenchimento(Long ano, Long idAgencia);

	void reabilitarPreenchimento(Long ano, Long idAgencia);

	List<Integer> buscarAnosDisponiveis();

	Boolean isContratoRepetido(Long anoColeta, Long idAgr, Long idContrato) ;

	File gerarReciboRegulacaoTarifaria(Long nuProtocolo);

}


// Fim do arquivo: RegulacaoTarifariaService.java

// Arquivo: RegulacaoTarifariaServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\RegulacaoTarifariaServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.contrato.ContratoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.parametrosNrs.ParametrosNRSDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.regulacaotarifaria.RegulacaoTarifariaFiltroDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.Contrato;
import br.gov.ana.sarsb.model.entity.MunicipioContrato;
import br.gov.ana.sarsb.model.entity.RegulacaoTarifaria;
import br.gov.ana.sarsb.repository.ContratoRespository;
import br.gov.ana.sarsb.repository.RegulacaoTarifariaRepository;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.*;
import br.gov.ana.sarsb.util.ConverterUtil;
import lombok.extern.log4j.Log4j2;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;
import java.io.File;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

@Log4j2
@Transactional
@Service
public class RegulacaoTarifariaServiceImpl implements RegulacaoTarifariaService {
    public static final long REGULACAO_TARIFARIA = 3l;

    @Autowired
    private RegulacaoTarifariaRepository regulacaoTarifariaRepository;

    @Autowired
    private MunicipioContratoService municipioContratoService;

    @Autowired
    private ContratoRespository contratoRespository;

    @Autowired
    private FinalizacaoRegulacaoTarifariaRepository finalizacaoRepository;

    @Autowired
    private AgenciaReguladoraRepository agenciaReguladoraRepository;

    @Autowired
    private ParametrosNRSService parametrosNRSService;

    @Autowired
    private NormasDeReferenciaService normasDeReferenciaService;

    @Autowired
    private ProtocoloService protocoloService;

    @Autowired
    private ProtocoloRegulacaoTarifariaService protocoloRegulacaoTarifariaService;

    @Autowired
    private GerarRelatorioService gerarRelatorioService;

    @Autowired
    private ContratoServicoAtividadeSelecionadaService contratoServicoAtividadeSelecionadaService;

    @Autowired
    private ContratoService contratoService;

    @Override
    public List<RegulacaoTarifariaDTO> buscarTodos(Long idAgenciaReguladora) {
        // Recupera as regulações tarifárias
        List<RegulacaoTarifaria> regulacaoTarifarias = regulacaoTarifariaRepository
                .findByRegulacaoTarifariaIdAgenciaReguladora(idAgenciaReguladora);

        // Recupera todos os município contratos relacionados
        Map<Long, List<MunicipioContrato>> contratosToMunicipiosMap = regulacaoTarifarias.stream()
                .map(regulacaoTarifaria -> regulacaoTarifaria.getContrato().getId())
                .filter(Objects::nonNull) // Certifica-se de que IDs nulos sejam descartados
                .distinct() // Remove duplicatas
                .collect(Collectors.toMap(
                        contratoId -> contratoId,
                        contratoId -> municipioContratoService.findAllByContratoId(contratoId)
                ));

        // Usando lambda para converter para DTO
        return regulacaoTarifarias.stream()
                .map(regulacao -> {
                    // Cria o DTO a partir da regulação tarifária
                    RegulacaoTarifariaDTO dto = new RegulacaoTarifariaDTO(regulacao);
                    dto.setIsNormaVencida(isNormaVencida(regulacao.getDataCadastro()));

                    // Associa os municípios correspondentes
                    List<MunicipioContrato> municipios = contratosToMunicipiosMap.getOrDefault(
                            regulacao.getContrato().getId(),
                            Collections.emptyList()
                    );
                    dto.setMunicipioContrato(municipios); // Supondo que o DTO tenha esse setter

                    return dto;
                })
                .collect(Collectors.toList());
    }

    @Override
    public RegulacaoTarifariaDTO buscarRegulacaoTarifariaId(Long idRegulacaoTarifaria) {
        RegulacaoTarifaria regulacaoTarifaria = regulacaoTarifariaRepository.buscarRegulacaoTarifariaId(idRegulacaoTarifaria);
        RegulacaoTarifariaDTO regulacaoTarifariaDTO = new RegulacaoTarifariaDTO(regulacaoTarifaria);
        return regulacaoTarifariaDTO;

    }

    @Override
    public List<RegulacaoTarifariaDTO> filtroContrato(RegulacaoTarifariaFiltroDTO regulacaoTarifariaFiltroDTO) {
        List<RegulacaoTarifaria> regulacaoTarifarias = regulacaoTarifariaRepository.findByRegulacaoTarifariaFiltro(regulacaoTarifariaFiltroDTO);

        return regulacaoTarifarias.stream()
                .map(regulacao -> {
                    // Cria o DTO a partir da regulação tarifária
                    RegulacaoTarifariaDTO dto = new RegulacaoTarifariaDTO(regulacao);
                    dto.setIsNormaVencida(isNormaVencida(regulacao.getDataCadastro()));
                    return dto;
                })
                .collect(Collectors.toList());

    }

    @Override
    public void salvarRegulacaoTarifaria(RegulacaoTarifariaDTO regulacaoTarifariaDTO) {
        Contrato contratoRegulado = contratoRespository.findById(regulacaoTarifariaDTO.getIdContrato()).orElseThrow(() -> new NegocioException("Contrato não encontrado para o ID: " + regulacaoTarifariaDTO.getIdContrato()));

        if(regulacaoTarifariaDTO.getIsReplica()){
            boolean algumContratoAtualizado;
            List<Contrato> listHistoricoContratos = contratoRespository.findAllByCodigoInterno(contratoRegulado.getCodigoInterno());
            listHistoricoContratos.removeIf(e -> e.getId().equals(contratoRegulado.getId()));

            if(listHistoricoContratos.size() >= 1){
                algumContratoAtualizado = listHistoricoContratos.stream()
                        .anyMatch(contrato -> !contratoRegulado.getDataAtualizacao().isAfter(contrato.getDataAtualizacao()));

                if (algumContratoAtualizado) {
                    throw new NegocioException("Não é possível importar o preenchimento para o próximo ano de coleta pois o contrato foi atualizado após o fornecimento dos últimos dados. É necessário cadastrar o modelo do inicio. ");
                }
            }

        }

        regulacaoTarifariaDTO.setContrato(contratoRegulado);
        regulacaoTarifariaDTO.setAgenciaReguladora(contratoRegulado.getAgenciaReguladora());

        validarExistenciaContratoRepetido(regulacaoTarifariaDTO.getAnoColeta(),
                contratoRegulado.getAgenciaReguladora().getId(),
                contratoRegulado.getId()
                );

        RegulacaoTarifaria regulacaoTarifaria = new RegulacaoTarifaria();
        regulacaoTarifaria = atualizarQuestionario(regulacaoTarifariaDTO);
        regulacaoTarifaria = verificarConformidade(regulacaoTarifaria, regulacaoTarifariaDTO);
        regulacaoTarifariaRepository.save(regulacaoTarifaria);

    }

    @Override
    public void atualizarRegulacaoTarifaria(RegulacaoTarifariaDTO regulacaoTarifariaDTO) {
        RegulacaoTarifaria regulacaoTarifaria = atualizarQuestionario(regulacaoTarifariaDTO);
        regulacaoTarifaria = verificarConformidade(regulacaoTarifaria, regulacaoTarifariaDTO);
        regulacaoTarifariaRepository.save(regulacaoTarifaria);
    }

    @Override
    public void deletar(Long idRegulacaoTarifaria) {
        regulacaoTarifariaRepository.deleteById(idRegulacaoTarifaria);
    }
    private RegulacaoTarifaria atualizarQuestionario(RegulacaoTarifariaDTO regulacaoTarifariaDTO) {

        RegulacaoTarifaria regulacaoTarifaria = new RegulacaoTarifaria();
        regulacaoTarifaria.setContrato(regulacaoTarifariaDTO.getContrato());
        regulacaoTarifaria.setAgenciaReguladora(regulacaoTarifariaDTO.getAgenciaReguladora());
        regulacaoTarifaria.setDataCadastro(regulacaoTarifariaDTO.getDataCadastro());
        regulacaoTarifaria.setDeclaro(regulacaoTarifariaDTO.getDeclaro());
        regulacaoTarifaria.setId(regulacaoTarifariaDTO.getId());
        regulacaoTarifaria.setAnoColeta(regulacaoTarifariaDTO.getAnoColeta());

        regulacaoTarifaria.setPergunta1(regulacaoTarifariaDTO.getPergunta1());
        regulacaoTarifaria.setPergunta2(regulacaoTarifariaDTO.getPergunta2());
        regulacaoTarifaria.setPergunta2_1(regulacaoTarifariaDTO.getPergunta2_1());
        regulacaoTarifaria.setPergunta3(regulacaoTarifariaDTO.getPergunta3());
        regulacaoTarifaria.setPergunta4(regulacaoTarifariaDTO.getPergunta4());
        regulacaoTarifaria.setPergunta5(regulacaoTarifariaDTO.getPergunta5());
        regulacaoTarifaria.setPergunta6(regulacaoTarifariaDTO.getPergunta6());
        regulacaoTarifaria.setPergunta7(regulacaoTarifariaDTO.getPergunta7());
        regulacaoTarifaria.setPergunta8(regulacaoTarifariaDTO.getPergunta8());
        regulacaoTarifaria.setPergunta9(regulacaoTarifariaDTO.getPergunta9());
        regulacaoTarifaria.setPergunta10(regulacaoTarifariaDTO.getPergunta10());
        regulacaoTarifaria.setPergunta11(regulacaoTarifariaDTO.getPergunta11());

        return regulacaoTarifaria;

    }

    public Workbook gerarRelatorioXLS(Long idAgenciaReguladora, Long anoColeta) {

        // Usar o repositório para obter os dados da planilha
        List<Object[]> dadosBancoList = contratoRespository.findDadosRelatorioComRegulacaoByAgencia(idAgenciaReguladora, anoColeta);

        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Relatório de Contratos");

        // Crie o cabeçalho
        Row headerRow = sheet.createRow(0);

        headerRow.createCell(0).setCellValue("Ano Coleta");
        headerRow.createCell(1).setCellValue("UF");
        headerRow.createCell(2).setCellValue("Municipio");
        headerRow.createCell(3).setCellValue("Identificação do Contrato");
        headerRow.createCell(4).setCellValue("Tipo de Prestação");
        headerRow.createCell(5).setCellValue("Prestador");
        headerRow.createCell(6).setCellValue("Abastecimento Água Potável");
        headerRow.createCell(7).setCellValue("Esgotamento Sanitário");
        headerRow.createCell(8).setCellValue("Limpeza Urbana");
        headerRow.createCell(9).setCellValue("Manejo de Resíduos Sólidos");
        headerRow.createCell(10).setCellValue("Drenagem e Manejo de Águas Pluviais e Urbanas");
        headerRow.createCell(11).setCellValue("Data da Assinatura do contrato");
        headerRow.createCell(12).setCellValue("Link do contrato na internet");
        headerRow.createCell(13).setCellValue("1) O contrato teve seu edital publicado após 1º de março de 2024?");
        headerRow.createCell(14).setCellValue("2) O contrato foi precedido de licitação com a tarifa modelada com base em projeto referencial");
        headerRow.createCell(15).setCellValue("2.1) O contrato decorreu de processo de desestatização por oferta secundária de ações de empresa ou sociedade de economia mista prestadora de serviço públicos de saneamento básico, substituindo algum contrato de programa ou de concessão?");
        headerRow.createCell(19).setCellValue("3) O contrato prevê que os investimentos vinculados aos bens reversíveis devem ser considerados integralmente amortizados ou depreciados até o término do prazo contratual? ");
        headerRow.createCell(20).setCellValue("4) O contrato determina qual será a tarifa ou as regras para sua definição? ");
        headerRow.createCell(21).setCellValue("5) O contrato determina os procedimentos para: (i) o reajuste tarifário; (ii) as revisões ordinárias; e (iii) as revisões extraordinárias?");
        headerRow.createCell(22).setCellValue("6) O contrato determina o reajustamento da tarifa observando-se intervalo mínimo de 12(doze) meses?");
        headerRow.createCell(23).setCellValue("7) O contrato prevê indicador de desempenho e qualidade que possibilite ajustes nos valores tarifários, com objetivo de avaliar o cumprimento de metas de expansão dos serviços, de redução de perdas na distribuição de água tratada e de qualidade na prestaç");
        headerRow.createCell(24).setCellValue("8) O contrato prevê os procedimentos e conteúdo das revisões ordinárias? ");
        headerRow.createCell(25).setCellValue("9) O contrato prevê a revisão extraordinária para fins de recomposição do equilíbrio econômico-financeira do contrato em face da materialização de riscos conforme previsto na matriz de riscos do contrato ou outras cláusulas contratuais? ");
        headerRow.createCell(26).setCellValue("10) O contrato possui matriz de alocação de riscos, indicando quais eventos constituem riscos suportados exclusivamente pelo poder concedente, quais eventos constituem riscos suportados exclusivamente pelo prestador, e quais riscos são compartilhados? ");
        headerRow.createCell(27).setCellValue("11 O contrato prevê metodologia para recomposição do equilíbrio econômico-financeiro, incluindo regras para definição da taxa de desconto na hipótese de adoção do fluxo de caixa marginal?\n ");



        int rowNum = 1; // Comece na segunda linha, pois a primeira linha é o cabeçalho
        for (Object[] dados : dadosBancoList) {
            Row dataRow = sheet.createRow(rowNum++);
            int cellNum = 0;
            for (Object value : dados) {
                String cellValue = value != null ? value.toString() : "vazio"; // Tratar campos nulos como vazios
                dataRow.createCell(cellNum++).setCellValue(cellValue);
            }
        }

        return workbook;
    }

    public void finalizarPreenchimento(Long ano, Long idAgencia) {
        AgenciaReguladora agenciaReguladora = agenciaReguladoraRepository.findByIds(idAgencia).orElse(null);
        List<Long> regulacaoId = new ArrayList<>();

        boolean jaFinalizado = finalizacaoRepository.existsByAnoColetaAndAgenciaReguladora(ano, agenciaReguladora);
        if (jaFinalizado) {
            throw new IllegalStateException("Já existe uma finalização para o ano " + ano + " e a agência " + agenciaReguladora.getNome());
        }

        FinalizacaoRegulacaoTarifaria finalizacao = new FinalizacaoRegulacaoTarifaria();
        finalizacao.setAnoColeta(ano);
        finalizacao.setAgenciaReguladora(agenciaReguladora);
        finalizacao.setDataFinalizacao(LocalDateTime.now());
        finalizacaoRepository.save(finalizacao);


        List<RegulacaoTarifaria> regulacoes = regulacaoTarifariaRepository.findByAnoAndAgenciaId(ano, agenciaReguladora.getId());
        for (RegulacaoTarifaria regulacao : regulacoes) {
            regulacao.setFinalizacao(finalizacao);
            regulacaoId.add(regulacao.getId());
        }
        Protocolo protocolo = gerarNovoProtocolo(regulacoes.get(0).getAnoColeta(), regulacoes.get(0).getAgenciaReguladora(), REGULACAO_TARIFARIA );
        List<ProtocoloRegulacaoTarifaria> protocoloRegulacaoTarifarias = montarConteudoPraSalvar(regulacoes, protocolo);
        regulacaoTarifariaRepository.saveAll(regulacoes);
        protocoloRegulacaoTarifariaService.salvar(protocoloRegulacaoTarifarias);
    }

    public void reabilitarPreenchimento(Long ano, Long idAgencia) {
        AgenciaReguladora agenciaReguladora = agenciaReguladoraRepository.findByIds(idAgencia).orElse(null);
        List<Long> regulacaoTarifariaIds = new ArrayList<>();
        FinalizacaoRegulacaoTarifaria finalizacao = finalizacaoRepository
                .findByAnoColetaAndAgenciaReguladora(ano, agenciaReguladora)
                .orElseThrow(() -> new EntityNotFoundException("Finalização não encontrada para o ano e a agência especificados."));

        List<RegulacaoTarifaria> regulacoes = regulacaoTarifariaRepository.findByFinalizacao(finalizacao);

        for (RegulacaoTarifaria regulacao : regulacoes) {
            regulacao.setFinalizacao(null);
            regulacaoTarifariaIds.add(regulacao.getId());
        }

        List<ProtocoloRegulacaoTarifaria> protocoloRegulacaoTarifarias = protocoloRegulacaoTarifariaService.buscarPorIdRegulacaoTarifaria(regulacaoTarifariaIds);
        List<Long> ids= new ArrayList<>();
        protocoloRegulacaoTarifarias.forEach(protocoloRegulacaoTarifaria ->{
            ids.add(protocoloRegulacaoTarifaria.getId());
        });
        protocoloRegulacaoTarifariaService.deletarProtocoloRegulacaoTarifaria(ids);

        regulacaoTarifariaRepository.saveAll(regulacoes);

        finalizacaoRepository.delete(finalizacao);
    }

    public boolean isNormaVencida(Date dataCadastro) {
        List<ParametrosNRSDTO> parametrosNRSDTOS = parametrosNRSService.buscarTodos();

        return parametrosNRSDTOS.stream()
                .anyMatch(parametro ->
                        parametro.getNormasDeReferencia() != null &&
                                parametro.getNormasDeReferencia() == 3 &&
                                parametro.getAnoReferencia() != null &&
                                parametro.getAnoReferencia().equals(getAnoDataCadastro(dataCadastro)) &&
                                parametro.getVerificarDataEnvio()
                );
    }

    public Long getAnoDataCadastro(Date dataCadastro) {
        if (dataCadastro == null) {
            throw new IllegalArgumentException("Data de cadastro não pode ser nula");
        }
        return (long) dataCadastro.toInstant().atZone(ZoneId.systemDefault()).getYear();
    }

    public List<Integer> buscarAnosDisponiveis() {
        return regulacaoTarifariaRepository.findListaDeAnos();
    }

    public Boolean isContratoRepetido(Long anoColeta, Long idAgr, Long idContrato) {
        RegulacaoTarifaria regulacaoTarifaria = regulacaoTarifariaRepository
                .findByAnoColetaAndAgenciaReguladoraIdAndContratoId(anoColeta, idAgr, idContrato);

        if (regulacaoTarifaria != null) {
            return true;
        }

        ContratoDTO contratoDTO = contratoService.obterContratoPorId(idContrato);

        boolean existeRepetido = regulacaoTarifariaRepository.findAll().stream()
                .anyMatch(r -> r.getContrato().getCodigoInterno().equals(contratoDTO.getCodigoInterno()));

        return existeRepetido;
    }

    @Override
    public File gerarReciboRegulacaoTarifaria(Long nuProtocolo) {

        List<Long> idRegulacaoTarifarias = new ArrayList<>();
        List<MunicipioContrato> municipioContratoes = new ArrayList<>();
        List<Long> idContratos = new ArrayList<>();

        List<ProtocoloRegulacaoTarifaria> protocoloRegulacaoTarifarias = protocoloRegulacaoTarifariaService.buscar(nuProtocolo);

        protocoloRegulacaoTarifarias.forEach(protocoloRegulacaoTarifaria -> {
            idRegulacaoTarifarias.add(protocoloRegulacaoTarifaria.getRegulacaoTarifaria().getId());
            List<MunicipioContrato> municipioContratos = municipioContratoService.buscarPorIdContrato(protocoloRegulacaoTarifaria.getRegulacaoTarifaria().getContrato().getId());
            municipioContratoes.addAll(municipioContratos);
            idContratos.add(protocoloRegulacaoTarifaria.getRegulacaoTarifaria().getContrato().getId());
        });
        List<RegulacaoTarifaria> regulacaoTarifarias = regulacaoTarifariaRepository.findByIdIn(idRegulacaoTarifarias);
        Optional<Protocolo> protocolo = protocoloService.buscarPorNumeroProtocolo(nuProtocolo);

        List<ContratoServicoAtividadeSelecionada> atividades = contratoServicoAtividadeSelecionadaService.findAllByContratoIdIn(idContratos);


        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(regulacaoTarifarias.get(0).getAgenciaReguladora().getCnpj()))
                .dataRegistro(protocolo.get().getDataEnvio().toString())
                .nomeTitular(regulacaoTarifarias.get(0).getAgenciaReguladora().getNome())
                .numeroRecibo(protocolo.get().getNumeroProtocolo())
                .build();

        gerarRelatorioService.gerarReciboRegulacaoTarifaria(recibo,regulacaoTarifarias, atividades, protocolo.get().getDataEnvio(), municipioContratoes);

        return recibo.getRecibo();
    }

    public void validarExistenciaContratoRepetido(Long anoColeta,
                                                  Long idAgr,
                                                  Long idContrato
                                                  ) {
        if (isContratoRepetido(anoColeta, idAgr, idContrato)) {
            throw new NegocioException("Já existe regulação criada para este mesmo ano, contrato e agência!");
        }
    }

    public RegulacaoTarifaria verificarConformidade(RegulacaoTarifaria regulacaoTarifaria,
                                                    RegulacaoTarifariaDTO regulacaoTarifariaDTO) {

        if (regulacaoTarifariaDTO.getPergunta1() != null && !regulacaoTarifariaDTO.getPergunta1()
                || regulacaoTarifariaDTO.getPergunta2() != null && !regulacaoTarifariaDTO.getPergunta2()
                || regulacaoTarifariaDTO.getPergunta2_1() != null && !regulacaoTarifariaDTO.getPergunta2_1()) {
            regulacaoTarifaria.setConforme("Não se aplica.");
            return regulacaoTarifaria;
        }

        if (regulacaoTarifariaDTO.getPergunta3() != null && regulacaoTarifariaDTO.getPergunta3()
                && regulacaoTarifariaDTO.getPergunta4() != null && regulacaoTarifariaDTO.getPergunta4()
                && regulacaoTarifariaDTO.getPergunta5() != null && regulacaoTarifariaDTO.getPergunta5()
                && regulacaoTarifariaDTO.getPergunta6() != null && regulacaoTarifariaDTO.getPergunta6()
                && regulacaoTarifariaDTO.getPergunta7() != null && regulacaoTarifariaDTO.getPergunta7()
                && regulacaoTarifariaDTO.getPergunta8() != null && regulacaoTarifariaDTO.getPergunta8()
                && regulacaoTarifariaDTO.getPergunta9() != null && regulacaoTarifariaDTO.getPergunta9()
                && regulacaoTarifariaDTO.getPergunta10() != null && regulacaoTarifariaDTO.getPergunta10()
                && regulacaoTarifariaDTO.getPergunta11() != null && regulacaoTarifariaDTO.getPergunta11()) {
            regulacaoTarifaria.setConforme("Conforme.");
            return regulacaoTarifaria;
        }

        regulacaoTarifaria.setConforme("Não conforme.");
        return regulacaoTarifaria;
    }



    private Protocolo gerarNovoProtocolo(Long anoReferencia , AgenciaReguladora agenciaReguladora, Long norma) {
        Protocolo protocolo = new Protocolo();
        protocolo.setNumeroProtocolo("Protocolo");
        protocolo.setDataEnvio(LocalDateTime.now());
        protocolo.setNormasDeRefrencia(normasDeReferenciaService.findById(norma));
        protocolo.setEntidadeReguladora(agenciaReguladora);
        protocolo.setAnoReferencia(anoReferencia);
        protocoloService.criarProtocolo(protocolo);
        protocolo = protocoloService.gerarNumeroProtocolo(protocolo);
        protocoloService.criarProtocolo(protocolo);

        return protocolo;


    }

    private List<ProtocoloRegulacaoTarifaria> montarConteudoPraSalvar(List<RegulacaoTarifaria> regulacaoTarifarias, Protocolo protocolo){
        List<ProtocoloRegulacaoTarifaria> protocoloRegulacaoTarifarias = new ArrayList<>();

        regulacaoTarifarias.forEach(regulacaoTarifaria -> {
            ProtocoloRegulacaoTarifaria protocoloRegulacaoTarifaria = new ProtocoloRegulacaoTarifaria();
            protocoloRegulacaoTarifaria.setRegulacaoTarifaria(regulacaoTarifaria);
            protocoloRegulacaoTarifaria.setProtocolo(protocolo);
            protocoloRegulacaoTarifarias.add(protocoloRegulacaoTarifaria);
        });

        return protocoloRegulacaoTarifarias;
    }



}


// Fim do arquivo: RegulacaoTarifariaServiceImpl.java

// Arquivo: RelatorioErisService.java
// Caminho: \br\gov\ana\sarsb\service\RelatorioErisService.java

package br.gov.ana.sarsb.service;

import org.apache.poi.ss.usermodel.Workbook;

import javax.servlet.http.HttpServletResponse;


public interface RelatorioErisService {



	Workbook gerarRelatorioXLS(Long idAgr, HttpServletResponse response);


}


// Fim do arquivo: RelatorioErisService.java

// Arquivo: RelatorioErisServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\RelatorioErisServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.repository.*;
import lombok.extern.log4j.Log4j2;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

@Log4j2
@Transactional
@Service
public class RelatorioErisServiceImpl implements RelatorioErisService {
	private final RelatorioErisRepository vwRelatorioCadastroErisXlsRepository;

	public RelatorioErisServiceImpl(RelatorioErisRepository vwRelatorioCadastroErisXlsRepository) {
		this.vwRelatorioCadastroErisXlsRepository = vwRelatorioCadastroErisXlsRepository;
	}



	public Workbook gerarRelatorioXLS(Long idAgr, HttpServletResponse response) {
		// Usar o repositório para obter os dados da planilha
		List<Object[]> dadosBancoList = vwRelatorioCadastroErisXlsRepository.findDadosRelatorioByIdAgr(idAgr);

		Workbook workbook = new XSSFWorkbook();
		Sheet sheet = workbook.createSheet("Relatório");

		// Crie o cabeçalho
		Row headerRow = sheet.createRow(0);
		headerRow.createCell(0).setCellValue("CNPJ ENTIDADE");
		headerRow.createCell(1).setCellValue("RAZAO SOCIAL");
		headerRow.createCell(2).setCellValue("MUNICIPIO");
		headerRow.createCell(3).setCellValue("UF");
		headerRow.createCell(4).setCellValue("ATRIBUIÇÃO");
		headerRow.createCell(5).setCellValue("SERVIÇO");
		headerRow.createCell(6).setCellValue("ATIVIDADE");
		headerRow.createCell(7).setCellValue("DATA INICIO");
		headerRow.createCell(8).setCellValue("DATA FIM");
		headerRow.createCell(9).setCellValue("CNPJ PRESTADOR");
		headerRow.createCell(10).setCellValue("PRESTADOR");
		headerRow.createCell(11).setCellValue("DATA INICIO PRESTADOR");
		headerRow.createCell(12).setCellValue("DATA FIM PRESTADOR");

		int rowNum = 1; // Comece na segunda linha, pois a primeira linha é o cabeçalho
		for (Object[] dados : dadosBancoList) {
			Row dataRow = sheet.createRow(rowNum++);
			int cellNum = 0;
			for (Object value : dados) {
				String cellValue = value != null ? value.toString() : "vazio"; // Tratar campos nulos como vazios
				dataRow.createCell(cellNum++).setCellValue(cellValue);
			}
		}

		// Agora, escreva o Workbook no HttpServletResponse
		try {
			response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			response.setHeader("Content-Disposition", "attachment; filename=relatorio.xlsx");

			OutputStream outputStream = response.getOutputStream();
			workbook.write(outputStream);
			outputStream.close();

			// Fechar o Workbook
			workbook.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return workbook;
	}
}


// Fim do arquivo: RelatorioErisServiceImpl.java

// Arquivo: RequisitoComplementarDocImpl.java
// Caminho: \br\gov\ana\sarsb\service\RequisitoComplementarDocImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.RequisitoComplementarDoc;
import br.gov.ana.sarsb.repository.RequisitoComplementarDocRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.List;

@Service
@Transactional
public class RequisitoComplementarDocImpl implements RequisitoComplementarDocService {

    private final RequisitoComplementarDocRepository requisitoComplementarDocRepository;

    public RequisitoComplementarDocImpl(RequisitoComplementarDocRepository requisitoComplementarDocRepository) {
        this.requisitoComplementarDocRepository = requisitoComplementarDocRepository;
    }

    public RequisitoComplementarDoc salvar(RequisitoComplementarDoc requisitoComplementarDoc)
            throws NegocioException, IOException {
        return requisitoComplementarDocRepository.save(requisitoComplementarDoc);
    }

//    public DocumentoIndicadorMetaDTO convertToDTO(DocumentoIndicadorMeta documentoIndicadorMeta) throws NegocioException {
//        DocumentoIndicadorMetaDTO documentoIndicadorMetaDTO = new DocumentoIndicadorMetaDTO();
//
//        documentoIndicadorMetaDTO.setId(documentoIndicadorMeta.getId());
//        documentoIndicadorMetaDTO.setAcaoNovaLista(documentoIndicadorMeta.getAcaoNovaLista());
//        documentoIndicadorMetaDTO.setAcaoNovoAto(documentoIndicadorMeta.getAcaoNovoAto());
//        documentoIndicadorMetaDTO.setAcaoNovoRelatorio(documentoIndicadorMeta.getAcaoNovoRelatorio());
//        documentoIndicadorMetaDTO.setAcaoRetificacaoAto(documentoIndicadorMeta.getAcaoRetificacaoAto());
//        documentoIndicadorMetaDTO.setAcaoRetificacaoRelatorio(documentoIndicadorMeta.getAcaoRetificacaoRelatorio());
//        documentoIndicadorMetaDTO.setDataInclusao(documentoIndicadorMeta.getDataInclusao());
//        documentoIndicadorMetaDTO.setAcaoRetificacaoLista(documentoIndicadorMeta.getAcaoRetificacaoLista());
//        documentoIndicadorMetaDTO.setAceite(documentoIndicadorMeta.getAceite());
//        documentoIndicadorMetaDTO.setDescricaoArquivo(documentoIndicadorMeta.getDescricaoArquivo());
//        documentoIndicadorMetaDTO.setLinkOficial(documentoIndicadorMeta.getLinkOficial());
//        documentoIndicadorMetaDTO.setTipoEnvio(
//                documentoIndicadorMeta.getTipoEnvio() != null
//                        ? documentoIndicadorMeta.getTipoEnvio().name()
//                        : null
//        );
//        documentoIndicadorMetaDTO.setIdAgencia(documentoIndicadorMeta.getAgenciaReguladora() != null
//                ? documentoIndicadorMeta.getAgenciaReguladora().getId() : null);
//
//        return documentoIndicadorMetaDTO;
//    }

//    public DocumentoIndicadorMeta convertToEntity(DocumentoIndicadorMetaDTO dto) throws NegocioException {
//        DocumentoIndicadorMeta entidade = new DocumentoIndicadorMeta();
//
//        entidade.setId(dto.getId());
//        entidade.setDescricaoArquivo(dto.getDescricaoArquivo());
//        entidade.setLinkOficial(dto.getLinkOficial());
//        entidade.setDataInclusao(dto.getDataInclusao());
//        entidade.setAcaoNovaLista(dto.getAcaoNovaLista());
//        entidade.setAcaoRetificacaoLista(dto.getAcaoRetificacaoLista());
//        entidade.setAcaoNovoAto(dto.getAcaoNovoAto());
//        entidade.setAcaoRetificacaoAto(dto.getAcaoRetificacaoAto());
//        entidade.setAcaoNovoRelatorio(dto.getAcaoNovoRelatorio());
//        entidade.setAcaoRetificacaoRelatorio(dto.getAcaoRetificacaoRelatorio());
//        entidade.setAceite(dto.getAceite());
//
//        if (dto.getTipoEnvio() != null) {
//            try {
//                entidade.setTipoEnvio(TipoEnvio.valueOf(dto.getTipoEnvio()));
//            } catch (IllegalArgumentException e) {
//                throw new NegocioException("Tipo de envio inválido: " + dto.getTipoEnvio());
//            }
//        }
//
//        obterAgenciaReguladora(entidade, dto);
//
//        return entidade;
//    }


//    private DocumentoIndicadorMeta buscarRequisitoOuLancarErro(Long id) {
//        return documentoIndicadorMetaRepository.findById(id)
//                .orElseThrow(() -> new NegocioException("requisitoComplementar.naoEncontrado", null));
//    }

    public void deletar(Long id) throws NegocioException {
        requisitoComplementarDocRepository.deleteById(id);
    }

    public RequisitoComplementarDoc recuperar(Long id) throws NegocioException {
        return new RequisitoComplementarDoc();
    }

    public void deletarAll(List<Long> ids) {
        requisitoComplementarDocRepository.deleteAllByIds(ids);
    }

}


// Fim do arquivo: RequisitoComplementarDocImpl.java

// Arquivo: RequisitoComplementarDocService.java
// Caminho: \br\gov\ana\sarsb\service\RequisitoComplementarDocService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.entity.RequisitoComplementarDoc;

import java.io.IOException;
import java.util.List;

public interface RequisitoComplementarDocService {
    RequisitoComplementarDoc salvar(RequisitoComplementarDoc requisitoComplementarDoc)
            throws NegocioException, IOException;

    void deletar(Long id) throws NegocioException;

    RequisitoComplementarDoc recuperar(Long id) throws NegocioException;

    void deletarAll(List<Long> ids) throws NegocioException;
}


// Fim do arquivo: RequisitoComplementarDocService.java

// Arquivo: RequisitoComplementarService.java
// Caminho: \br\gov\ana\sarsb\service\RequisitoComplementarService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.entity.RequisitoComplementar;

import java.io.File;
import java.io.IOException;
import java.util.List;

public interface RequisitoComplementarService {

    RequisitoComplementarDTO convertToDTO(RequisitoComplementar requisitoComplementar) throws NegocioException;

    RequisitoComplementar convertToEntity(RequisitoComplementarDTO requisitoComplementarDTO) throws NegocioException;

    RequisitoComplementarDTO atualizar(Long id, RequisitoComplementarDTO requisitoComplementarDTO)
            throws NegocioException, IOException;

    void deletar(Long id) throws NegocioException, IOException;

    List<RequisitoComplementarDTO> listar(Long idAgencia, Long anoReferencia) throws NegocioException, IOException;

    RequisitoComplementarDTO obterPorId(Long id) throws NegocioException, IOException;

    List<RequisitoComplementarDTO> listarTodos(Long idAgencia) throws NegocioException, IOException;

    void finalizarPreenchimento(RequisitoComplementar requisito);

    void reabilitarPreenchimento(Long ano, Long idAgencia);

    File gerarReciboComplementar(Long idConformidade, Long ano, Long idAgencia) throws IOException;

}


// Fim do arquivo: RequisitoComplementarService.java

// Arquivo: RequisitoComplementarServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\RequisitoComplementarServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.DocumentoIndicadorMetaDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.RequisitoComplementarDocDTO;
import br.gov.ana.sarsb.model.dto.municipio.relatorio.ReciboDTO;
import br.gov.ana.sarsb.model.entity.*;
import br.gov.ana.sarsb.repository.AgenciaReguladoraRepository;
import br.gov.ana.sarsb.repository.FinalizacaoRequisitoComplementarRepository;
import br.gov.ana.sarsb.repository.ProtocoloRequisitoComplementarRepository;
import br.gov.ana.sarsb.repository.RequisitoComplementarDocRepository;
import br.gov.ana.sarsb.repository.RequisitoComplementarRepository;
import br.gov.ana.sarsb.util.ConverterUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.EntityNotFoundException;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

@Service
@Transactional
public class RequisitoComplementarServiceImpl implements RequisitoComplementarService {

    private static final Long NORMA_ID = 5L;
    private final RequisitoComplementarRepository requisitoComplementarRepository;
    private final AgenciaReguladoraRepository agenciaReguladoraRepository;
    private final DocumentoIndicadorMetaService documentoIndicadorMetaService;
    private final FileStorageService fileStorageService;
    private final RequisitoComplementarDocRepository requisitoComplementarDocRepository;
    private final FinalizacaoRequisitoComplementarRepository finalizacaoRequisitoComplementarRepository;
    private final NormasDeReferenciaService normasDeReferenciaService;
    private final ProtocoloService protocoloService;
    private final ProtocoloRequisitoComplementarService protocoloRequisitoComplementarService;

    @Autowired
    private RequisitoComplementarService  requisitoComplementarService;

    @Autowired
    private GerarRelatorioService gerarRelatorioService;

    public RequisitoComplementarServiceImpl(RequisitoComplementarRepository requisitoComplementarRepository,
                                            AgenciaReguladoraRepository agenciaReguladoraRepository,
                                            DocumentoIndicadorMetaService documentoIndicadorMetaService,
                                            FileStorageService fileStorageService,
                                            RequisitoComplementarDocRepository requisitoComplementarDocRepository,
                                            FinalizacaoRequisitoComplementarRepository finalizacaoRequisitoComplementarRepository,
                                            ProtocoloService protocoloService,
                                            NormasDeReferenciaService normasDeReferenciaService,
                                            ProtocoloRequisitoComplementarRepository protocoloRequisitoComplementarRepository,
                                            ProtocoloRequisitoComplementarService protocoloRequisitoComplementarService) {
        this.requisitoComplementarRepository = requisitoComplementarRepository;
        this.agenciaReguladoraRepository = agenciaReguladoraRepository;
        this.documentoIndicadorMetaService = documentoIndicadorMetaService;
        this.fileStorageService = fileStorageService;
        this.requisitoComplementarDocRepository = requisitoComplementarDocRepository;
        this.finalizacaoRequisitoComplementarRepository = finalizacaoRequisitoComplementarRepository;
        this.protocoloService = protocoloService;
        this.normasDeReferenciaService = normasDeReferenciaService;
        this.protocoloRequisitoComplementarService = protocoloRequisitoComplementarService;
    }

    public RequisitoComplementarDTO convertToDTO(RequisitoComplementar requisitoComplementar) throws NegocioException {
        RequisitoComplementarDTO requisitoComplementarDTO = new RequisitoComplementarDTO();

        requisitoComplementarDTO.setId(requisitoComplementar.getId());
        requisitoComplementarDTO.setAnoReferencia(requisitoComplementar.getAnoReferencia());
        requisitoComplementarDTO.setPergunta1(requisitoComplementar.getPergunta1());
        requisitoComplementarDTO.setPergunta2(requisitoComplementar.getPergunta2());
        requisitoComplementarDTO.setPergunta3(requisitoComplementar.getPergunta3());
        requisitoComplementarDTO.setPergunta4(requisitoComplementar.getPergunta4());
        requisitoComplementarDTO.setPergunta5(requisitoComplementar.getPergunta5());
        requisitoComplementarDTO.setPergunta6(requisitoComplementar.getPergunta6());
        requisitoComplementarDTO.setPergunta7(requisitoComplementar.getPergunta7());
        requisitoComplementarDTO.setIdAgencia(requisitoComplementar.getAgenciaReguladora() != null ?
                requisitoComplementar.getAgenciaReguladora().getId() : null);
        requisitoComplementarDTO.setConforme(requisitoComplementar.getConforme());
        requisitoComplementarDTO.setFinalizado(requisitoComplementar.getFinalizacao() != null);

        return requisitoComplementarDTO;
    }

    public RequisitoComplementar convertToEntity(RequisitoComplementarDTO requisitoComplementarDTO)
            throws NegocioException {
        RequisitoComplementar requisitoComplementar = new RequisitoComplementar();

        requisitoComplementar.setAnoReferencia(requisitoComplementarDTO.getAnoReferencia());
        requisitoComplementar.setPergunta1(requisitoComplementarDTO.getPergunta1());
        requisitoComplementar.setPergunta2(requisitoComplementarDTO.getPergunta2());
        requisitoComplementar.setPergunta3(requisitoComplementarDTO.getPergunta3());
        requisitoComplementar.setPergunta4(requisitoComplementarDTO.getPergunta4());
        requisitoComplementar.setPergunta5(requisitoComplementarDTO.getPergunta5());
        requisitoComplementar.setPergunta6(requisitoComplementarDTO.getPergunta6());
        requisitoComplementar.setPergunta7(requisitoComplementarDTO.getPergunta7());

        obterAgenciaReguladora(requisitoComplementar, requisitoComplementarDTO);

        return requisitoComplementar;
    }


    public void obterAgenciaReguladora(RequisitoComplementar requisitoComplementar,
                                       RequisitoComplementarDTO requisitoComplementarDTO) {
        AgenciaReguladora agenciaReguladora;
        if (requisitoComplementarDTO.getIdAgencia() != null) {
            agenciaReguladora =
                    agenciaReguladoraRepository.findByIds(requisitoComplementarDTO.getIdAgencia()).orElse(null);
            requisitoComplementar.setAgenciaReguladora(agenciaReguladora);
        }
    }

    @Override
    public RequisitoComplementarDTO atualizar(Long id, RequisitoComplementarDTO dto)
            throws NegocioException, IOException {

        RequisitoComplementar requisitoExistente = buscarRequisitoOuLancarErro(id);
        atualizarCampos(requisitoExistente, dto);
        List<String> arquivosEnviadosComSucesso = new ArrayList<>();

        try {
            processarUploadDosArquivos(dto, requisitoExistente, arquivosEnviadosComSucesso);
        } catch (IOException e) {
            String cnpj = requisitoExistente.getAgenciaReguladora().getCnpj();

            for (String key : arquivosEnviadosComSucesso) {
                String filename = key.substring(key.lastIndexOf("/") + 1);
                fileStorageService.deleteS3(filename, cnpj, NORMA_ID);
            }

            throw new IOException("Erro ao atualizar arquivos. Nenhum dado foi persistido. Upload revertido.", e);
        }

        if (dto.getIdsDocumentosRemovidos() != null && !dto.getIdsDocumentosRemovidos().isEmpty()) {
            List<RequisitoComplementarDoc> docsRemover = requisitoExistente.getDocumentos().stream()
                    .filter(doc -> dto.getIdsDocumentosRemovidos().contains(doc.getDocumentoIndicadorMeta().getId()))
                    .collect(Collectors.toList());

            for (RequisitoComplementarDoc doc : docsRemover) {
                String path = doc.getDocumentoIndicadorMeta().getDescricaoArquivo();
                if (doc.getDocumentoIndicadorMeta().getTipoEnvio() != null &&
                        doc.getDocumentoIndicadorMeta().getTipoEnvio().name().equals("UPLOAD") && path != null &&
                        !path.equals("Não informado.")) {

                    String cnpj = requisitoExistente.getAgenciaReguladora().getCnpj();
                    String filename = path.substring(path.lastIndexOf("/") + 1);
                    fileStorageService.deleteS3(filename, cnpj, NORMA_ID);
                }

                requisitoExistente.getDocumentos().remove(doc);
            }
        }

        if (dto.getDocumentosParaSalvar() != null && !dto.getDocumentosParaSalvar().isEmpty()) {
            List<RequisitoComplementarDoc> novosRelacionamentos =
                    salvarDocumentosEAssociarAoRequisito(dto.getDocumentosParaSalvar(), requisitoExistente);

            requisitoExistente.getDocumentos().addAll(novosRelacionamentos);
        }

        requisitoExistente = requisitoComplementarRepository.save(requisitoExistente);

        finalizarPreenchimento(requisitoExistente);

        return montarRetornoDTO(requisitoExistente);
    }

    private RequisitoComplementar buscarRequisitoOuLancarErro(Long id) {
        return requisitoComplementarRepository.findById(id)
                .orElseThrow(() -> new NegocioException("requisitoComplementar.naoEncontrado", null));
    }

    private void atualizarCampos(RequisitoComplementar requisito, RequisitoComplementarDTO dto) {
        requisito.setAnoReferencia(dto.getAnoReferencia());
        requisito.setPergunta1(dto.getPergunta1());
        requisito.setPergunta2(dto.getPergunta2());
        requisito.setPergunta3(dto.getPergunta3());
        requisito.setPergunta4(dto.getPergunta4());
        requisito.setPergunta5(dto.getPergunta5());
        requisito.setPergunta6(dto.getPergunta6());
        requisito.setPergunta7(dto.getPergunta7());
        requisito.setConforme(dto.getConforme());

        obterAgenciaReguladora(requisito, dto);
    }
//
//    public void deletar(Long id) throws NegocioException, IOException {
//        RequisitoComplementar requisito = buscarRequisitoOuLancarErro(id);
//
//
//        requisitoComplementarRepository.deleteById(id);
//    }

    public List<RequisitoComplementarDTO> listar(Long idAgencia, Long anoReferencia)
            throws NegocioException, IOException {
        List<RequisitoComplementar> requisitos =
                requisitoComplementarRepository.findAllByAgenciaReguladoraIdAndAnoReferenciaOrderByAnoReferenciaDesc(
                        idAgencia, anoReferencia);

        return requisitos.stream().map(this::montarRetornoDTO).collect(Collectors.toList());
    }

    private Long extrairNumeroPergunta(RequisitoComplementarDoc doc) {
        if (Boolean.TRUE.equals(doc.getPergunta1())) return 1L;
        if (Boolean.TRUE.equals(doc.getPergunta2())) return 2L;
        if (Boolean.TRUE.equals(doc.getPergunta3())) return 3L;
        if (Boolean.TRUE.equals(doc.getPergunta4())) return 4L;
        if (Boolean.TRUE.equals(doc.getPergunta5())) return 5L;
        if (Boolean.TRUE.equals(doc.getPergunta6())) return 6L;
        if (Boolean.TRUE.equals(doc.getPergunta7())) return 7L;
        return null;
    }

    private void processarUploadDosArquivos(RequisitoComplementarDTO dto, RequisitoComplementar requisito,
                                            List<String> arquivosSalvos) throws IOException {
        List<DocumentoIndicadorMetaDTO> documentos = dto.getDocumentosParaSalvar();
        List<MultipartFile> arquivos = dto.getArquivos();

        int arquivoIndex = 0;

        for (DocumentoIndicadorMetaDTO doc : documentos) {
            if ("UPLOAD".equalsIgnoreCase(doc.getTipoEnvio())) {
                if (arquivos != null && arquivos.size() > arquivoIndex && arquivos.get(arquivoIndex) != null &&
                        !arquivos.get(arquivoIndex).isEmpty()) {

                    MultipartFile file = arquivos.get(arquivoIndex);
                    String cnpj = requisito.getAgenciaReguladora().getCnpj();

                    String nomeUnicoArquivo = gerarNomeArquivoSeguro(file.getOriginalFilename());
                    String key = String.format("%s/%d/%s", cnpj, NORMA_ID, nomeUnicoArquivo);

                    fileStorageService.saveS3WithCustomKey(file, key);
                    arquivosSalvos.add(key);

                    doc.setDescricaoArquivo(key);
                    doc.setRealizaDownload(true);

                    arquivoIndex++;

                } else {
                    throw new IOException("Arquivo não informado para documento com tipoEnvio = UPLOAD");
                }
            } else {
                doc.setRealizaDownload(false);
            }
        }

    }


    private List<RequisitoComplementarDoc> salvarDocumentosEAssociarAoRequisito(List<DocumentoIndicadorMetaDTO> docsDTO,
                                                                                RequisitoComplementar requisito)
            throws NegocioException, IOException {
        List<RequisitoComplementarDoc> documentosSalvos = new ArrayList<>();

        for (DocumentoIndicadorMetaDTO documentoDTO : docsDTO) {
            if (documentoDTO.getDescricaoArquivo() == null || documentoDTO.getDescricaoArquivo().isEmpty()) {
                documentoDTO.setDescricaoArquivo("Não informado.");
            }

            documentoDTO.setDataInclusao(LocalDateTime.now());
            DocumentoIndicadorMetaDTO documentoSalvoDTO = documentoIndicadorMetaService.salvar(documentoDTO);
            DocumentoIndicadorMeta documentoEntidade =
                    documentoIndicadorMetaService.recuperar(documentoSalvoDTO.getId());

            RequisitoComplementarDoc requisitoComplementarDoc = new RequisitoComplementarDoc();
            requisitoComplementarDoc.setRequisitoComplementar(requisito);
            requisitoComplementarDoc.setDocumentoIndicadorMeta(documentoEntidade);
            aplicarNumeroPergunta(documentoDTO, requisitoComplementarDoc);

            documentosSalvos.add(requisitoComplementarDoc);
        }

        return documentosSalvos;
    }

    private void aplicarNumeroPergunta(DocumentoIndicadorMetaDTO doc, RequisitoComplementarDoc rel) {
        if (doc.getNumeroPergunta() != null) {
            switch (doc.getNumeroPergunta().intValue()) {
                case 1:
                    rel.setPergunta1(true);
                    break;
                case 2:
                    rel.setPergunta2(true);
                    break;
                case 3:
                    rel.setPergunta3(true);
                    break;
                case 4:
                    rel.setPergunta4(true);
                    break;
                case 5:
                    rel.setPergunta5(true);
                    break;
                case 6:
                    rel.setPergunta6(true);
                    break;
                case 7:
                    rel.setPergunta7(true);
                    break;
                default:
                    throw new NegocioException("Número de pergunta inválido: " + doc.getNumeroPergunta());
            }
        }
    }

    private RequisitoComplementarDTO montarRetornoDTO(RequisitoComplementar requisito) {
        RequisitoComplementarDTO requisitoComplementarDTO = convertToDTO(requisito);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        List<RequisitoComplementarDocDTO> documentos = requisito.getDocumentos().stream().map(documento -> {
            DocumentoIndicadorMeta documentoIndicadorMeta = documento.getDocumentoIndicadorMeta();
            return RequisitoComplementarDocDTO.builder().id(documento.getId())
                    .idRequisitoComplementar(requisito.getId()).idDocumentoIndicadorMeta(documentoIndicadorMeta.getId())
                    .descricaoArquivo(documentoIndicadorMeta.getDescricaoArquivo())
                    .acaoNovaLista(documentoIndicadorMeta.getAcaoNovaLista())
                    .acaoRetificacaoLista(documentoIndicadorMeta.getAcaoRetificacaoLista())
                    .acaoNovoAto(documentoIndicadorMeta.getAcaoNovoAto())
                    .acaoRetificacaoAto(documentoIndicadorMeta.getAcaoRetificacaoAto())
                    .acaoNovoRelatorio(documentoIndicadorMeta.getAcaoNovoRelatorio())
                    .acaoRetificacaoRelatorio(documentoIndicadorMeta.getAcaoRetificacaoRelatorio())
                    .linkOficial(documentoIndicadorMeta.getLinkOficial()).tipoEnvio(
                            documentoIndicadorMeta.getTipoEnvio() != null ?
                                    documentoIndicadorMeta.getTipoEnvio().name() : null).realizaDownload(
                            "UPLOAD".equalsIgnoreCase(documentoIndicadorMeta.getTipoEnvio() != null ?
                                    documentoIndicadorMeta.getTipoEnvio().name() : ""))
                    .numeroPergunta(extrairNumeroPergunta(documento)).dataInclusao(
                            documentoIndicadorMeta.getDataInclusao() != null ?
                                    documentoIndicadorMeta.getDataInclusao().format(formatter) : null).build();
        }).collect(Collectors.toList());

        requisitoComplementarDTO.setDocumentos(documentos);

        Map<Long, List<RequisitoComplementarDocDTO>> documentosPorPergunta =
                documentos.stream().filter(doc -> doc.getNumeroPergunta() != null).collect(
                        Collectors.groupingBy(RequisitoComplementarDocDTO::getNumeroPergunta,
                                Collectors.collectingAndThen(Collectors.toList(), lista -> lista.stream()
                                        .sorted(Comparator.comparing(RequisitoComplementarDocDTO::getDataInclusao,
                                                Comparator.nullsLast(Comparator.reverseOrder())))
                                        .collect(Collectors.toList()))));

        requisitoComplementarDTO.setDocumentosPorPergunta(documentosPorPergunta);

        return requisitoComplementarDTO;
    }

    public RequisitoComplementarDTO obterPorId(Long id) throws NegocioException {
        RequisitoComplementar requisito = requisitoComplementarRepository.findById(id)
                .orElseThrow(() -> new NegocioException("requisitoComplementar.naoEncontrado", null));
        return montarRetornoDTO(requisito);
    }

    public String gerarNomeArquivoSeguro(String nomeOriginal) {
        if (nomeOriginal == null || nomeOriginal.isBlank()) {
            throw new IllegalArgumentException("Nome do arquivo não pode ser nulo ou vazio.");
        }

        String extensao = "";
        int pontoIndex = nomeOriginal.lastIndexOf('.');
        if (pontoIndex > 0 && pontoIndex < nomeOriginal.length() - 1) {
            extensao = nomeOriginal.substring(pontoIndex);
        }

        String nomeSemExtensao =
                nomeOriginal.substring(0, pontoIndex).replaceAll("\\s+", "").replaceAll("[^a-zA-Z0-9-_]", "");

        int limite = 30;
        if (nomeSemExtensao.length() > limite) {
            nomeSemExtensao = nomeSemExtensao.substring(0, limite);
        }

        String uuid = UUID.randomUUID().toString();

        return nomeSemExtensao + "-" + uuid + extensao;
    }

    @Override
    public void deletar(Long id) throws NegocioException, IOException {
        RequisitoComplementar requisito = requisitoComplementarRepository.findById(id)
                .orElseThrow(() -> new NegocioException("Requisito não encontrado"));

        List<RequisitoComplementarDoc> docsRelacionados = new ArrayList<>(requisito.getDocumentos());

        for (RequisitoComplementarDoc docRel : docsRelacionados) {
            DocumentoIndicadorMeta docMeta = docRel.getDocumentoIndicadorMeta();

            if (docMeta != null) {
                if ("UPLOAD".equalsIgnoreCase(docMeta.getTipoEnvio().name())) {
                    String cnpj = requisito.getAgenciaReguladora().getId().toString();
                    Long formularioId = requisito.getId();

                    String descricaoArquivo = docMeta.getDescricaoArquivo();
                    if (descricaoArquivo != null && descricaoArquivo.contains("/")) {
                        String filename = descricaoArquivo.substring(descricaoArquivo.lastIndexOf("/") + 1);
                        fileStorageService.deleteS3(filename, cnpj, formularioId);
                    }
                }

                documentoIndicadorMetaService.deletar(docMeta.getId());
            }
        }

        requisitoComplementarDocRepository.deleteAll(docsRelacionados);

        requisitoComplementarRepository.delete(requisito);
    }

    public List<RequisitoComplementarDTO> listarTodos(Long idAgencia) throws NegocioException, IOException {
        List<RequisitoComplementar> requisitos =
                requisitoComplementarRepository.findAllByAgenciaReguladoraIdOrderByAnoReferenciaDesc(idAgencia);

        return requisitos.stream().map(this::montarRetornoDTO).collect(Collectors.toList());
    }

    public void finalizarPreenchimento(RequisitoComplementar requisito) {
        Long ano = requisito.getAnoReferencia();
        AgenciaReguladora agencia = requisito.getAgenciaReguladora();

        boolean jaFinalizado = finalizacaoRequisitoComplementarRepository
                .existsByAnoColetaAndAgenciaReguladora(ano, agencia);

        if (jaFinalizado) {
            throw new IllegalStateException(
                    "Já existe uma finalização para o ano " + ano + " e a agência " + agencia.getNome());
        }

        FinalizacaoRequisitoComplementar finalizacao = new FinalizacaoRequisitoComplementar();
        finalizacao.setAnoColeta(ano);
        finalizacao.setAgenciaReguladora(agencia);
        finalizacao.setDataFinalizacao(LocalDateTime.now());
        finalizacaoRequisitoComplementarRepository.save(finalizacao);

        requisito.setFinalizacao(finalizacao);
        requisito = requisitoComplementarRepository.save(requisito);

        Protocolo protocolo = gerarNovoProtocolo(ano, agencia);
        ProtocoloRequisitoComplementar protocoloReq = new ProtocoloRequisitoComplementar();
        protocoloReq.setProtocolo(protocolo);
        protocoloReq.setRequisitoComplementar(requisito);

        protocoloRequisitoComplementarService.salvar(Collections.singletonList(protocoloReq));
    }

    private Protocolo gerarNovoProtocolo(Long anoReferencia, AgenciaReguladora agenciaReguladora) {
        Protocolo protocolo = new Protocolo();
        protocolo.setNumeroProtocolo("Protocolo");
        protocolo.setDataEnvio(LocalDateTime.now());
        protocolo.setNormasDeRefrencia(normasDeReferenciaService.findById(RequisitoComplementarServiceImpl.NORMA_ID));
        protocolo.setEntidadeReguladora(agenciaReguladora);
        protocolo.setAnoReferencia(anoReferencia);
        protocoloService.criarProtocolo(protocolo);
        protocolo = protocoloService.gerarNumeroProtocolo(protocolo);
        protocoloService.criarProtocolo(protocolo);

        return protocolo;
    }

    private List<ProtocoloRequisitoComplementar> montarConteudoPraSalvar(
            List<RequisitoComplementar> requisitosComplementar, Protocolo protocolo) {
        List<ProtocoloRequisitoComplementar> protocolosRequisitoComplementar = new ArrayList<>();

        requisitosComplementar.forEach(requisitoComplementar -> {
            ProtocoloRequisitoComplementar protocoloRequisitoComplementar = new ProtocoloRequisitoComplementar();
            protocoloRequisitoComplementar.setRequisitoComplementar(requisitoComplementar);
            protocoloRequisitoComplementar.setProtocolo(protocolo);
            protocolosRequisitoComplementar.add(protocoloRequisitoComplementar);
        });

        return protocolosRequisitoComplementar;
    }

    public void reabilitarPreenchimento(Long ano, Long idAgencia) {
        AgenciaReguladora agencia = agenciaReguladoraRepository.findByIds(idAgencia)
                .orElseThrow(() -> new EntityNotFoundException("Agência reguladora não encontrada."));

        FinalizacaoRequisitoComplementar finalizacao = finalizacaoRequisitoComplementarRepository
                .findByAnoColetaAndAgenciaReguladora(ano, agencia)
                .orElseThrow(() -> new EntityNotFoundException(
                        "Finalização não encontrada para o ano e a agência especificados."));

        List<RequisitoComplementar> requisitos = requisitoComplementarRepository.findByFinalizacao(finalizacao);

        if (requisitos.size() != 1) {
            throw new IllegalStateException("Esperava exatamente um RequisitoComplementar vinculado à finalização.");
        }

        RequisitoComplementar requisito = requisitos.get(0);

        requisito.setFinalizacao(null);
        requisitoComplementarRepository.save(requisito);

        List<ProtocoloRequisitoComplementar> protocolos = protocoloRequisitoComplementarService
                .buscarPorIdRequisitoComplementar(Collections.singletonList(requisito.getId()));

        if (!protocolos.isEmpty()) {
            List<Long> ids = protocolos.stream().map(ProtocoloRequisitoComplementar::getId).collect(Collectors.toList());
            protocoloRequisitoComplementarService.deletarProtocoloRequisitoComplementar(ids);
        }

        finalizacaoRequisitoComplementarRepository.delete(finalizacao);
    }


    public File gerarReciboComplementar(Long idConformidade, Long ano, Long idAgencia) throws IOException {
        RequisitoComplementar requisitoComplementar = new RequisitoComplementar();
        ProtocoloRequisitoComplementar protocoloRequisitoComplementar = new ProtocoloRequisitoComplementar();
        if(ano != null && ano != 0){
            requisitoComplementar  = requisitoComplementarRepository.findByAnoReferenciaAndAgenciaReguladoraId(ano, idAgencia);
        }

        if (requisitoComplementar.getId() != null){
            // Busca o ProtocoloRequisitoComplementar
            protocoloRequisitoComplementar = protocoloRequisitoComplementarService.buscarPorRequisitoComplementar(requisitoComplementar);
        } else {
            // Busca o ProtocoloRequisitoComplementar
            protocoloRequisitoComplementar = protocoloRequisitoComplementarService.buscarPorId(idConformidade);
        }
        if (protocoloRequisitoComplementar == null) {
            throw new IllegalStateException("ProtocoloRequisitoComplementar não encontrado para o ID: " + idConformidade);
        }

        if (protocoloRequisitoComplementar.getRequisitoComplementar() == null) {
            return null;
        }

        // Busca o RequisitoComplementar
        RequisitoComplementarDTO requisitoComplementarDTO = requisitoComplementarService
                .obterPorId(protocoloRequisitoComplementar.getRequisitoComplementar().getId());

        if (requisitoComplementar == null) {
            throw new IllegalStateException("RequisitoComplementar não encontrado.");
        }

        // Busca a Agência Reguladora
        Optional<AgenciaReguladora> agenciaReguladoraOptional =
                agenciaReguladoraRepository.findById(requisitoComplementarDTO.getIdAgencia());

        if (!agenciaReguladoraOptional.isPresent()) {
            throw new IllegalStateException("Agência Reguladora não encontrada para o ID: " + requisitoComplementarDTO.getIdAgencia());
        }

        AgenciaReguladora agenciaReguladora = agenciaReguladoraOptional.get();

        // Verifica se o protocolo está presente
        if (protocoloRequisitoComplementar.getProtocolo() == null) {
            throw new IllegalStateException("Protocolo está nulo para o ProtocoloRequisitoComplementar ID: " + idConformidade);
        }

        // Monta o recibo
        ReciboDTO recibo = ReciboDTO.builder()
                .cnpjFormatado(ConverterUtil.aplicaMascaraCNPJ(agenciaReguladora.getCnpj()))
                .dataRegistro(protocoloRequisitoComplementar.getProtocolo().getDataEnvio().toString())
                .nomeTitular(agenciaReguladora.getNome())
                .numeroRecibo(protocoloRequisitoComplementar.getProtocolo().getNumeroProtocolo())
                .build();

        // Gera o recibo
        gerarRelatorioService.gerarReciboRequisitoComplementar(
                recibo,
                requisitoComplementarDTO,
                agenciaReguladora,
                protocoloRequisitoComplementar.getProtocolo().getDataEnvio()
        );

        return recibo.getRecibo();
    }

}


// Fim do arquivo: RequisitoComplementarServiceImpl.java

// Arquivo: SolicitacaoAcessoService.java
// Caminho: \br\gov\ana\sarsb\service\SolicitacaoAcessoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.SolicitacaoAcessoDTO;

public interface SolicitacaoAcessoService {
	
	void salvarSolicitacaoAcesso(SolicitacaoAcessoDTO solicitacaoAcessoDTO) throws NegocioException;
	
	void esqueciSenha(String cnpj, String email) throws NegocioException;

}


// Fim do arquivo: SolicitacaoAcessoService.java

// Arquivo: SolicitacaoAcessoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\SolicitacaoAcessoServiceImpl.java

package br.gov.ana.sarsb.service;

import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.gov.ana.sarsb.config.security.dto.ProfileDTO;
import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.exception.ServicoRemotoException;
import br.gov.ana.sarsb.model.dto.municipio.SolicitacaoAcessoDTO;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import br.gov.ana.sarsb.model.entity.SolicitacaoAcesso;
import br.gov.ana.sarsb.repository.PrefeituraRepository;
import br.gov.ana.sarsb.repository.SolicitacaoAcessoRepository;
import br.gov.ana.sarsb.service.integration.sso.SegurancaIntegrationService;

@Service
public class SolicitacaoAcessoServiceImpl implements SolicitacaoAcessoService {

	@Autowired
	private SolicitacaoAcessoRepository solicitacaoAcessoRepository;

	@Autowired
	private PrefeituraRepository prefeituraRepository;

	@Autowired
	private SegurancaIntegrationService segurancaIntegrationService;

	@Override
	public void salvarSolicitacaoAcesso(SolicitacaoAcessoDTO solicitacaoAcessoDTO) throws NegocioException {
		SolicitacaoAcesso solicitacao = new SolicitacaoAcesso();
		BeanUtils.copyProperties(solicitacaoAcessoDTO, solicitacao);

		Optional<Prefeitura> prefeitura = prefeituraRepository.findByCnpj(solicitacao.getCnpj());
		if (prefeitura.isPresent()) {
			if(solicitacao.getCodigoIbge().equals(prefeitura.get().getCodigoIbge())){

				ProfileDTO profile = segurancaIntegrationService.consultarProfileUsuarioSemToken(null, prefeitura.get().getCnpj(), null, null);

				if(profile.getId() != null){
					segurancaIntegrationService.alterarUsuarioSemToken(profile.getId(),profile.getNome(), profile.getNomeExibicao(), profile.getIdentificador(),
							solicitacao.getEmail(), profile.getAtivo());

					segurancaIntegrationService.esqueciSenha(profile.getIdentificador(), solicitacao.getEmail());
				}else{
					segurancaIntegrationService.cadastrarUsuario(prefeitura.get().getNome(),
							prefeitura.get().getNome(), prefeitura.get().getCnpj(), solicitacao.getEmail());
				}

				prefeitura.get().setEmail(solicitacao.getEmail());
				prefeituraRepository.save(prefeitura.get());

				solicitacaoAcessoRepository.save(solicitacao);
			}else{
				throw new NegocioException("codigoIbge");
			}
		}else{
			throw new NegocioException("cnpj");
		}
	}

	@Override
	public void esqueciSenha(String cnpj, String email) throws NegocioException {
		try {			
			ProfileDTO profile = segurancaIntegrationService.consultarProfileUsuarioSemToken(null, cnpj, null, null);
			if(profile != null) {
				if(profile.getEmail().equals(email)) {
					segurancaIntegrationService.esqueciSenha(cnpj, email);
				} else {
					throw new NegocioException("emailNaoConfere");
				}
			}
		} catch (ServicoRemotoException e) {
			throw new NegocioException("cnpjNaoEncontrado");
		}
	}
}


// Fim do arquivo: SolicitacaoAcessoServiceImpl.java

// Arquivo: SustentabilidadeService.java
// Caminho: \br\gov\ana\sarsb\service\SustentabilidadeService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.model.dto.municipio.SustentabilidadeDTO;
import br.gov.ana.sarsb.model.entity.Sustentabilidade;

import java.util.List;

public interface SustentabilidadeService {

    Sustentabilidade salvar(SustentabilidadeDTO sustentabilidadeDTO) throws NegocioException;

    List<SustentabilidadeDTO> listarTodos(Long idPrefeitura) throws NegocioException;
    void alterar(Long id, Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO, SustentabilidadeDTO sustentabilidadeDTO);
}


// Fim do arquivo: SustentabilidadeService.java

// Arquivo: SustentabilidadeServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\SustentabilidadeServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.municipio.InstrumentoCobrancaMunicipioDTO;
import br.gov.ana.sarsb.model.dto.municipio.SustentabilidadeDTO;
import br.gov.ana.sarsb.model.entity.Prefeitura;
import br.gov.ana.sarsb.model.entity.Sustentabilidade;
import br.gov.ana.sarsb.repository.PrefeituraRepository;
import br.gov.ana.sarsb.repository.SustentabilidadeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class SustentabilidadeServiceImpl implements SustentabilidadeService {

    @Autowired
    private SustentabilidadeRepository sustentabilidadeRepository;
    @Autowired
    private PrefeituraRepository prefeituraRepository;

    @Override
    public Sustentabilidade salvar(SustentabilidadeDTO sustentabilidadeDTO) throws NegocioException {
        Prefeitura prefeitura = prefeituraRepository.findById(sustentabilidadeDTO.getPrefeitura_id())
                .orElseThrow(() -> new NegocioException("prefeitura não encontrado"));
        Sustentabilidade sustentabilidade = new Sustentabilidade();
       sustentabilidade.setAnoExercicio(sustentabilidadeDTO.getAnoExercicio());
       sustentabilidade.setRecRequerida(sustentabilidadeDTO.getRecRequerida());
       sustentabilidade.setValArrecadado(sustentabilidadeDTO.getValArrecadado());
       sustentabilidade.setValSubsTarifario(sustentabilidadeDTO.getValSubsTarifario());
       sustentabilidade.setSubValArrecadadoAlt(sustentabilidadeDTO.getSubValArrecadadoAlt());
       sustentabilidade.setSubValArrecadadoAlt(sustentabilidadeDTO.getSubValArrecadadoAlt());
       sustentabilidade.setSusVerSusten(sustentabilidadeDTO.getSusVerSusten());
       sustentabilidade.setSusUploadDocSus(sustentabilidadeDTO.getSusUploadDocSus());
       sustentabilidade.setSusConfVerif(sustentabilidadeDTO.getSusConfVerif());
       sustentabilidade.setSusAceiteLgp(sustentabilidadeDTO.getSusAceiteLgp());
       sustentabilidade.setPrefeitura(prefeitura);


      return sustentabilidadeRepository.save(sustentabilidade);

    }

    @Override
    public List<SustentabilidadeDTO> listarTodos(Long idPrefeitura) throws NegocioException {
        List<Sustentabilidade> sustentabilidades = sustentabilidadeRepository.listarSustentabilidadePorIdPrefeitura(idPrefeitura);
         List<SustentabilidadeDTO> dtos = new ArrayList<>();
        for (Sustentabilidade sustentabilidade: sustentabilidades) {
            SustentabilidadeDTO dto = new SustentabilidadeDTO();
            dto.setAnoExercicio(sustentabilidade.getAnoExercicio());
            dto.setRecRequerida(sustentabilidade.getRecRequerida());
            dto.setValArrecadado(sustentabilidade.getValArrecadado());
            dto.setValSubsTarifario(sustentabilidade.getValSubsTarifario());
            dto.setSubValArrecadadoAlt(sustentabilidade.getSubValArrecadadoAlt());
            dto.setSusVerSusten(sustentabilidade.getSusVerSusten());
            dto.setSusUploadDocSus(sustentabilidade.getSusUploadDocSus());
            dto.setSusConfVerif(sustentabilidade.getSusConfVerif());
            dto.setSusAceiteLgp(sustentabilidade.getSusAceiteLgp());
            dto.setId(sustentabilidade.getId());
            dtos.add(dto);
        }

        return dtos;
    }

    @Override
    public void alterar(Long id, Long codigoPrefeitura, InstrumentoCobrancaMunicipioDTO instrumentoDTO, SustentabilidadeDTO sustentabilidadeDTO) {
       try{
           Sustentabilidade sustentabilidade = sustentabilidadeRepository.findById(id)
                   .orElseThrow(() -> new NegocioException("Cadastrante não encontrado"));
           sustentabilidade.setAnoExercicio(sustentabilidadeDTO.getAnoExercicio());
           sustentabilidade.setRecRequerida(sustentabilidadeDTO.getRecRequerida());
           sustentabilidade.setValArrecadado(sustentabilidadeDTO.getValArrecadado());
           sustentabilidade.setValSubsTarifario(sustentabilidadeDTO.getValSubsTarifario());
           sustentabilidade.setSubValArrecadadoAlt(sustentabilidadeDTO.getSubValArrecadadoAlt());
           sustentabilidade.setSusVerSusten(sustentabilidadeDTO.getSusVerSusten());
           sustentabilidade.setSusUploadDocSus(sustentabilidadeDTO.getSusUploadDocSus());
           sustentabilidade.setSusConfVerif(sustentabilidadeDTO.getSusConfVerif());
           sustentabilidade.setSusAceiteLgp(sustentabilidadeDTO.getSusAceiteLgp());
           sustentabilidadeRepository.save(sustentabilidade);

       }catch (Exception e) {
           throw new NegocioException("Erro ao alterar sustentabilidade", e);
       }


    }

}


// Fim do arquivo: SustentabilidadeServiceImpl.java

// Arquivo: TipoResponsavelMandatarioDTOImpl.java
// Caminho: \br\gov\ana\sarsb\service\TipoResponsavelMandatarioDTOImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoResponsavelMandatarioDTO;

public class TipoResponsavelMandatarioDTOImpl extends TipoResponsavelMandatarioDTO {


}


// Fim do arquivo: TipoResponsavelMandatarioDTOImpl.java

// Arquivo: TipoResponsavelMandatarioService.java
// Caminho: \br\gov\ana\sarsb\service\TipoResponsavelMandatarioService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoResponsavelMandatarioDTO;

public interface TipoResponsavelMandatarioService {




	void criarMandatario(TipoResponsavelMandatarioDTO TipoResponsavelMandatarioDTO) throws NegocioException;

	void atualizarMandatario(TipoResponsavelMandatarioDTO TipoResponsavelMandatarioDTO) throws NegocioException;


}


// Fim do arquivo: TipoResponsavelMandatarioService.java

// Arquivo: TipoResponsavelMandatarioServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\TipoResponsavelMandatarioServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoResponsavelMandatarioDTO;
import org.springframework.stereotype.Service;

@Service
public class TipoResponsavelMandatarioServiceImpl implements TipoResponsavelMandatarioService {


	@Override
	public void criarMandatario(TipoResponsavelMandatarioDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}

	@Override
	public void atualizarMandatario(TipoResponsavelMandatarioDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}
}


// Fim do arquivo: TipoResponsavelMandatarioServiceImpl.java

// Arquivo: TipoServicoReguladoDescricaoService.java
// Caminho: \br\gov\ana\sarsb\service\TipoServicoReguladoDescricaoService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoDTO;

public interface TipoServicoReguladoDescricaoService {




	void criarMandatario(TipoServicoReguladoDocumentoDTO TipoResponsavelMandatarioDTO) throws NegocioException;

	void atualizarMandatario(TipoServicoReguladoDocumentoDTO TipoResponsavelMandatarioDTO) throws NegocioException;


}


// Fim do arquivo: TipoServicoReguladoDescricaoService.java

// Arquivo: TipoServicoReguladoDescricaoServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\TipoServicoReguladoDescricaoServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDescricaoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoDTO;
import org.springframework.stereotype.Service;

@Service
public class TipoServicoReguladoDescricaoServiceImpl implements TipoServicoReguladoDescricaoService {




	@Override
	public void criarMandatario(TipoServicoReguladoDocumentoDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}

	@Override
	public void atualizarMandatario(TipoServicoReguladoDocumentoDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}
}


// Fim do arquivo: TipoServicoReguladoDescricaoServiceImpl.java

// Arquivo: TipoSubServicosReguladosService.java
// Caminho: \br\gov\ana\sarsb\service\TipoSubServicosReguladosService.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoFiltroDTO;

import java.util.List;

import java.util.List;

public interface TipoSubServicosReguladosService {




	void criarMandatario(TipoServicoReguladoDocumentoDTO TipoServicoReguladoDocumentoDTO) throws NegocioException;

	void atualizarMandatario(TipoServicoReguladoDocumentoDTO TipoServicoReguladoDocumentoDTO) throws NegocioException;


	void atualizarPrestador(TipoServicoReguladoDocumentoDTO TipoServicoReguladoDocumentoDTO) throws NegocioException;

    List<TipoServicoReguladoDocumentoDTO> listarPorEriMunicipioSluSmrsu(Long idAgr, String uf, String mun, Long ano);
	List<TipoServicoReguladoDocumentoDTO> retornaAtivadadesCadastradas(Long agenciaReguladoraId, Long anoColeta, String uf, String municipio);
	List<TipoServicoReguladoDocumentoDTO> buscarAtividadesPorUFMunicipioCpf(TipoServicoReguladoDocumentoFiltroDTO tipoServicoReguladoDocumentoFiltroDTO);

}


// Fim do arquivo: TipoSubServicosReguladosService.java

// Arquivo: TipoSubServicosReguladosServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\TipoSubServicosReguladosServiceImpl.java

package br.gov.ana.sarsb.service;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoDTO;
import br.gov.ana.sarsb.model.dto.agenciareguladora.TipoServicoReguladoDocumentoFiltroDTO;
import br.gov.ana.sarsb.model.entity.TipoServicoReguladoDocumento;
import br.gov.ana.sarsb.repository.TipoServicoReguladoDocumentoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

@Service
public class TipoSubServicosReguladosServiceImpl implements TipoSubServicosReguladosService {

	@Autowired
	TipoServicoReguladoDocumentoRepository tipoServicoReguladoDocumentoRepository;


	@Override
	public void criarMandatario(TipoServicoReguladoDocumentoDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}

	@Override
	public void atualizarMandatario(TipoServicoReguladoDocumentoDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}


	@Override
	public void atualizarPrestador(TipoServicoReguladoDocumentoDTO TipoResponsavelMandatarioDTO) throws NegocioException {

	}

	@Override
	public List<TipoServicoReguladoDocumentoDTO> listarPorEriMunicipioSluSmrsu(Long idAgr, String uf, String mun, Long ano) {
		List<TipoServicoReguladoDocumento> tipoServicoReguladoDocumentoList = tipoServicoReguladoDocumentoRepository.listarPorEriMunicipioSluSmrsu(idAgr, uf, mun.toUpperCase());
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

		List<TipoServicoReguladoDocumentoDTO> tipoServicoReguladoDocumentoDTOS = montarDto(tipoServicoReguladoDocumentoList);
		List<TipoServicoReguladoDocumentoDTO> tipoServicoReguladoDocumentoDTOsVencido = new ArrayList<>();
		Date anoColeta;

		try {
			anoColeta = dateFormat.parse(ano + "-12-31");

			// Uso de Iterator para permitir a remoção segura
			Iterator<TipoServicoReguladoDocumentoDTO> iterator = tipoServicoReguladoDocumentoDTOS.iterator();

			while (iterator.hasNext()) {
				TipoServicoReguladoDocumentoDTO tipoServicoReguladoDocumentoDTO = iterator.next();

				if (tipoServicoReguladoDocumentoDTO.getDataFimPrestador() != null) {
					LocalDate localDate = tipoServicoReguladoDocumentoDTO.getDataFimPrestador().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

					if (localDate.getYear() != ano && tipoServicoReguladoDocumentoDTO.getDataFimPrestador().compareTo(anoColeta) < 0) {
						tipoServicoReguladoDocumentoDTOsVencido.add(tipoServicoReguladoDocumentoDTO);
						iterator.remove(); // Remoção segura usando o iterator
					}
				}
			}

			// Define a lista de vencidos no último elemento da lista restante
			if (!tipoServicoReguladoDocumentoDTOS.isEmpty()) {
				tipoServicoReguladoDocumentoDTOS.get(tipoServicoReguladoDocumentoDTOS.size() - 1).setVencidos(tipoServicoReguladoDocumentoDTOsVencido);
			}
		} catch (ParseException e) {
			throw new RuntimeException(e);
		}

		return tipoServicoReguladoDocumentoDTOS;
	}


	public List<TipoServicoReguladoDocumentoDTO> retornaAtivadadesCadastradas(Long agenciaReguladoraId, Long anoColeta, String uf, String municipio){
		List<TipoServicoReguladoDocumento> listaAtividades = tipoServicoReguladoDocumentoRepository.buscarAtividadesPor(agenciaReguladoraId,anoColeta,uf,municipio);
		List<TipoServicoReguladoDocumentoDTO> tipoServicoReguladoDocumentoDTOS = montarDto(listaAtividades);
		return tipoServicoReguladoDocumentoDTOS;
	}

	public List<TipoServicoReguladoDocumentoDTO> buscarAtividadesPorUFMunicipioCpf(TipoServicoReguladoDocumentoFiltroDTO tipoServicoReguladoDocumentoFiltroDTO){
		List<TipoServicoReguladoDocumento> listaAtividades = tipoServicoReguladoDocumentoRepository.buscarAtividadesPorUFMunicipioCpf(tipoServicoReguladoDocumentoFiltroDTO);
		List<TipoServicoReguladoDocumentoDTO> tipoServicoReguladoDocumentoDTOS = montarDto(listaAtividades);
		return tipoServicoReguladoDocumentoDTOS;
	}

	private List<TipoServicoReguladoDocumentoDTO> montarDto(List<TipoServicoReguladoDocumento> tipoServicoReguladoDocumentoList){

		List<TipoServicoReguladoDocumentoDTO> tipoServicoReguladoDocumentoDTOS = new ArrayList<>();

		for (TipoServicoReguladoDocumento tipoServicoReguladoDocumento : tipoServicoReguladoDocumentoList) {
			TipoServicoReguladoDocumentoDTO tipoServicoReguladoDocumentoDTO = new TipoServicoReguladoDocumentoDTO();
			tipoServicoReguladoDocumentoDTO.setCodigoEntidade(tipoServicoReguladoDocumento.getCodigoEntidade());
			tipoServicoReguladoDocumentoDTO.setCodigoServico(tipoServicoReguladoDocumento.getCodigoServico());
			tipoServicoReguladoDocumentoDTO.setDatainicioServico(tipoServicoReguladoDocumento.getDatainicioServico());
			tipoServicoReguladoDocumentoDTO.setDataFimServico(tipoServicoReguladoDocumento.getDataFimServico());
			tipoServicoReguladoDocumentoDTO.setDocumentoDelegacao(tipoServicoReguladoDocumento.getDocumentoDelegacao());
			tipoServicoReguladoDocumentoDTO.setCodigoPrestadornovo(tipoServicoReguladoDocumento.getCodigoPrestadornovo());
			tipoServicoReguladoDocumentoDTO.setCodigoMunicipio(tipoServicoReguladoDocumento.getCodigoMunicipio());
			tipoServicoReguladoDocumentoDTO.setNomeMunicipio(tipoServicoReguladoDocumento.getNomeMunicipio());
			tipoServicoReguladoDocumentoDTO.setUfMunicipio(tipoServicoReguladoDocumento.getUfMunicipio());
			tipoServicoReguladoDocumentoDTO.setDescricaoAtividade(tipoServicoReguladoDocumento.getDescricaoAtividade());
			tipoServicoReguladoDocumentoDTO.setCodigoAtribuicao(tipoServicoReguladoDocumento.getCodigoAtribuicao());
			tipoServicoReguladoDocumentoDTO.setOutrasDescricao(tipoServicoReguladoDocumento.getOutrasDescricao());
			tipoServicoReguladoDocumentoDTO.setDataInicioPrestador(tipoServicoReguladoDocumento.getDataInicioPrestador());
			tipoServicoReguladoDocumentoDTO.setDataFimPrestador(tipoServicoReguladoDocumento.getDataFimPrestador());
			tipoServicoReguladoDocumentoDTO.setServicoExcluido(tipoServicoReguladoDocumento.getServicoExcluido());
			tipoServicoReguladoDocumentoDTO.setId(tipoServicoReguladoDocumento.getId());
			if(tipoServicoReguladoDocumento.getPrestador() != null){
				tipoServicoReguladoDocumentoDTO.setPrestador(tipoServicoReguladoDocumento.getPrestador());
			}

			if(tipoServicoReguladoDocumento.getTipoServicoRegulado() != null){
				tipoServicoReguladoDocumentoDTO.setTipoServicoRegulado(tipoServicoReguladoDocumento.getTipoServicoRegulado());
			}

			tipoServicoReguladoDocumentoDTOS.add(tipoServicoReguladoDocumentoDTO);

		}

		return tipoServicoReguladoDocumentoDTOS;

	}
}


// Fim do arquivo: TipoSubServicosReguladosServiceImpl.java

============================================================

PACOTE 33 - [Service] br.gov.ana.sarsb.service.integration
------------------------------------------------------------
Arquivos: 1 | Métodos: 4

// Arquivo: AbstractService.java
// Caminho: \br\gov\ana\sarsb\service\integration\AbstractService.java

package br.gov.ana.sarsb.service.integration;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;

import br.gov.ana.sarsb.exception.ServicoRemotoException;
import br.gov.ana.sarsb.util.HttpUtils;
import lombok.extern.log4j.Log4j2;

@Log4j2
public abstract class AbstractService {

	public String httpQuery(String endereco, String urlParameters) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
		HttpUtils client = new HttpUtils();
		return client.httpGET(endereco, urlParameters, null, null);
	}

	public String httpQuery(String endereco, String urlParameters, String headerParameter, String encoding)
			throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
		HttpUtils client = new HttpUtils();
		return client.httpGET(endereco, urlParameters, headerParameter, encoding);
	}

	public String httpSOAP(String wsURL, String wsNamespace, String wsServiceName, String wsEnvelope)
			throws ServicoRemotoException {

		try {

			String responseString = "";
			String outputString = "";
			String SOAPAction = wsNamespace + wsServiceName;

			URL url = new URL(wsURL);
			URLConnection connection = url.openConnection();
			HttpURLConnection httpConn = (HttpURLConnection) connection;

			ByteArrayOutputStream bout = new ByteArrayOutputStream();
			String xmlInput = wsEnvelope;
			byte[] buffer = new byte[xmlInput.length()];
			buffer = xmlInput.getBytes();
			bout.write(buffer);
			byte[] b = bout.toByteArray();

			httpConn.setRequestProperty("Content-Length", String.valueOf(b.length));
			httpConn.setRequestProperty("Content-Type", "text/xml; charset=utf-8");
			httpConn.setRequestProperty("SOAPAction", SOAPAction);
			httpConn.setRequestMethod("POST");
			httpConn.setDoOutput(true);
			httpConn.setDoInput(true);

			OutputStream out = httpConn.getOutputStream();
			out.write(b);
			out.close();

			InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
			BufferedReader in = new BufferedReader(isr);

			while ((responseString = in.readLine()) != null) {
				outputString = outputString + responseString;
			}

			httpConn.disconnect();

			return outputString;

		} catch (IOException ex) {
			log.error(ex);
			throw new ServicoRemotoException(ex);
		}
	}

	public String tratarJSON(String json) {
		if (json == null) {
			return json;
		}
		String jsont = json.replaceAll("\\\"\\{", "{").replaceAll("\\}\\\"", "}").replaceAll("\\\\\\\"", "\\\"");
		jsont = jsont.replace("[", "").replace("]", "");
		return jsont;
	}

}


// Fim do arquivo: AbstractService.java

============================================================

PACOTE 34 - [Service] br.gov.ana.sarsb.service.integration.correios
------------------------------------------------------------
Arquivos: 3 | Métodos: 0

// Arquivo: CEP.java
// Caminho: \br\gov\ana\sarsb\service\integration\correios\CEP.java

package br.gov.ana.sarsb.service.integration.correios;

import java.io.Serializable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@AllArgsConstructor
@NoArgsConstructor
public class CEP implements Serializable {

    private static final long serialVersionUID = -3046561560949012411L;

    @Getter @Setter
    @JsonProperty("cep")
    private String cep;

    @Getter @Setter
    @JsonProperty("bairro")
    private String bairro;

    @Getter @Setter
    @JsonProperty("cidade")
    private String cidade;

    @Getter @Setter
    @JsonProperty("uf")
    private String uf;

    @Getter @Setter
    @JsonProperty("ibgeMunicipio")
    private String ibgeMunicipio;

    @Getter @Setter
    private String numero;

    @Getter @Setter
    private String cliente;

    @Getter @Setter
    @JsonProperty("complemento")
    private String complemento;

    @Getter @Setter
    @JsonProperty("tipoCep")
    private String tipoCep;

    @Getter @Setter
    @JsonProperty("subTipoCep")
    private String subTipoCep;

    @Getter @Setter
    @JsonProperty("endereco")
    private String endereco;

    @Getter @Setter
    @JsonProperty("codigoIBGE")
    private String codigoIBGE;

    @Getter @Setter
    @JsonProperty("data_consulta")
    private String data_consulta;

}


// Fim do arquivo: CEP.java

// Arquivo: CorreiosService.java
// Caminho: \br\gov\ana\sarsb\service\integration\correios\CorreiosService.java

package br.gov.ana.sarsb.service.integration.correios;
import br.gov.ana.sarsb.exception.ServicoRemotoException;
public interface CorreiosService {

	CEP consultarCep(String cep) throws ServicoRemotoException;

}


// Fim do arquivo: CorreiosService.java

// Arquivo: DNEWrapper.java
// Caminho: \br\gov\ana\sarsb\service\integration\correios\DNEWrapper.java

package br.gov.ana.sarsb.service.integration.correios;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@JsonIgnoreProperties(ignoreUnknown = true)
@AllArgsConstructor
@NoArgsConstructor
public class DNEWrapper {

    @Getter @Setter
    private String termoPesquisa;

    @Getter @Setter
    private CEP[] data;

}


// Fim do arquivo: DNEWrapper.java

============================================================

PACOTE 35 - [Service] br.gov.ana.sarsb.service.integration.correios.impl
------------------------------------------------------------
Arquivos: 1 | Métodos: 1

// Arquivo: CorreiosServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\integration\correios\impl\CorreiosServiceImpl.java

package br.gov.ana.sarsb.service.integration.correios.impl;

import java.io.IOException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import br.gov.ana.sarsb.exception.ServicoRemotoException;
import br.gov.ana.sarsb.service.integration.AbstractService;
import br.gov.ana.sarsb.service.integration.correios.CEP;
import br.gov.ana.sarsb.service.integration.correios.CorreiosService;
import br.gov.ana.sarsb.service.integration.correios.DNEWrapper;

@Service
public class CorreiosServiceImpl extends AbstractService implements CorreiosService {

	@Value("${services.consulta-cep}")
	private String urlCep;

	@Override
	public CEP consultarCep(String cep) throws ServicoRemotoException {
		try {
			String response = httpQuery(urlCep + cep, "", null, "UTF-8");
			return new ObjectMapper().readValue(response, CEP.class);

		} catch (IOException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {
			throw new ServicoRemotoException("Erro ao consultar CEP!");
		}
	}
	
}


// Fim do arquivo: CorreiosServiceImpl.java

============================================================

PACOTE 36 - [Service] br.gov.ana.sarsb.service.integration.infoconv
------------------------------------------------------------
Arquivos: 2 | Métodos: 0

// Arquivo: DadosReceita.java
// Caminho: \br\gov\ana\sarsb\service\integration\infoconv\DadosReceita.java

package br.gov.ana.sarsb.service.integration.infoconv;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.Setter;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DadosReceita {
	
	@JsonProperty("CPF")
    @Getter @Setter
    private String cpf;

	@JsonProperty("Nome")
    @Getter @Setter
    private String nome;

	@JsonProperty("ResidenteExterior")
    @Getter @Setter
    private String residenteExterior;

	@JsonProperty("NomeMae")
    @Getter @Setter
    private String nomeMae;

	@JsonProperty("DataAtualizacao")
    @Getter @Setter
    private String dataAtualizacao;

	@JsonProperty("CNPJ")
    @Getter @Setter
    private String cnpj;

	@JsonProperty("Estabelecimento")
    @Getter @Setter
    private String estabelecimento;

	@JsonProperty("NomeEmpresarial")
    @Getter @Setter
    private String nomeEmpresarial;

	@JsonProperty("NomeFantasia")
    @Getter @Setter
    private String nomeFantasia;

	@JsonProperty("CidadeExterior")
    @Getter @Setter
    private String cidadeExterior;

	@JsonProperty("CodigoPais")
    @Getter @Setter
    private String codigoPais;

	@JsonProperty("NomePais")
    @Getter @Setter
    private String nomePais;

	@JsonProperty("SituacaoCadastral")
    @Getter @Setter
    private String situacaoCadastral;

	@JsonProperty("ultimaAtualizacao")
    @Getter @Setter
  private String  ultimaAtualizacao;


	@JsonProperty("Erro")
    @Getter @Setter
    private String erro;


    public DadosReceita() throws ParseException {
    }
}


// Fim do arquivo: DadosReceita.java

// Arquivo: InfoconvService.java
// Caminho: \br\gov\ana\sarsb\service\integration\infoconv\InfoconvService.java

package br.gov.ana.sarsb.service.integration.infoconv;

public interface InfoconvService {
	
	DadosReceita pesquisarCpfCnpj(String cpfCnpj, boolean forcarBuscaReceita);

}


// Fim do arquivo: InfoconvService.java

============================================================

PACOTE 37 - [Service] br.gov.ana.sarsb.service.integration.infoconv.impl
------------------------------------------------------------
Arquivos: 1 | Métodos: 3

// Arquivo: InfoconvServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\integration\infoconv\impl\InfoconvServiceImpl.java

package br.gov.ana.sarsb.service.integration.infoconv.impl;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.gov.ana.sarsb.service.integration.infoconv.DadosReceita;
import br.gov.ana.sarsb.service.integration.infoconv.InfoconvService;

@Service
public class InfoconvServiceImpl implements InfoconvService {

    @Value("${services.infoconv}")
    private String urlInfoconv;
	
	@Override
	public DadosReceita pesquisarCpfCnpj(String cpfCnpj, boolean forcarBuscaReceita) {
		cpfCnpj = cpfCnpj.replaceAll("\\D", "");
		return StringUtils.length(cpfCnpj) == 11 ? pesquisarCpf(cpfCnpj, forcarBuscaReceita) : pesquisarCnpj(cpfCnpj, forcarBuscaReceita);
	}
	
	private DadosReceita pesquisarCpf(String cpf, boolean forcarBuscaReceita) {
		try {
			String retorno = new RestTemplate().getForObject(urlInfoconv + "/cpf?cpf=" + cpf + "&forcarBuscaDiretoNaReceita=" + forcarBuscaReceita, String.class);
			return new ObjectMapper().readValue(retorno, DadosReceita.class);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private DadosReceita pesquisarCnpj(String cnpj, boolean forcarBuscaReceita) {
		try {
			String retorno = new RestTemplate().getForObject(urlInfoconv + "/cnpj?cnpj=" + cnpj + "&forcarBuscaDiretoNaReceita=" + forcarBuscaReceita, String.class);
			return new ObjectMapper().readValue(retorno, DadosReceita.class);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;		
	}

}


// Fim do arquivo: InfoconvServiceImpl.java

============================================================

PACOTE 38 - [Service] br.gov.ana.sarsb.service.integration.ows.municipio
------------------------------------------------------------
Arquivos: 3 | Métodos: 0

// Arquivo: Municipio.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\municipio\Municipio.java

package br.gov.ana.sarsb.service.integration.ows.municipio;

import java.io.Serializable;

import com.fasterxml.jackson.annotation.JsonProperty;

import br.gov.ana.sarsb.service.integration.ows.uf.UF;
import lombok.Getter;
import lombok.Setter;

public class Municipio implements Serializable {

    private static final long serialVersionUID = -5196041559794556354L;

    @JsonProperty("mun_cd")
    @Getter @Setter
    private Long id;

    @JsonProperty("mun_nm")
    @Getter @Setter
    private String nome;

    @JsonProperty("mun_nu_ibge7_municipio")
    @Getter @Setter
    private String codigoIBGE;

    @JsonProperty("mun_sg_uf")
    @Getter @Setter
    private String siglaUF;

    @JsonProperty("mun_ve")
    @Getter @Setter
    private String versao;

    @JsonProperty("mun_sede_latitude")
    @Getter @Setter
    private String latitudeSede;

    @JsonProperty("mun_sede_longitude")
    @Getter @Setter
    private String longitudeSede;

    @JsonProperty("mun_ufd_cd")
    @Getter @Setter
    private Long codigoUF;

    @JsonProperty("mun_nu_populacao")
    @Getter @Setter
    private Long populacao;

    @Getter @Setter
    private UF uf;

    public Municipio() {}

    public Municipio(Long id, String ibge, String nome, Long idUF) {
        this.id = id;
        this.codigoIBGE = ibge;
        this.nome = nome;
        this.codigoUF = idUF;
    }

}


// Fim do arquivo: Municipio.java

// Arquivo: MunicipioService.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\municipio\MunicipioService.java

package br.gov.ana.sarsb.service.integration.ows.municipio;

import java.util.List;

public interface MunicipioService {

	List<Municipio> pesquisarMunicipioPorUF(Long idUF);

	Municipio pesquisarMunicipioPorIBGE(String codigoIBGE);

	Municipio pesquisarMunicipio(Long idMunicipio);
	
	Municipio pesquisarMunicipioPorNome(String nome);

	Municipio pesquisarMunicipioPorNomeUf(String nome, String uf);



}


// Fim do arquivo: MunicipioService.java

// Arquivo: MunicipioWrapper.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\municipio\MunicipioWrapper.java

package br.gov.ana.sarsb.service.integration.ows.municipio;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.Setter;

@JsonIgnoreProperties(ignoreUnknown = true)
public class MunicipioWrapper {

    @JsonProperty("items")
    @Getter @Setter
    private Municipio[] municipio;

}


// Fim do arquivo: MunicipioWrapper.java

============================================================

PACOTE 39 - [Service] br.gov.ana.sarsb.service.integration.ows.municipio.impl
------------------------------------------------------------
Arquivos: 1 | Métodos: 4

// Arquivo: MunicipioServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\municipio\impl\MunicipioServiceImpl.java

package br.gov.ana.sarsb.service.integration.ows.municipio.impl;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.gov.ana.sarsb.service.integration.ows.municipio.Municipio;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioService;
import br.gov.ana.sarsb.service.integration.ows.municipio.MunicipioWrapper;
import br.gov.ana.sarsb.service.integration.ows.uf.UF;

@Service
public class MunicipioServiceImpl implements MunicipioService {

    @Value("${services.ows-snirhig}")
    private String urlOws;
	
	@Override
	public List<Municipio> pesquisarMunicipioPorUF(Long idUF) {
		return carregarMunicipios("mun_ufd_cd=" + idUF);
	}

	@Override
	public Municipio pesquisarMunicipioPorIBGE(String codigoIBGE) {
		List<Municipio> saida = carregarMunicipios("mun_nu_ibge7_municipio=" + codigoIBGE);
        if (saida != null && !saida.isEmpty()) {
            return saida.get(0);
        }
        return null;
	}

	@Override
	public Municipio pesquisarMunicipio(Long idMunicipio) {
		List<Municipio> saida = carregarMunicipios("mun_cd=" + idMunicipio);
        if (saida != null && !saida.isEmpty()) {
            return saida.get(0);
        }
        return null;
	}

	@Override
	public Municipio pesquisarMunicipioPorNome(String nome) {
		List<Municipio> saida = carregarMunicipios("mun_nm=" + nome);
        if (saida != null && !saida.isEmpty()) {
            return saida.get(0);
        }
        return null;
	}

    public Municipio pesquisarMunicipioPorNomeUf(String nome, String uf) {
        String filtro = "mun_nm=" + nome;

        if (uf != null && !uf.isEmpty()) {
            filtro += "&mun_sg_uf=" + uf;
        }

        List<Municipio> saida = carregarMunicipios(filtro);

        if (saida != null && !saida.isEmpty()) {
            return saida.get(0);
        }
        return null;
    }
	
	private List<Municipio> carregarMunicipios(String where) {
        try {

    		String response = new RestTemplate().getForObject(urlOws + "municipio?" + where, String.class);
    		List<Municipio> listaMunicipios = Arrays.asList(new ObjectMapper().readValue(response, MunicipioWrapper.class).getMunicipio());

            for (Municipio a : listaMunicipios) {
                UF uf = new UF();
                uf.setId(a.getCodigoUF());
                uf.setSigla(a.getSiglaUF());
                a.setUf(uf);
            }

            return listaMunicipios;
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;
    }


    public List<Municipio> pesquisarMunicipioPorId(Long id) {
        return carregarMunicipios("mun_cd=" + id);
    }



}


// Fim do arquivo: MunicipioServiceImpl.java

============================================================

PACOTE 40 - [Service] br.gov.ana.sarsb.service.integration.ows.uf
------------------------------------------------------------
Arquivos: 3 | Métodos: 0

// Arquivo: UF.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\uf\UF.java

package br.gov.ana.sarsb.service.integration.ows.uf;

import java.io.Serializable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.Setter;

public class UF implements Serializable{

    private static final long serialVersionUID = 8028868349991946360L;

    @JsonProperty("ufd_cd")
    @Getter @Setter
    private Long id;

    @JsonProperty("ufd_nu_ibge2_uf")
    @Getter @Setter
    private String codigoIBGE;

    @JsonProperty("ufd_nm")
    @Getter @Setter
    private String nome;

    @JsonProperty("ufd_sg")
    @Getter @Setter
    private String sigla;

    @JsonProperty("ufd_ve")
    @Getter @Setter
    private String mumVersao;

    public UF() {}

    public UF(Long id, String sigla, String nome) {
        this.id = id;
        this.codigoIBGE = this.id.toString();
        this.sigla = sigla;
        this.nome = nome;
    }

}


// Fim do arquivo: UF.java

// Arquivo: UFService.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\uf\UFService.java

package br.gov.ana.sarsb.service.integration.ows.uf;

import java.util.List;

public interface UFService {

	List<UF> pesquisarUF();

	UF pesquisarUF(Long id);

	UF pesquisarUF(String sigla);

}


// Fim do arquivo: UFService.java

// Arquivo: UFWrapper.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\uf\UFWrapper.java

package br.gov.ana.sarsb.service.integration.ows.uf;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.Setter;

@JsonIgnoreProperties(ignoreUnknown = true)
public class UFWrapper {

	@JsonProperty("items")
    @Getter @Setter
    private UF[] uf;

}


// Fim do arquivo: UFWrapper.java

============================================================

PACOTE 41 - [Service] br.gov.ana.sarsb.service.integration.ows.uf.impl
------------------------------------------------------------
Arquivos: 1 | Métodos: 2

// Arquivo: UFServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\integration\ows\uf\impl\UFServiceImpl.java

package br.gov.ana.sarsb.service.integration.ows.uf.impl;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.gov.ana.sarsb.service.integration.ows.uf.UF;
import br.gov.ana.sarsb.service.integration.ows.uf.UFService;
import br.gov.ana.sarsb.service.integration.ows.uf.UFWrapper;

@Service
public class UFServiceImpl implements UFService {
	
    @Value("${services.ows-snirhig}")
    private String urlOws;

	@Override
	public List<UF> pesquisarUF() {
		return carregarUf("limit=1000");
	}

	@Override
	public UF pesquisarUF(Long id) {
		List<UF> saida = carregarUf("ufd_cd=" + id);
        if (saida != null && !saida.isEmpty()) {
            return saida.get(0);
        }
        return null;
	}

	@Override
	public UF pesquisarUF(String sigla) {
		List<UF> saida = carregarUf("ufd_sg=" + sigla);
        if (saida != null && !saida.isEmpty()) {
            return saida.get(0);
        }
        return null;
	}
	
	private List<UF> carregarUf(String where) {
		try {
			String response = new RestTemplate().getForObject(urlOws + "uf?" + where, String.class);
			return Arrays.asList(new ObjectMapper().readValue(response, UFWrapper.class).getUf());
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return null;
	}
}


// Fim do arquivo: UFServiceImpl.java

============================================================

PACOTE 42 - [Service] br.gov.ana.sarsb.service.integration.sso
------------------------------------------------------------
Arquivos: 1 | Métodos: 0

// Arquivo: SegurancaIntegrationService.java
// Caminho: \br\gov\ana\sarsb\service\integration\sso\SegurancaIntegrationService.java

package br.gov.ana.sarsb.service.integration.sso;

import br.gov.ana.sarsb.config.security.dto.ProfileDTO;
import br.gov.ana.sarsb.config.security.dto.TokenDTO;
import br.gov.ana.sarsb.exception.ServicoRemotoException;

public interface SegurancaIntegrationService {    

	TokenDTO tokenpassword(String grantType, String username, String password, String scope) 
			throws ServicoRemotoException;
	
	ProfileDTO recuperarProfile(String accessToken)
			throws ServicoRemotoException;
	
	String cadastrarUsuario(String nome, String nomeExibicao, String identificador, String email)
			throws ServicoRemotoException;
	
	String adicaoEmGrupoSemToken(String identificador, String grupoAcesso) throws ServicoRemotoException;

	String alterarUsuarioSemToken(long usuarioId, String nome, String nomeExibicao,
								  String identificador, String email, boolean ativo)
			throws ServicoRemotoException;

	String esqueciSenha(String identificador, String email)
			throws ServicoRemotoException;

	ProfileDTO consultarProfileUsuarioSemToken(Long usuarioId, String identificador,
											   String email, String login) throws ServicoRemotoException;
	
	ProfileDTO consultarUsuarioSemToken(String identificador) throws ServicoRemotoException;
}


// Fim do arquivo: SegurancaIntegrationService.java

============================================================

PACOTE 43 - [Service] br.gov.ana.sarsb.service.integration.sso.impl
------------------------------------------------------------
Arquivos: 1 | Métodos: 8

// Arquivo: SegurancaIntegrationServiceImpl.java
// Caminho: \br\gov\ana\sarsb\service\integration\sso\impl\SegurancaIntegrationServiceImpl.java

package br.gov.ana.sarsb.service.integration.sso.impl;

import java.io.IOException;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.config.security.dto.ProfileDTO;
import br.gov.ana.sarsb.config.security.dto.TokenDTO;
import br.gov.ana.sarsb.exception.ServicoRemotoException;
import br.gov.ana.sarsb.model.enums.Configuracoes;
import br.gov.ana.sarsb.service.integration.sso.SegurancaIntegrationService;
import br.gov.ana.sarsb.util.HttpUtils;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
public class SegurancaIntegrationServiceImpl implements SegurancaIntegrationService {

    public static final String SCOPE_PROFILE = "PROFILE";
    public static final String SCOPE_PERMISSOES = "PERMISSOES";
    public static final String SCOPE_RESTRICOES = "RESTRICOES";

    public static final String REQUEST_IP = "ip";

    public static final String USER_NOME = "nome";
    public static final String USER_NOME_EXIBICAO = "nome_exibicao";
    public static final String USER_IDENTIFICADOR = "identificador";
    public static final String VALIDADE_TOKEN = "prazo_validade";
    public static final String USER_LOGIN = "login";
    public static final String USER_EMAIL = "email";
    public static final String USER_ID = "usuario_id";
    public static final String USER_ATIVO = "ativo";

    public static final String GROUP_NAME = "nome_grupo";

    private static final String CLIENT_ID_PARAM = "client_id";
    private static final String CLIENT_SECRET_PARAM = "client_secret";
    private static final String GRANT_TYPE_PARAM = "grant_type";
    private static final String USERNAME_PARAM = "username";
    private static final String PASSWORD_PARAM = "password";
    private static final String SCOPE_PARAM = "scope";

    private ConfigCache cc = ConfigCache.getInstance();
    
    /**
     * Solicita um token ao serviço de segurança a partir do usuário e senha.<br/>
     * <p>
     * A chamada deverá ser feita a partir de uma requisição HTTP/POST passando
     * os seguintes parâmetros:
     * http://<servidor>:<porta>/sso/rest/token/tokenpassword Parametros
     * necessários: grant_type = "password", username = nome de usuario password
     * = password do usuario scope = PROFILE/RESTRICAO client_id = identificação
     * da aplicação cliente. Deve ser o mesmo informado na solicitação do código
     * de autorização, client_secret = senha da aplicação cliente recebida por
     * email no momento do cadastramento do módulo. Deve ser correspondente ao
     * client_id informado
     *
     * @param clientId     identificação da aplicação cliente, recebido por e-mail no
     *                     momento do cadastramento do módulo.
     * @param clientSecret client secret do módulo.
     * @param grant_type   obrigatoriamente password
     * @param username     nome do usuario
     * @param password     senha do usuario
     * @param scope        PROFILE/RESTRICAO
     * @throws Exception casos previstos de exceção:
     */
    public TokenDTO tokenpassword(String grantType, String username, String password, String scope)
            throws ServicoRemotoException {
        try {

        	String clientId = cc.get(Configuracoes.OAUTH_CLIENT_ID.toString());
    		String clientSecret = cc.get(Configuracoes.OAUTH_CLIENT_SECRET.toString());
            String endpoint = cc.get(Configuracoes.OAUTH_SERVER.toString()) + "token/tokenpassword";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

            MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
            params.add(CLIENT_ID_PARAM, clientId);
            params.add(CLIENT_SECRET_PARAM, clientSecret);
            params.add(GRANT_TYPE_PARAM, grantType);
            params.add(SCOPE_PARAM, scope);
            params.add(USERNAME_PARAM, username);
            params.add(PASSWORD_PARAM, password);

            HttpEntity<MultiValueMap<String, String>> request =
                    new HttpEntity<>(params, headers);

            return new ObjectMapper().readValue(new RestTemplate()
                    .postForObject(endpoint, request, String.class), TokenDTO.class);
        } catch (ServicoRemotoException | JsonProcessingException | RestClientException ex) {
            return null;
        }

    }

	/**
     * Solicita o perfil do usuário associado ao token.<br/>
     * <p>
     * A chamada deverá ser feita a partir de uma requisição HTTP/POST passando
     * os seguintes parâmetros: http://<servidor>:<porta>/sso/rest/profile
     * Parametros necessários: access_token = token de acesso, client_secret =
     * senha da aplicação cliente recebida por email no momento do cadastramento
     * do módulo. Deve ser correspondente ao client_id relacionado ao
     * access_token.
     *
     * @param accessToken  token de acesso
     * @param clientSecret client secret do módulo associado ao token.
     * @throws Exception casos previstos de exceção: parametros não informados (todos
     *                   são obrigatórios), accessToken não encontrado, accessToken
     *                   fora da validade, client id (do módulo associado ao token) e
     *                   client secret inválidos,
     */
    public ProfileDTO recuperarProfile(String accessToken)
            throws ServicoRemotoException {
        try {
        	String clientSecret = cc.get(Configuracoes.OAUTH_CLIENT_SECRET.toString());
            String endpoint = cc.get(Configuracoes.OAUTH_SERVER.toString()) + "profile";
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.add(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken);

            MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
            params.add(CLIENT_SECRET_PARAM, clientSecret);

            HttpEntity<MultiValueMap<String, String>> request =
                    new HttpEntity<>(params, headers);

            return new ObjectMapper().readValue(new RestTemplate()
                    .postForObject(endpoint, request, String.class), ProfileDTO.class);
        } catch (IOException ex) {
            throw new ServicoRemotoException(ex);
        }
    }

    public String cadastrarUsuario(String nome, String nomeExibicao, String identificador, String email)
            throws ServicoRemotoException {
        try {
        	
        	String clientId = cc.get(Configuracoes.OAUTH_CLIENT_ID.toString());
    		String clientSecret = cc.get(Configuracoes.OAUTH_CLIENT_SECRET.toString());
    		
            String params = CLIENT_ID_PARAM + "=" + clientId;
            params += "&" + CLIENT_SECRET_PARAM + "=" + clientSecret;
            params += "&"
                    + USER_NOME
                    + "="
                    + nome.replaceAll(Configuracoes.VALUE_BINARIO_E.toString(),
                    Configuracoes.BINARIO_E.toString());
            params += "&"
                    + USER_NOME_EXIBICAO
                    + "="
                    + nomeExibicao.replaceAll(
                    Configuracoes.VALUE_BINARIO_E.toString(),
                    Configuracoes.BINARIO_E.toString());
            params += "&" + USER_IDENTIFICADOR + "=" + identificador;
            params += "&" + USER_EMAIL + "=" + email;

            return new HttpUtils().httpPOST(cc.get(Configuracoes.OAUTH_SERVER.toString()) + "user/add", params);

        } catch (IOException ex) {
            log.error("ERRO: ", ex);
            throw new ServicoRemotoException("Erro ao consumir serviço do Segurança 2", ex);
        }
    }

    public String adicaoEmGrupoSemToken(String identificador, String grupoAcesso)
            throws ServicoRemotoException {
        try {
        	String clientId = cc.get(Configuracoes.OAUTH_CLIENT_ID.toString());
    		String clientSecret = cc.get(Configuracoes.OAUTH_CLIENT_SECRET.toString());
            
            String params = CLIENT_ID_PARAM + "=" + clientId;
            params += "&" + CLIENT_SECRET_PARAM + "=" + clientSecret;
            params += "&" + USER_IDENTIFICADOR + "=" + identificador;
            params += "&" + GROUP_NAME + "=" + grupoAcesso;

            return new HttpUtils().httpPOST(cc.get(Configuracoes.OAUTH_SERVER.toString()) + "group/adicaoSemToken", params);
        } catch (IOException ex) {
            log.error("ERRO: ", ex);
            throw new ServicoRemotoException("Erro ao consumir serviço do Segurança 2", ex);
        }
    }

    public String alterarUsuarioSemToken(long usuarioId, String nome, String nomeExibicao,
                                         String identificador, String email, boolean ativo)
            throws ServicoRemotoException {
        try {
        	String clientId = cc.get(Configuracoes.OAUTH_CLIENT_ID.toString());
    		String clientSecret = cc.get(Configuracoes.OAUTH_CLIENT_SECRET.toString());
            String params = CLIENT_ID_PARAM + "=" + clientId;
            params += "&" + CLIENT_SECRET_PARAM + "=" + clientSecret;
            params += "&" + USER_ID + "=" + usuarioId;
            params += "&" + USER_NOME + "=" +
                    nome.replaceAll(Configuracoes.VALUE_BINARIO_E.toString(), Configuracoes.BINARIO_E.toString());
            params += "&" + USER_NOME_EXIBICAO + "=" +
                    nomeExibicao.replaceAll(Configuracoes.VALUE_BINARIO_E.toString(), Configuracoes.BINARIO_E.toString());
            params += "&" + USER_IDENTIFICADOR + "=" + identificador;
            params += "&" + USER_EMAIL + "=" + email;
            params += "&" + USER_ATIVO + "=" + (ativo ? "1" : "0");

            return new HttpUtils().httpPOST(cc.get(Configuracoes.OAUTH_SERVER.toString()) + "user/updateSemToken", params);
        } catch (IOException ex) {
            log.error("ERRO: ", ex);
            throw new ServicoRemotoException("Erro ao consumir serviço do Segurança 2", ex);
        }
    }

    public String esqueciSenha(String identificador, String email)
            throws ServicoRemotoException {
        try {
            String params = USER_IDENTIFICADOR + "=" + identificador;
            params += "&" + USER_EMAIL + "=" + email;

            return new HttpUtils().httpPOST(cc.get(Configuracoes.OAUTH_SERVER.toString()) + "password/esqueciSenha", params);
        } catch (IOException ex) {
            log.error("ERRO: ", ex);
            throw new ServicoRemotoException("Erro ao consumir serviço do Segurança 2", ex);
        }
    }

    public ProfileDTO consultarProfileUsuarioSemToken(Long usuarioId, String identificador,
                                               String email, String login) throws ServicoRemotoException {
        try {
        	
        	String clientId = cc.get(Configuracoes.OAUTH_CLIENT_ID.toString());
    		String clientSecret = cc.get(Configuracoes.OAUTH_CLIENT_SECRET.toString());
        	String endpoint = cc.get(Configuracoes.OAUTH_SERVER.toString()) + "user/querySemToken";

            String params = CLIENT_ID_PARAM + "=" + clientId;
            params += "&" + CLIENT_SECRET_PARAM + "=" + clientSecret;

            if (usuarioId != null) {
                params += "&" + USER_ID + "=" + usuarioId;
            } else if (identificador != null) {
                params += "&" + USER_IDENTIFICADOR + "=" + identificador;
            } else if (email != null) {
                params += "&" + USER_EMAIL + "=" + email;
            } else if (login != null) {
                params += "&" + USER_LOGIN + "=" + login;
            }
            
            return new ObjectMapper().readValue(new HttpUtils().httpPOST(endpoint, params), ProfileDTO.class);            
        } catch (IOException ex) {
            log.error("ERRO: ", ex);
            throw new ServicoRemotoException("Erro ao consumir serviço do Segurança 2", ex);
        }
    }

	/**
	 * Consulta informações do usuário sem necessidade de token<br/>
	 */
	public ProfileDTO consultarUsuarioSemToken(String identificador) throws ServicoRemotoException {

		String clientId = cc.get(Configuracoes.OAUTH_CLIENT_ID.toString());
		String clientSecret = cc.get(Configuracoes.OAUTH_CLIENT_SECRET.toString());
		try {
			String endpoint = cc.get(Configuracoes.OAUTH_SERVER.toString()) + "user/querySemToken";
			String params = CLIENT_ID_PARAM + "=" + clientId;
			params += "&" + CLIENT_SECRET_PARAM + "=" + clientSecret;
			if (identificador != null) {
				params += "&" + USER_IDENTIFICADOR + "=" + identificador;
			}
			return new ObjectMapper().readValue(new HttpUtils().httpPOST(endpoint, params), ProfileDTO.class); 
		} catch (IOException ex) {
			log.error("ERRO: ", ex);
			return null;
		}
	}
}


// Fim do arquivo: SegurancaIntegrationServiceImpl.java

============================================================

PACOTE 44 - [Util] br.gov.ana.sarsb.util
------------------------------------------------------------
Arquivos: 17 | Métodos: 23

// Arquivo: Constantes.java
// Caminho: \br\gov\ana\sarsb\util\Constantes.java

package br.gov.ana.sarsb.util;

public class Constantes {

	public static final String MAILHOG_DESENVOLVIMENTO = "mailhog-dev.apps.agencia.gov.br";
	public static final String MAILHOG_HOMOLOGACAO = "mailhog-stg.apps.agencia.gov.br";
	public static final int MAILHOG_PORTA = 25;
	public static final String AGENCIA_NACIONAL_DE_AGUAS = "Agência Nacional de Águas";
	public static final int SMTP_PORTA = 25;
	
	public static final String PATH_SMRSU = "SMRSU/";
	public static final String PATH_AGENCIA = "AGENCIA_REGULADORA/";
	public static final String SUB_PATH_ADITIVO_PROTOCOLO = "/ADITIVO-PROTOCOLO/";
	public static final String PATH_MATRIZ_RISCOS = "MATRIZ-RISCOS-AGUA-ESGOTO/";




	
	

	private Constantes() {
	}

}


// Fim do arquivo: Constantes.java

// Arquivo: ConverterUtil.java
// Caminho: \br\gov\ana\sarsb\util\ConverterUtil.java

package br.gov.ana.sarsb.util;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.apache.commons.lang3.StringUtils;

import br.gov.ana.sarsb.exception.NegocioException;

public class ConverterUtil {

    public static final String FORMATO_DATA_DD_MM_AAAA = "dd/MM/yyyy";
    public static final String FORMATO_DATA_DD_MM_AAAA_HH_MM_SS = "dd/MM/yyyy HH:mm:ss";

    protected static final String FORMATO_CPF = "$1.$2.$3-$4";
    protected static final String FORMATO_CNPJ = "$1.$2.$3/$4-$5";
    protected static final String FORMATO_CEP = "$1.$2-$3";
    protected static final String FORMATO_CNARH = "$1.$2.$3/$4";
    protected static final String FORMATO_TELEFONE = "$1-$2";
    protected static final String FORMATO_TELEFONE_DDD = "($1) $2-$3";
    protected static final String FORMATO_TELEFONE_0800 = "$1-$2-$3";
    protected static final String FORMATO_PROCESSOS = "$1.$2/$3-$4";
    protected static final String FORMATO_RESOLUCAO = "$1/$2";
    protected static final String FORMATO_PROCESSOS_SEM_DIG_VER = "$1.$2/$3";
    protected static final String FORMATO_NUMERO_RECIBO = "$1/$2";

    private static final int TAMANHO_TELEFONE8 = 8;
    private static final int TAMANHO_TELEFONE9 = 9;
    private static final int TAMANHO_TELEFONE10 = 10;

    private static final String FORMATO_NUMERICO = "#,###,##0.00";

    private ConverterUtil() {
    }

    public static Date converterStringToDate(String data, String formato) throws NegocioException {
        try {
            if (data != null && formato != null) {
                DateFormat formatter = new SimpleDateFormat(formato);
                return formatter.parse(data);
            }
        } catch (ParseException e) {
            throw new NegocioException(e);
        }

        return null;
    }

    public static String converterDateToString(Date data, String formato) {
        if (data != null && formato != null) {
            SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
            return dateFormat.format(data);
        }

        return null;
    }

    /**
     * Encapsulamento para limpar valores de mascara.
     *
     * @param valor
     *            String para retirar a máscara
     * @return valor sem máscara
     */
    public static String limpaMascara(String valor) {
        return valor.replaceAll("[\\s\\-\\(\\)\\/\\_\\.\\,]", "");
    }
    
    public static String aplicaMascaraNumeroRecibo(String valor) {
    	return aplicaMascaraResolucao(valor);
    }

    public static String aplicaMascaraProcessos(String valor) {
        String valorLimpo = limpaMascara(valor);
        return valorLimpo.replaceAll(PadraoValidacao.PADRAO_PROCESSOS, FORMATO_PROCESSOS);
    }

    public static String aplicaMascaraProcessoSemDigVerificador(String valor) {
        String valorLimpo = limpaMascara(valor);
        return valorLimpo.replaceAll(PadraoValidacao.PADRAO_PROCESSOS_SEM_DIG_VERIFICADOR, FORMATO_PROCESSOS_SEM_DIG_VER);
    }

    public static String aplicaMascaraResolucao(String valor) {
        String valorLimpo = limpaMascara(valor);
        return valorLimpo.replaceAll(PadraoValidacao.PADRAO_RESOLUCAO, FORMATO_RESOLUCAO);
    }

    public static String aplicaMascaraCPF(String valor) {
        String valorLimpo = limpaMascara(valor);
        return valorLimpo.replaceAll(PadraoValidacao.PADRAO_CPF, FORMATO_CPF);
    }

    public static String aplicaMascaraCEP(String valor) {
        String valorLimpo = limpaMascara(valor);
        return valorLimpo.replaceAll(PadraoValidacao.PADRAO_CEP, FORMATO_CEP);
    }

    public static String aplicaMascaraCNPJ(String valor) {
        String valorLimpo = limpaMascara(valor);
        return valorLimpo.replaceAll(PadraoValidacao.PADRAO_CNPJ, FORMATO_CNPJ);
    }

    public static String aplicaMascaraCNARH(String valor) {
        String valorLimpo = limpaMascara(valor);
        return valorLimpo.replaceAll(PadraoValidacao.PADRAO_CNARH, FORMATO_CNARH);
    }

    public static String aplicaMascaraTelefone(String valor) {
        String valorLimpo = limpaMascara(valor);

        String formato = null;
        String padrao = null;

        if (valorLimpo.startsWith("0800")) {
            formato = FORMATO_TELEFONE_0800;
            padrao = PadraoValidacao.PADRAO_TELEFONE0800;

        } else {

            if (valorLimpo.length() < 10) {
                formato = FORMATO_TELEFONE;
            } else {
                formato = FORMATO_TELEFONE_DDD;
            }

            switch (valorLimpo.length()) {
            case TAMANHO_TELEFONE8:
                padrao = PadraoValidacao.PADRAO_TELEFONE8;
                break;
            case TAMANHO_TELEFONE9:
                padrao = PadraoValidacao.PADRAO_TELEFONE9;
                break;
            case TAMANHO_TELEFONE10:
                padrao = PadraoValidacao.PADRAO_TELEFONE10;
                break;
            default:
                padrao = PadraoValidacao.PADRAO_TELEFONE11;
            }
        }
        return valorLimpo.replaceAll(padrao, formato);
    }

    public static String decimalToDMS(double dfDecimal, boolean latitude) {

        String dfHem;
        double dfFrac, dfDegree, dfMinute, dfSecond, dfSec;

        // Get degrees by chopping off at the decimal
        dfDegree = Math.floor(dfDecimal);

        // correction required since floor() is not the same as int()
        if (dfDegree < 0) {
            dfDegree = dfDegree + 1;
        }

        // Get fraction after the decimal
        dfFrac = Math.abs(dfDecimal - dfDegree);

        // Convert this fraction to seconds (without minutes)
        dfSec = dfFrac * 3600;

        // Determine number of whole minutes in the fraction
        dfMinute = Math.floor(dfSec / 60);

        // Put the remainder in seconds
        dfSecond = dfSec - dfMinute * 60;

        // Fix rounoff errors
        if (Math.rint(dfSecond) >= 60D) {
            dfMinute = dfMinute + 1;
            dfSecond = 0;
        }

        if (Math.rint(dfMinute) >= 60D) {
            if (dfDegree < 0) {
                dfDegree = dfDegree - 1;
            } else {
                dfDegree = dfDegree + 1;
            }
            dfMinute = 0;
        }

        dfHem = latitude ? "N" : "E";

        if (StringUtils.contains(String.valueOf(dfDecimal), "-")) {
        	if(dfDegree < 0) {
                dfDegree *= -1;
        	}
            dfHem = latitude ? "S" : "W";
        }

        String out = dfHem + " " + (int) dfDegree + "\u00B0 " + (int) dfMinute + "' ";

        DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.getDefault());
        dfs.setDecimalSeparator('.');
        dfs.setGroupingSeparator('.');
        DecimalFormat df = new DecimalFormat("#0.00", dfs);
        out += df.format(dfSecond) + "''";

        return out;
    }

    /*
     * Conversion DMS to decimal Input: latitude or longitude in the DMS format
     * ( example: W 79° 58' 55.903") Return: latitude or longitude in decimal
     * format hemisphereOUmeridien: W,E,S,N
     */
    public static double dmsToDecimal(String hemisphereOUmeridien, double degres, double minutes, double secondes) {

        double latOrLon = 0;
        double signe = 1.0;

        if ("W".equals(hemisphereOUmeridien) || "S".equals(hemisphereOUmeridien)) {
            signe = -1.0;
        }
        latOrLon = signe * (Math.floor(degres) + Math.floor(minutes) / 60.0 + secondes / 3600.0);

        return latOrLon;
    }

    /**
     * Formata o campo informado
     *
     * @param valor
     * @return <code>valorFormatado</code>
     */
    public static String formatarNumero(String valor) {
        return formatarNumero(valor, FORMATO_NUMERICO);
    }

    /**
     * Formata o campo, sendo informado o padrao
     *
     * @param valor
     * @param formato
     * @return <code>valorFormatado</code>
     */
    public static String formatarNumero(String valor, String formato) {
        return new DecimalFormat(formato).format(valor);
    }

}

// Fim do arquivo: ConverterUtil.java

// Arquivo: EmailUtil.java
// Caminho: \br\gov\ana\sarsb\util\EmailUtil.java

package br.gov.ana.sarsb.util;

import java.io.File;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.MultiPartEmail;

import br.gov.ana.sarsb.config.Ambiente;
import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.exception.NegocioException;

public class EmailUtil {

	public static void enviar(String corpo, String assunto, String remetente,
			String nomeRemetente, File anexo, String... destinatarios)
			throws EmailException, NegocioException {
		validarCampos(corpo, remetente, destinatarios);
		MultiPartEmail email = configurarEmail(corpo, assunto, remetente,
				nomeRemetente, anexo, destinatarios);
		email.send();
	}

	private static void validarCampos(String corpo, String remetente,
			String... destinatarios) throws NegocioException {
		if (StringUtils.isBlank(corpo)) {
			throw new NegocioException("O campo corpo é obrigatório");
		}

		if (StringUtils.isBlank(remetente)) {
			throw new NegocioException("O campo remetente é obrigatório");
		}

		if (destinatarios == null || destinatarios.length <= 0) {
			throw new NegocioException("O campo remetente é obrigatório");
		}
	}

	@SuppressWarnings("static-access")
    private static MultiPartEmail configurarEmail(String corpo, String assunto,
			String remetente, String nomeRemetente, File anexo, String... destinatarios)
			throws EmailException, NegocioException {

		MultiPartEmail email = new MultiPartEmail();
		ConfigCache configCache = ConfigCache.getInstance();

		if (isAmbienteTestes()) {
			if (Ambiente.getInstance().isHomologacao()) {
				email.setHostName(Constantes.MAILHOG_HOMOLOGACAO);
			} else {
				email.setHostName(Constantes.MAILHOG_DESENVOLVIMENTO);
			}
			email.setSmtpPort(Constantes.MAILHOG_PORTA);
		} else {
			email.setHostName(configCache.getInstance().get("email.host"));
	        email.setSmtpPort(Constantes.SMTP_PORTA);
		}
		email.setCharset("UTF-8");
		email.addTo(destinatarios);
		email.setFrom(remetente,
				StringUtils.isNotBlank(nomeRemetente) ? nomeRemetente
						: Constantes.AGENCIA_NACIONAL_DE_AGUAS);
		email.setSubject(assunto);
		email.setMsg(corpo);
		if(anexo != null) {
		    email.attach(anexo);
		}
		return email;
	}

    private static boolean isAmbienteTestes() {
		return  Ambiente.getInstance().isDesenvolvimento()
				|| Ambiente.getInstance().isHomologacao()
				|| Ambiente.getInstance().isLocal();
	}

}



// Fim do arquivo: EmailUtil.java

// Arquivo: FileNameUtil.java
// Caminho: \br\gov\ana\sarsb\util\FileNameUtil.java

package br.gov.ana.sarsb.util;

import java.text.SimpleDateFormat;
import java.util.Date;

public class FileNameUtil {

    private static final String TIMESTAMP_PATTERN = "ddMMyyyy'T'HHmmss";
    private static final int TIMESTAMP_LENGTH = 15; // Comprimento esperado do timestamp

    /**
     * Gera um novo nome para o arquivo substituindo o timestamp pelo valor atual,
     * se o formato original incluir um timestamp. Caso contrário, retorna o nome original.
     *
     * @param originalFileName O nome original do arquivo.
     * @return O novo nome do arquivo, ou o nome original se o formato não incluir timestamp.
     */
    public static String gerarNovoNomeArquivo(String originalFileName) {
        if (originalFileName.length() > TIMESTAMP_LENGTH + 1 && originalFileName.charAt(TIMESTAMP_LENGTH) == '_') {
            String timestampPart = originalFileName.substring(0, TIMESTAMP_LENGTH);
            String nomeArquivoSemTimestamp = originalFileName.substring(TIMESTAMP_LENGTH + 1);

            try {
                new SimpleDateFormat(TIMESTAMP_PATTERN).parse(timestampPart);
            } catch (Exception e) {
                return originalFileName;
            }

            String novoTimestamp = new SimpleDateFormat(TIMESTAMP_PATTERN).format(new Date());

            return novoTimestamp + "_" + nomeArquivoSemTimestamp;
        }

        return originalFileName;
    }
}


// Fim do arquivo: FileNameUtil.java

// Arquivo: HttpUtils.java
// Caminho: \br\gov\ana\sarsb\util\HttpUtils.java

package br.gov.ana.sarsb.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.TrustAllStrategy;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.util.EntityUtils;

import br.gov.ana.sarsb.exception.NegocioException;
import br.gov.ana.sarsb.model.enums.Configuracoes;
import lombok.extern.log4j.Log4j2;

@Log4j2
public class HttpUtils {

	public String httpPOST(String url) throws IOException {
		return httpPOST(url, null);
	}

	public String httpPOST(String url, String urlParameters) throws IOException {
		String defaultHeader = "Content-Type=application/x-www-form-urlencoded&charset=utf-8";
		return httpPOST(url, urlParameters, defaultHeader);
	}

	public String httpPOSTJSON(String url, String json) throws NegocioException {
		long inicioExecucao = System.currentTimeMillis();

		try {
			HttpClient client = HttpClientBuilder.create().build();
			HttpPost post = new HttpPost(url);
			post.setHeader("Accept", "application/json");
			post.setHeader("Content-type", "application/json");
			post.setEntity(new StringEntity(json));
			HttpResponse response = client.execute(post);
			int status = response.getStatusLine().getStatusCode();
			if (isStatusSucesso(status)) {
				return recuperarResponse(response);
			} else {
				throw new NegocioException("Ocorreu um erro com status: "+response.getStatusLine().getStatusCode());
			}
		} catch (UnsupportedEncodingException e) {
			log.info("[POSTJSON] Erros com o encoding.");
			throw new NegocioException(e);
		} catch (ClientProtocolException e) {
			log.info("[POSTJSON] Erros com o protocolo inválido.");
			throw new NegocioException(e);
		} catch (IOException e) {
			log.info("[POSTJSON] Erros com o I/O.");
			throw new NegocioException(e);
		} finally {
			long finalExecucao = System.currentTimeMillis();
			log.info("[POST] Tempo de Execução: "
					+ (finalExecucao - inicioExecucao) / 1000 + "s");
		}
	}

	private String recuperarResponse(HttpResponse response)
			throws IllegalStateException, IOException {
		HttpEntity entity = response.getEntity();
		StringBuilder result = new StringBuilder();
		if (entity != null) {
			InputStream instream = entity.getContent();
			try {
				BufferedReader rd = new BufferedReader(new InputStreamReader(
						instream));
				String line = "";
				while ((line = rd.readLine()) != null) {
					result.append(line);
				}
			} finally {
				instream.close();
			}
		}
		return result.toString();
	}

	private boolean isStatusSucesso(int status) {
		return status >= 200 && status < 300;
	}

	public String httpPOST(String url, String urlParameters,
			String headerParameters) throws IOException {

		long inicioExecucao = System.currentTimeMillis();

		try {

			HttpClient client = HttpClientBuilder.create().build();
			HttpPost post = new HttpPost(url);

			if (headerParameters != null) {
				String[] params = headerParameters.split("&");
				for (String param : params) {
					String[] p = param.split("=");
					post.setHeader(p[0], p[1]);
				}
			}

			List<NameValuePair> paramList = new ArrayList<NameValuePair>();
			if (urlParameters != null) {
				String[] params = urlParameters.split("&");
				for (String param : params) {
					String[] p = param.split("=");
					paramList.add(new BasicNameValuePair(p[0], p[1].replaceAll(
							Configuracoes.BINARIO_E.toString(),
							Configuracoes.VALUE_BINARIO_E.toString())));
				}
			}

			post.setEntity(new UrlEncodedFormEntity(paramList));
			HttpResponse response = client.execute(post);
			int status = response.getStatusLine().getStatusCode();

			if (isStatusSucesso(status)) {

				HttpEntity entity = response.getEntity();
				StringBuffer result = new StringBuffer();

				if (entity != null) {
					InputStream instream = entity.getContent();
					try {
						BufferedReader rd = new BufferedReader(
								new InputStreamReader(instream));
						String line = "";
						while ((line = rd.readLine()) != null) {
							result.append(line);
						}
					} finally {
						instream.close();
					}
				}

				return result.toString();

			} else {
				throw new IOException("Um erro " + status + " ocorreu.");
			}

		} finally {
			long finalExecucao = System.currentTimeMillis();
			log.info("[POST] Tempo de Execução: "
					+ (finalExecucao - inicioExecucao) / 1000 + "s");
		}

	}

	public String httpPOST(String url, String urlParameters,
			String headerParameters, String encoding) throws IOException {

		long inicioExecucao = System.currentTimeMillis();
		final String charset = encoding == null ? "UTF-8" : encoding;

		try {

			HttpClient client = HttpClientBuilder.create().build();
			HttpPost post = new HttpPost(url);

			if (headerParameters != null) {
				String[] params = headerParameters.split("&");
				for (String param : params) {
					String[] p = param.split("=");
					post.setHeader(p[0], p[1]);
				}
			}

			List<NameValuePair> paramList = new ArrayList<NameValuePair>();
			if (urlParameters != null) {
				String[] params = urlParameters.split("&");
				for (String param : params) {
					String[] p = param.split("=");
					paramList.add(new BasicNameValuePair(p[0], p[1]));
				}
			}

			post.setEntity(new UrlEncodedFormEntity(paramList));
			HttpResponse response = client.execute(post);
			int status = response.getStatusLine().getStatusCode();

			if (isStatusSucesso(status)) {

				HttpEntity entity = response.getEntity();
				StringBuffer result = new StringBuffer();

				if (entity != null) {
					InputStream instream = entity.getContent();
					try {
						BufferedReader rd = new BufferedReader(
								new InputStreamReader(instream, charset));
						String line = "";
						while ((line = rd.readLine()) != null) {
							result.append(line);
						}
					} finally {
						instream.close();
					}
				}

				return result.toString();

			} else {
				throw new IOException("Um erro " + status + " ocorreu.");
			}

		} finally {
			long finalExecucao = System.currentTimeMillis();
			log.info("[POST] Tempo de Execução: "
					+ (finalExecucao - inicioExecucao) / 1000 + "s");
		}

	}

	public String httpGET(String url) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
		return httpGET(url, null, null);
	}

	public String httpGET(String url, String urlParameters) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
		return httpGET(url, urlParameters, null);
	}

	public String httpGET(String url, String urlParameters,
			String headerParameters) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
		return httpGET(url, urlParameters, headerParameters, null);
	}

    public String httpGET(String url, String urlParameters,
        String headerParameters, String encoding) throws IOException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException {

        long inicioExecucao = System.currentTimeMillis();

        final String charset = encoding == null ? "UTF-8" : encoding;

        CloseableHttpClient httpclient = HttpClients
				.custom()
				.setSSLContext(new SSLContextBuilder().loadTrustMaterial(null, TrustAllStrategy.INSTANCE).build())
				.setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
				.build();
        String saida = "";

        try {
        	HttpGet httpget;
        	if(urlParameters != null && urlParameters.isEmpty()) {
        		httpget = new HttpGet(url);
        	} else {
        		httpget = new HttpGet(url + "?" + urlParameters);
        	}
            if (headerParameters != null) {
                String[] params = headerParameters.split("&");
                for (String param : params) {
                    String[] p = param.split("=");
                    httpget.setHeader(p[0], p[1]);
                }
            }

            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {
                @Override
                public String handleResponse(final HttpResponse response)
                    throws ClientProtocolException, IOException {
                    int status = response.getStatusLine().getStatusCode();
                    if (isStatusSucesso(status)) {
                        HttpEntity entity = response.getEntity();
                        return entity != null ? EntityUtils.toString(entity,
                            charset) : null;
                    } else {
                        throw new ClientProtocolException(
                            "Unexpected response status: " + status);
                    }
                }
            };

            saida = httpclient.execute(httpget, responseHandler);

        } finally {
            httpclient.close();
        }

        long finalExecucao = System.currentTimeMillis();
        log.info("[GET] Tempo de Execução: " + (finalExecucao - inicioExecucao)
            / 1000 + "s");

        return saida.toString();
    }
    
    
    public String httpPUT(String url)  throws IOException {
    	return httpPUT(url, null, null, null);
    }
    
    public String httpPUT(String url, String urlParameters)  throws IOException {
    	return httpPUT(url, urlParameters, null, null);
    }

    public String httpPUT(String url, String urlParameters, String headerParameters)  throws IOException {
    	return httpPUT(url, urlParameters, headerParameters, null);
    }
    
    public String httpPUT(String url, String urlParameters,
			String headerParameters, String encoding) throws IOException {

		long inicioExecucao = System.currentTimeMillis();
		final String charset = encoding == null ? "UTF-8" : encoding;

		try {

			HttpClient client = HttpClientBuilder.create().build();
			HttpPut put = new HttpPut(url);

			if (headerParameters != null) {
				String[] params = headerParameters.split("&");
				for (String param : params) {
					String[] p = param.split("=");
					put.setHeader(p[0], p[1]);
				}
			}

			List<NameValuePair> paramList = new ArrayList<NameValuePair>();
			if (urlParameters != null) {
				String[] params = urlParameters.split("&");
				for (String param : params) {
					String[] p = param.split("=");
					paramList.add(new BasicNameValuePair(p[0], p[1]));
				}
			}

			put.setEntity(new UrlEncodedFormEntity(paramList));
			HttpResponse response = client.execute(put);
			int status = response.getStatusLine().getStatusCode();

			if (isStatusSucesso(status)) {

				HttpEntity entity = response.getEntity();
				StringBuffer result = new StringBuffer();

				if (entity != null) {
					InputStream instream = entity.getContent();
					try {
						BufferedReader rd = new BufferedReader(
								new InputStreamReader(instream, charset));
						String line = "";
						while ((line = rd.readLine()) != null) {
							result.append(line);
						}
					} finally {
						instream.close();
					}
				}

				return result.toString();

			} else {
				throw new IOException("Um erro " + status + " ocorreu.");
			}

		} finally {
			long finalExecucao = System.currentTimeMillis();
			log.info("[POST] Tempo de Execução: "
					+ (finalExecucao - inicioExecucao) / 1000 + "s");
		}

	}

}


// Fim do arquivo: HttpUtils.java

// Arquivo: LogUtil.java
// Caminho: \br\gov\ana\sarsb\util\LogUtil.java

package br.gov.ana.sarsb.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class LogUtil {
	
	public static String messageToJson(String msg) {
		try {
			return new ObjectMapper().writeValueAsString(msg);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return "";
	}

}


// Fim do arquivo: LogUtil.java

// Arquivo: MD5.java
// Caminho: \br\gov\ana\sarsb\util\MD5.java

package br.gov.ana.sarsb.util;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import lombok.extern.log4j.Log4j2;

@Log4j2
public final class MD5 {

    private MD5() {
    }

    public static String valueOf(String valor) {

        try {
            String sen = "";
            MessageDigest md = null;

            md = MessageDigest.getInstance("MD5");

            BigInteger hash = new BigInteger(1, md.digest(valor.getBytes("UTF-8")));
            sen = hash.toString(16);

            return sen;

        } catch(UnsupportedEncodingException ex) {
            log.error(ex.getMessage(), ex);
            return null;
        } catch (NoSuchAlgorithmException ex) {
            log.error(ex.getMessage(), ex);
            return null;
        }
    }

}


// Fim do arquivo: MD5.java

// Arquivo: Md5Util.java
// Caminho: \br\gov\ana\sarsb\util\Md5Util.java

package br.gov.ana.sarsb.util;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;

import br.gov.ana.sarsb.model.entity.AgenciaReguladora;

public class Md5Util {
	
	private Md5Util() {
		throw new IllegalStateException("Utility class");
	}

	public static String gerarHashAgenciaReguladora(AgenciaReguladora agencia) {
		try {
			Random gerador = SecureRandom.getInstanceStrong();
			String chave = agencia.getId() + gerador.nextInt() + (agencia.getNome().substring(0, 5).trim());
			byte[] hash = gerarHash(chave, "MD5");
			return hash != null ? stringHexa(hash) : null;
		} catch (NoSuchAlgorithmException e) {
			return null;
		}
	}

	public static byte[] gerarHash(String frase, String algoritmo) {
		try {
			MessageDigest md = MessageDigest.getInstance(algoritmo);
			md.update(frase.getBytes());
			return md.digest();
		} catch (NoSuchAlgorithmException e) {
			return new byte[0];
		}
	}

	private static String stringHexa(byte[] bytes) {
		StringBuilder s = new StringBuilder();
		for (int i = 0; i < bytes.length; i++) {
			int parteAlta = ((bytes[i] >> 4) & 0xf) << 4;
			int parteBaixa = bytes[i] & 0xf;
			if (parteAlta == 0)
				s.append('0');
			s.append(Integer.toHexString(parteAlta | parteBaixa));
		}
		return s.toString();
	}
}


// Fim do arquivo: Md5Util.java

// Arquivo: Mod11CNPJ.java
// Caminho: \br\gov\ana\sarsb\util\Mod11CNPJ.java

package br.gov.ana.sarsb.util;

import java.util.regex.Pattern;

public final class Mod11CNPJ {

    private Mod11CNPJ() {
    }

    public static boolean isValido(String cnpj) {

        boolean valido;

        String strCnpj = cnpj.trim().replace("[\\.\\-\\/]", "");
        Pattern pattern = Pattern.compile("[0-9]{14}");
        valido = pattern.matcher(strCnpj).matches();

        if(!valido) {
            return false;
        }

        String temp = strCnpj.substring(0,12);
        temp += obterDV(temp);
        temp += obterDV(temp);

        return strCnpj.equals(temp);

    }

    public static String obterDV(String cnpj) {

        int soma = 0;
        int d = 0;
        int fator = cnpj.length() - 7;
        String fonte = cnpj;

        for (int i = 0; i < fonte.length(); i++) {
            d = fonte.charAt(i) - '0';
            soma += d * (fator--);

            if(fator == 1) {
                fator = 9;
            }
        }

        d = soma % 11;
        if (d < 2) {
            d = 0;
        } else {
            d = 11 - d;
        }

        return Integer.toString(d);

    }

}

// Fim do arquivo: Mod11CNPJ.java

// Arquivo: Mod11CPF.java
// Caminho: \br\gov\ana\sarsb\util\Mod11CPF.java

package br.gov.ana.sarsb.util;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

public final class Mod11CPF {

    private static final List<String> CPFS_INVALIDOS = Arrays.asList(new String[] {
        "00000000191", "00000000000", "11111111111", "22222222222",
        "33333333333", "44444444444", "55555555555", "66666666666",
        "77777777777", "88888888888", "99999999999" });

    private Mod11CPF() {
    }

    public static boolean isValido(String cpf) {

        boolean valido;

        String strCpf = cpf.trim().replace("[\\.\\-]", "");
        Pattern pattern = Pattern.compile("[0-9]{11}");
        valido = pattern.matcher(strCpf).matches();

        if(!valido) {
            return false;
        }

        valido = !CPFS_INVALIDOS.contains(strCpf);

        if(!valido) {
            return false;
        }

        String temp = strCpf.substring(0,9);
        temp += obterDV(temp);
        temp += obterDV(temp);

        return strCpf.equals(temp);

    }

    public static String obterDV(String cpf) {

        int soma = 0;
        int d = 0;
        int fator = cpf.length() + 1;
        String fonte = cpf;

        for (int i = 0; i < fonte.length(); i++) {
            d = fonte.charAt(i) - '0';
            soma += d * (fator--);
        }

        d = soma % 11;
        if (d < 2) {
            d = 0;
        } else {
            d = 11 - d;
        }

        return Integer.toString(d);

    }

}

// Fim do arquivo: Mod11CPF.java

// Arquivo: PadraoValidacao.java
// Caminho: \br\gov\ana\sarsb\util\PadraoValidacao.java

package br.gov.ana.sarsb.util;

public interface PadraoValidacao {

    String PADRAO_CPF = "([0-9]{3})([0-9]{3})([0-9]{3})([0-9]{2})";
    String PADRAO_CNPJ = "([0-9]{2})([0-9]{3})([0-9]{3})([0-9]{4})([0-9]{2})";
    String PADRAO_CEP = "([0-9]{2})([0-9]{3})([0-9]{3})";
    String PADRAO_CNARH = "([0-9]{2})([0-9]{1})([0-9]{7})([0-9]{2})";
    String PADRAO_TELEFONE8 = "([0-9]{4})([0-9]{4})";
    String PADRAO_TELEFONE9 = "([0-9]{5})([0-9]{4})";
    String PADRAO_TELEFONE10 = "([0-9]{2})([0-9]{4})([0-9]{4})";
    String PADRAO_TELEFONE11 = "([0-9]{2})([0-9]{5})([0-9]{4})";
    String PADRAO_TELEFONE0800 = "([0-9]{4})([0-9]{2})([0-9]{4})";
    String PADRAO_PROCESSOS = "([0-9]{5})([0-9]{6})([0-9]{4})([0-9]{2})";
    String PADRAO_PROCESSOS_SEM_DIG_VERIFICADOR = "([0-9]{5})([0-9]{6})([0-9]{4})";
    String PADRAO_RESOLUCAO = "([0-9]+)([0-9]{4})";
    String PADRAO_EMAIL = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"+"[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

}


// Fim do arquivo: PadraoValidacao.java

// Arquivo: ProtocoloGenerator.java
// Caminho: \br\gov\ana\sarsb\util\ProtocoloGenerator.java

package br.gov.ana.sarsb.util;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.atomic.AtomicInteger;

public class ProtocoloGenerator {
    // AtomicInteger para garantir que o incremento seja thread-safe
    private static final AtomicInteger sequencia = new AtomicInteger(0);

    // Gera um número de protocolo seguindo uma sequência numérica
    public static String gerarProtocolo() {
        // Incrementa a sequência
        int numeroSequencial = sequencia.incrementAndGet();

        // Obtém a data atual
        Date now = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");

        // Formata o número de protocolo
        String protocolo = sdf.format(now) + "-" + String.format("%02d", numeroSequencial);

        return protocolo;


    }
}


// Fim do arquivo: ProtocoloGenerator.java

// Arquivo: ProtocoloUtil.java
// Caminho: \br\gov\ana\sarsb\util\ProtocoloUtil.java

package br.gov.ana.sarsb.util;

public class ProtocoloUtil {

    // Gera um número de protocolo seguindo uma sequência numérica do id do protocolo
    public static String gerarProtocolo(Long id, Long anoReferencia) {

        return String.format("%05d/%d", id, anoReferencia);

    }
}


// Fim do arquivo: ProtocoloUtil.java

// Arquivo: ResourceMultipartFileUtil.java
// Caminho: \br\gov\ana\sarsb\util\ResourceMultipartFileUtil.java

package br.gov.ana.sarsb.util;

import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;

public class ResourceMultipartFileUtil implements MultipartFile {

    private final Resource resource;
    private final String originalFilename;

    public ResourceMultipartFileUtil(Resource resource, String originalFilename) {
        this.resource = resource;
        this.originalFilename = originalFilename;
    }

    @Override
    public String getName() {
        return resource.getFilename();
    }

    @Override
    public String getOriginalFilename() {
        return originalFilename;
    }

    @Override
    public String getContentType() {
        return "application/octet-stream";
    }

    @Override
    public boolean isEmpty() {
        try {
            return resource.contentLength() == 0;
        } catch (IOException e) {
            return true;
        }
    }

    @Override
    public long getSize() {
        try {
            return resource.contentLength();
        } catch (IOException e) {
            return 0;
        }
    }

    @Override
    public byte[] getBytes() throws IOException {
        return resource.getInputStream().readAllBytes();
    }

    @Override
    public InputStream getInputStream() throws IOException {
        return resource.getInputStream();
    }

    @Override
    public void transferTo(java.io.File dest) throws IOException, IllegalStateException {
        try (InputStream inputStream = resource.getInputStream()) {
            Files.copy(inputStream, dest.toPath());
        }
    }
}


// Fim do arquivo: ResourceMultipartFileUtil.java

// Arquivo: RespostaValidacao.java
// Caminho: \br\gov\ana\sarsb\util\RespostaValidacao.java

package br.gov.ana.sarsb.util;

import lombok.Getter;
import lombok.Setter;

import java.util.List;


@Getter
@Setter
public class RespostaValidacao {
    private boolean sucesso;
    private List<String> mensagens;

    public RespostaValidacao(boolean sucesso, List<String> mensagens) {
        this.sucesso = sucesso;
        this.mensagens = mensagens;
    }
}


// Fim do arquivo: RespostaValidacao.java

// Arquivo: SasbUtil.java
// Caminho: \br\gov\ana\sarsb\util\SasbUtil.java

package br.gov.ana.sarsb.util;

import java.time.LocalDate;

public class SasbUtil {

	public static Long gerarNumeroRecibo(Long maxNumRecibo) {
		if (maxNumRecibo == null || !maxNumRecibo.toString().contains(String.valueOf(LocalDate.now().getYear()))) {
			return 10000L + LocalDate.now().getYear();
		} else {
			return 10000L + maxNumRecibo;
		}
	}


	public static Long gerarNumeroReciboMunicipio(Long maxNumRecibo) {
		if (maxNumRecibo == null || !maxNumRecibo.toString().contains(String.valueOf(LocalDate.now().getYear()))) {
			return 10000L + LocalDate.now().getYear();
		} else {
			return 10000L + maxNumRecibo;
		}
	}







}


// Fim do arquivo: SasbUtil.java

// Arquivo: StartupUtil.java
// Caminho: \br\gov\ana\sarsb\util\StartupUtil.java

package br.gov.ana.sarsb.util;

import java.net.SocketException;

import br.gov.ana.sarsb.config.Ambiente;
import br.gov.ana.sarsb.config.cache.ConfigCache;
import br.gov.ana.sarsb.config.cache.ConfigSource;
import lombok.extern.log4j.Log4j2;

@Log4j2
public class StartupUtil {

    private static final String AMBIENTE_DESENVOLVIMENTO = "DEV";
    private static final String AMBIENTE_HOMOLOGACAO = "HMG";
    private static final String AMBIENTE_LOCAL = "LOCAL";
    private static final String AMBIENTE_QA = "QA";
    private static final String AMBIENTE_MIGRACAO = "MIGRA";
    
    private StartupUtil() {
    }

    public static void inicializaConfiguracoes(ConfigSource source) {
        ConfigCache.getInstance().setSource(source);
    }

    public static void inicializarAmbiente(String ambienteConfig) throws SocketException {
        inicializarAmbiente(ambienteConfig, null);
    }

    public static void inicializarAmbiente(String ambienteConfig, String forcarAmbiente) throws SocketException {
        String ambiente = forcarAmbiente;
        if(ambiente == null) {
            ConfigCache cc = ConfigCache.getInstance();
            ambiente = cc.get(ambienteConfig);
        }
        
        if(ambiente.equals(AMBIENTE_DESENVOLVIMENTO)) {
            Ambiente.getInstance().setDesenvolvimento();
            log.debug("[AMBIENTE] Desenvolvimento");

        } else if(ambiente.equals(AMBIENTE_HOMOLOGACAO)) {
            Ambiente.getInstance().setHomologacao();
            log.debug("[AMBIENTE] Homologação");

        } else if(ambiente.equals(AMBIENTE_LOCAL)) {
            Ambiente.getInstance().setLocal();
            log.debug("[AMBIENTE] LOCAL");

        } else if(ambiente.equals(AMBIENTE_QA)) {
            Ambiente.getInstance().setQA();
            log.debug("[AMBIENTE] QA");

        } else if(ambiente.equals(AMBIENTE_MIGRACAO)) {
            Ambiente.getInstance().setMigracao();
            log.debug("[AMBIENTE] Migracao");

        } else {
            Ambiente.getInstance().setProducao();
            log.debug("[AMBIENTE] Produção");
        }
    }

}


// Fim do arquivo: StartupUtil.java

============================================================


